# -*- coding: utf-8 -*-
"""
WebSocket Manager
Robust WebSocket connection with automatic reconnection and health monitoring
"""

import asyncio
import json
import websockets
from typing import Callable, Optional, Dict, Any
from datetime import datetime
from config.settings import logger


class WebSocketManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    - Health monitoring
    - Exponential backoff
    - Connection pooling
    """

    def __init__(
        self,
        url: str,
        on_message: Callable,
        on_connect: Optional[Callable] = None,
        on_disconnect: Optional[Callable] = None,
        ping_interval: int = 20,
        ping_timeout: int = 15,
        reconnect_delay: int = 5,
        max_reconnect_attempts: int = 10,
        name: str = "WebSocket",
    ):
        self.url = url
        self.on_message = on_message
        self.on_connect = on_connect
        self.on_disconnect = on_disconnect
        self.ping_interval = ping_interval
        self.ping_timeout = ping_timeout
        self.reconnect_delay = reconnect_delay
        self.max_reconnect_attempts = max_reconnect_attempts
        self.name = name

        # State
        self.running = False
        self.ws: Optional[websockets.WebSocketClientProtocol] = None
        self.reconnect_count = 0
        self.last_message_time: Optional[datetime] = None
        self.connection_start_time: Optional[datetime] = None
        self.total_messages = 0

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å –∞–≤—Ç–æ—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º"""
        self.running = True
        logger.info(f"üöÄ {self.name}: –ó–∞–ø—É—Å–∫ WebSocket Manager")

        while self.running:
            try:
                await self._connect()
            except websockets.exceptions.ConnectionClosed:
                logger.warning(f"‚ö†Ô∏è {self.name}: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                await self._handle_disconnect()
            except Exception as e:
                logger.error(f"‚ùå {self.name}: WebSocket error: {e}")
                await self._handle_disconnect()

    async def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            logger.info(f"üîå {self.name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.url}")

            async with websockets.connect(
                self.url,
                ping_interval=self.ping_interval,
                ping_timeout=self.ping_timeout,
                close_timeout=5,
                max_size=10_000_000,  # 10MB max message size
            ) as ws:
                self.ws = ws
                self.reconnect_count = 0
                self.connection_start_time = datetime.now()
                logger.info(f"‚úÖ {self.name}: WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω")

                # Callback on connect
                if self.on_connect:
                    await self.on_connect()

                # Message loop
                async for message in ws:
                    if not self.running:
                        break

                    self.last_message_time = datetime.now()
                    self.total_messages += 1

                    try:
                        data = json.loads(message)
                        await self.on_message(data)
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå {self.name}: JSON decode error: {e}")
                    except Exception as e:
                        logger.error(f"‚ùå {self.name}: Message processing error: {e}")

        except Exception as e:
            logger.error(f"‚ùå {self.name}: Connection error: {e}")
            raise

    async def _handle_disconnect(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        if self.on_disconnect:
            await self.on_disconnect()

        self.reconnect_count += 1

        if self.reconnect_count >= self.max_reconnect_attempts:
            logger.error(
                f"‚õî {self.name}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π "
                f"({self.max_reconnect_attempts}), –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
            )
            self.running = False
            return

        # Exponential backoff
        delay = min(self.reconnect_delay * (2 ** (self.reconnect_count - 1)), 300)
        logger.info(
            f"üîÑ {self.name}: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{self.reconnect_count} "
            f"—á–µ—Ä–µ–∑ {delay}s..."
        )
        await asyncio.sleep(delay)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket"""
        logger.info(f"üõë {self.name}: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket")
        self.running = False

        if self.ws and not self.ws.closed:
            await self.ws.close()
            logger.info(f"üîå {self.name}: WebSocket –∑–∞–∫—Ä—ã—Ç")

    async def send(self, message: Dict[Any, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.ws and not self.ws.closed:
            try:
                await self.ws.send(json.dumps(message))
            except Exception as e:
                logger.error(f"‚ùå {self.name}: Send error: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è {self.name}: WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection_start_time:
            uptime = (datetime.now() - self.connection_start_time).total_seconds()
        else:
            uptime = 0

        return {
            "name": self.name,
            "connected": self.ws is not None and not self.ws.closed,
            "total_messages": self.total_messages,
            "reconnect_count": self.reconnect_count,
            "uptime_seconds": uptime,
            "last_message": (
                self.last_message_time.isoformat() if self.last_message_time else None
            ),
        }

    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.ws or self.ws.closed:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–ª–∏ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        if self.last_message_time:
            time_since_last = (datetime.now() - self.last_message_time).total_seconds()
            return time_since_last < 60

        return True
