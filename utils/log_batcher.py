# -*- coding: utf-8 -*-
"""
–ë–∞—Ç—á–∏–Ω–≥ –ª–æ–≥–æ–≤ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import asyncio
from collections import defaultdict, Counter
from datetime import datetime
from typing import Dict, List
from config.settings import logger


class LogBatcher:
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫–∏"""

    def __init__(self, flush_interval: int = 30):
        """
        Args:
            flush_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥–∞ —Å–≤–æ–¥–æ–∫ (—Å–µ–∫—É–Ω–¥—ã)
        """
        self.flush_interval = flush_interval
        self.orderbook_updates: Counter = Counter()
        self.volume_calculations: Counter = Counter()
        self.scenario_matches: List[Dict] = []
        self.last_flush = datetime.now()
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–∞—Ç—á–µ—Ä–∞"""
        self.is_running = True
        asyncio.create_task(self._flush_loop())
        logger.info(f"‚úÖ LogBatcher –∑–∞–ø—É—â–µ–Ω (—Å–≤–æ–¥–∫–∏ –∫–∞–∂–¥—ã–µ {self.flush_interval}s)")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞—Ç—á–µ—Ä–∞"""
        self.is_running = False
        await self._flush()  # –§–∏–Ω–∞–ª—å–Ω—ã–π flush
        logger.info("üõë LogBatcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def log_orderbook_update(self, exchange: str, symbol: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ orderbook"""
        key = f"{exchange}:{symbol}"
        self.orderbook_updates[key] += 1

    def log_volume_calculation(self, symbol: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—á–µ—Ç volume profile"""
        self.volume_calculations[symbol] += 1

    def log_scenario_match(self, symbol: str, score: float, scenario: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.scenario_matches.append({
            'symbol': symbol,
            'score': score,
            'scenario': scenario,
            'time': datetime.now()
        })

    async def _flush_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å–≤–æ–¥–æ–∫"""
        while self.is_running:
            await asyncio.sleep(self.flush_interval)
            await self._flush()

    async def _flush(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É"""
        if not any([self.orderbook_updates, self.volume_calculations, self.scenario_matches]):
            return

        logger.info("=" * 70)
        logger.info(f"üìä –°–í–û–î–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –∑–∞ {self.flush_interval}s")
        logger.info("=" * 70)

        # Orderbook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.orderbook_updates:
            logger.info(f"üìà Orderbook Updates ({sum(self.orderbook_updates.values())} total):")
            for key, count in self.orderbook_updates.most_common(10):
                exchange, symbol = key.split(':')
                logger.info(f"   ‚Ä¢ {exchange:10} {symbol:10} ‚Üí {count:4} updates")
            self.orderbook_updates.clear()

        # Volume Profile
        if self.volume_calculations:
            logger.info(f"üìä Volume Profile Calculations ({sum(self.volume_calculations.values())} total):")
            for symbol, count in self.volume_calculations.most_common(5):
                logger.info(f"   ‚Ä¢ {symbol:10} ‚Üí {count:4} calculations")
            self.volume_calculations.clear()

        # Scenario Matches
        if self.scenario_matches:
            logger.info(f"üéØ Scenario Matches ({len(self.scenario_matches)} total):")
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
            by_symbol = defaultdict(list)
            for match in self.scenario_matches:
                by_symbol[match['symbol']].append(match)

            for symbol, matches in by_symbol.items():
                avg_score = sum(m['score'] for m in matches) / len(matches)
                best_score = max(m['score'] for m in matches)
                logger.info(f"   ‚Ä¢ {symbol:10} ‚Üí {len(matches):3} matches | Avg: {avg_score:.1f} | Best: {best_score:.1f}")
            self.scenario_matches.clear()

        logger.info("=" * 70)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
log_batcher = LogBatcher(flush_interval=30)
