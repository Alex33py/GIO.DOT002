# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import time
import functools
from typing import Callable, Any
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
from config.settings import logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ executor'—ã
_process_executor = None
_thread_executor = None

def get_process_executor(max_workers: int = 4) -> ProcessPoolExecutor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ProcessPoolExecutor (–¥–ª—è CPU-bound –∑–∞–¥–∞—á)"""
    global _process_executor
    if _process_executor is None:
        _process_executor = ProcessPoolExecutor(max_workers=max_workers)
    return _process_executor

def get_thread_executor(max_workers: int = 10) -> ThreadPoolExecutor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ThreadPoolExecutor (–¥–ª—è I/O-bound –∑–∞–¥–∞—á)"""
    global _thread_executor
    if _thread_executor is None:
        _thread_executor = ThreadPoolExecutor(max_workers=max_workers)
    return _thread_executor

def async_timed(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async —Ñ—É–Ω–∫—Ü–∏–π"""
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = await func(*args, **kwargs)
        elapsed = time.perf_counter() - start

        logger.debug(f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {elapsed:.3f}—Å")
        return result

    return wrapper

def timed(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è sync —Ñ—É–Ω–∫—Ü–∏–π"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        elapsed = time.perf_counter() - start

        logger.debug(f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {elapsed:.3f}—Å")
        return result

    return wrapper

async def run_in_executor(func: Callable, *args, use_process: bool = False, **kwargs) -> Any:
    """
    –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ executor

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        use_process: True –¥–ª—è CPU-bound (ProcessPoolExecutor), False –¥–ª—è I/O-bound
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    """
    loop = asyncio.get_event_loop()

    if use_process:
        executor = get_process_executor()
    else:
        executor = get_thread_executor()

    # functools.partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ kwargs
    partial_func = functools.partial(func, *args, **kwargs)

    return await loop.run_in_executor(executor, partial_func)

class BatchProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, batch_size: int = 100, flush_interval: float = 5.0):
        self.batch_size = batch_size
        self.flush_interval = flush_interval
        self.batches = {}
        self.last_flush = {}

    async def add_item(self, key: str, item: Any, processor: Callable):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±–∞—Ç—á
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ batch_size –∏–ª–∏ flush_interval
        """
        if key not in self.batches:
            self.batches[key] = []
            self.last_flush[key] = time.time()

        self.batches[key].append(item)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è flush
        should_flush = (
            len(self.batches[key]) >= self.batch_size or
            (time.time() - self.last_flush[key]) >= self.flush_interval
        )

        if should_flush:
            await self.flush(key, processor)

    async def flush(self, key: str, processor: Callable):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞"""
        if key not in self.batches or not self.batches[key]:
            return

        batch = self.batches[key]
        self.batches[key] = []
        self.last_flush[key] = time.time()

        try:
            await processor(batch)
            logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á {key}: {len(batch)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {key}: {e}")

class RateLimiter:
    """Rate limiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤"""

    def __init__(self, max_calls: int, period: float):
        """
        Args:
            max_calls: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
            period: –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.max_calls = max_calls
        self.period = period
        self.calls = []

    async def acquire(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∑–æ–≤"""
        now = time.time()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
        self.calls = [call_time for call_time in self.calls if now - call_time < self.period]

        if len(self.calls) >= self.max_calls:
            # –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
            sleep_time = self.period - (now - self.calls[0])
            if sleep_time > 0:
                logger.debug(f"‚è∏Ô∏è Rate limit: –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f}—Å")
                await asyncio.sleep(sleep_time)
                return await self.acquire()

        self.calls.append(now)

def rate_limited(max_calls: int, period: float):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting"""
    limiter = RateLimiter(max_calls, period)

    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            await limiter.acquire()
            return await func(*args, **kwargs)
        return wrapper
    return decorator

async def shutdown_executors():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã executor'–æ–≤"""
    global _process_executor, _thread_executor

    if _thread_executor:
        _thread_executor.shutdown(wait=True)
        logger.info("üîÑ ThreadPoolExecutor –∑–∞–∫—Ä—ã—Ç")

    if _process_executor:
        _process_executor.shutdown(wait=True)
        logger.info("üîÑ ProcessPoolExecutor –∑–∞–∫—Ä—ã—Ç")
