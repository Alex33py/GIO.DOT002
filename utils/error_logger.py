#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è GIO Crypto Bot
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç traceback –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª errors.log
"""

import traceback
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional
from config.settings import logger, DATA_DIR


class ErrorLogger:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""

    ERROR_LOG_PATH = DATA_DIR / "errors.log"

    @staticmethod
    def log_error(
        error: Exception,
        context: Dict[str, Any],
        severity: str = "ERROR"
    ):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–º–æ–¥—É–ª—å, —Ñ—É–Ω–∫—Ü–∏—è, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ (ERROR, CRITICAL, WARNING)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º traceback
            tb = traceback.format_exception(type(error), error, error.__traceback__)
            tb_str = "".join(tb)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            error_message = f"""
{'='*80}
[{severity}] {timestamp}
{'='*80}

ERROR TYPE: {type(error).__name__}
ERROR MESSAGE: {str(error)}

CONTEXT:
{ErrorLogger._format_context(context)}

TRACEBACK:
{tb_str}
{'='*80}

"""

            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            if severity == "CRITICAL":
                logger.critical(f"üí• CRITICAL ERROR: {error}")
            elif severity == "ERROR":
                logger.error(f"‚ùå ERROR: {error}")
            else:
                logger.warning(f"‚ö†Ô∏è WARNING: {error}")

            logger.error(f"üìç Context: {ErrorLogger._format_context_short(context)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            ErrorLogger._save_to_file(error_message)

        except Exception as e:
            # –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–∞–º–æ —É–ø–∞–ª–æ
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏: {e}")

    @staticmethod
    def _format_context(context: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞"""
        lines = []
        for key, value in context.items():
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if isinstance(value, str) and len(value) > 200:
                value = value[:200] + "..."
            lines.append(f"  {key}: {value}")
        return "\n".join(lines)

    @staticmethod
    def _format_context_short(context: Dict[str, Any]) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
        items = []
        for key, value in context.items():
            if isinstance(value, str) and len(value) > 50:
                value = value[:50] + "..."
            items.append(f"{key}={value}")
        return ", ".join(items)

    @staticmethod
    def _save_to_file(message: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ errors.log"""
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
            ErrorLogger.ERROR_LOG_PATH.parent.mkdir(parents=True, exist_ok=True)

            # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(ErrorLogger.ERROR_LOG_PATH, "a", encoding="utf-8") as f:
                f.write(message)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (5 –ú–ë)
            ErrorLogger._rotate_log_if_needed()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ errors.log: {e}")

    @staticmethod
    def _rotate_log_if_needed(max_size_mb: int = 5):
        """–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"""
        try:
            if not ErrorLogger.ERROR_LOG_PATH.exists():
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            size_mb = ErrorLogger.ERROR_LOG_PATH.stat().st_size / (1024 * 1024)

            if size_mb > max_size_mb:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                backup_path = ErrorLogger.ERROR_LOG_PATH.with_suffix(".old.log")
                ErrorLogger.ERROR_LOG_PATH.rename(backup_path)

                logger.info(f"üìã –†–æ—Ç–∞—Ü–∏—è errors.log: {size_mb:.1f} MB ‚Üí errors.old.log")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ errors.log: {e}")

    @staticmethod
    def log_api_error(
        api_name: str,
        endpoint: str,
        error: Exception,
        params: Optional[Dict] = None
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—à–∏–±–æ–∫"""
        context = {
            "module": "API Connector",
            "api": api_name,
            "endpoint": endpoint,
            "params": params or {},
            "error_type": type(error).__name__
        }

        ErrorLogger.log_error(error, context, severity="ERROR")

    @staticmethod
    def log_calculation_error(
        calculation_name: str,
        input_data: Any,
        error: Exception
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ä–∞—Å—á—ë—Ç–æ–≤"""
        context = {
            "module": "Analytics",
            "calculation": calculation_name,
            "input_type": type(input_data).__name__,
            "input_preview": str(input_data)[:100] if input_data else "None"
        }

        ErrorLogger.log_error(error, context, severity="WARNING")

    @staticmethod
    def log_validation_error(
        validator_name: str,
        data_type: str,
        error: Exception
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        context = {
            "module": "Validation",
            "validator": validator_name,
            "data_type": data_type,
            "error_type": type(error).__name__
        }

        ErrorLogger.log_error(error, context, severity="WARNING")

    @staticmethod
    def log_database_error(
        operation: str,
        table: str,
        error: Exception,
        query: Optional[str] = None
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ë–î"""
        context = {
            "module": "Database",
            "operation": operation,
            "table": table,
            "query": query[:100] if query else "N/A"
        }

        ErrorLogger.log_error(error, context, severity="ERROR")

    @staticmethod
    def log_websocket_error(
        symbol: str,
        stream_type: str,
        error: Exception
    ):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ WebSocket"""
        context = {
            "module": "WebSocket",
            "symbol": symbol,
            "stream_type": stream_type,
            "error_type": type(error).__name__
        }

        ErrorLogger.log_error(error, context, severity="ERROR")


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['ErrorLogger']
