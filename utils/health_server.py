# -*- coding: utf-8 -*-
"""
Health Check HTTP Server –¥–ª—è Railway
–†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Telegram –±–æ—Ç–æ–º
"""

import asyncio
import logging
import os
from aiohttp import web

logger = logging.getLogger("gio_bot.health_server")


class HealthCheckServer:
    """HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check endpoint"""

    def __init__(self, port: int = 8080):
        self.port = port
        self.app = web.Application()
        self.runner = None
        self.site = None
        self._setup_routes()

    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        self.app.router.add_get("/", self.root_handler)
        self.app.router.add_get("/health", self.health_handler)
        self.app.router.add_get("/status", self.status_handler)

    async def root_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        return web.Response(
            text="ü§ñ GIO Crypto Bot is running",
            status=200,
            content_type="text/plain"
        )

    async def health_handler(self, request):
        """Health check endpoint –¥–ª—è Railway"""
        return web.json_response(
            {
                "status": "healthy",
                "service": "gio-crypto-bot",
                "timestamp": asyncio.get_event_loop().time()
            },
            status=200
        )

    async def status_handler(self, request):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        return web.json_response(
            {
                "status": "running",
                "service": "gio-crypto-bot",
                "version": "1.0.0",
                "environment": os.getenv("ENVIRONMENT", "DEVELOPMENT"),
                "uptime": asyncio.get_event_loop().time()
            },
            status=200
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()
            self.site = web.TCPSite(self.runner, "0.0.0.0", self.port)
            await self.site.start()
            logger.info(f"‚úÖ Health Check Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Health Check Server: {e}")
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞"""
        if self.runner:
            await self.runner.cleanup()
            logger.info("üõë Health Check Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
_health_server = None


async def start_health_server(port: int = 8080):
    """–ó–∞–ø—É—Å–∫ Health Check —Å–µ—Ä–≤–µ—Ä–∞"""
    global _health_server
    _health_server = HealthCheckServer(port)
    await _health_server.start()
    return _health_server


async def stop_health_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Health Check —Å–µ—Ä–≤–µ—Ä–∞"""
    global _health_server
    if _health_server:
        await _health_server.stop()
