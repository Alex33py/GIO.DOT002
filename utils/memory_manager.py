# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è GIO Crypto Bot
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.13+
"""

import gc
import psutil
import os
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from collections import deque

from config.settings import logger, MAX_MEMORY_MB
from utils.helpers import current_epoch_ms


@dataclass
class CleanupResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
    success: bool
    freed_mb: float
    before_mb: float
    after_mb: float
    method: str
    timestamp: int


class AdvancedMemoryManager:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    –°–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.13+
    """

    def __init__(self, max_memory_mb: float = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏"""
        self.max_memory_mb = max_memory_mb or MAX_MEMORY_MB
        self.process = psutil.Process(os.getpid())

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
        self.warning_threshold = 80.0
        self.critical_threshold = 90.0

        # –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.memory_history = deque(maxlen=100)

        # –°—á—ë—Ç—á–∏–∫–∏
        self.cleanup_count = 0
        self.last_cleanup_time = 0
        self.emergency_cleanup_count = 0

        logger.info(f"‚úÖ AdvancedMemoryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ª–∏–º–∏—Ç: {self.max_memory_mb}MB)")

    def _get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            memory_info = self.process.memory_info()
            return memory_info.rss / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return 0.0

    def should_cleanup(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
        try:
            current_usage = self._get_memory_usage()
            usage_percentage = (current_usage / self.max_memory_mb) * 100

            # –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            return usage_percentage >= self.warning_threshold

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False

    async def cleanup_memory(self, force: bool = False) -> CleanupResult:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            before_usage = self._get_memory_usage()

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            collected = gc.collect()

            after_usage = self._get_memory_usage()
            freed_mb = before_usage - after_usage

            self.cleanup_count += 1
            self.last_cleanup_time = current_epoch_ms()

            result = CleanupResult(
                success=True,
                freed_mb=round(freed_mb, 2),
                before_mb=round(before_usage, 2),
                after_mb=round(after_usage, 2),
                method="gc.collect",
                timestamp=self.last_cleanup_time
            )

            logger.debug(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_mb:.2f}MB, —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return CleanupResult(
                success=False,
                freed_mb=0,
                before_mb=0,
                after_mb=0,
                method="error",
                timestamp=current_epoch_ms()
            )

    async def emergency_cleanup(self) -> CleanupResult:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        try:
            logger.warning("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")

            before_usage = self._get_memory_usage()

            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            gc.collect(2)  # –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π
            gc.collect(2)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            after_usage = self._get_memory_usage()
            freed_mb = before_usage - after_usage

            self.emergency_cleanup_count += 1

            result = CleanupResult(
                success=True,
                freed_mb=round(freed_mb, 2),
                before_mb=round(before_usage, 2),
                after_mb=round(after_usage, 2),
                method="emergency_gc",
                timestamp=current_epoch_ms()
            )

            logger.warning(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_mb:.2f}MB")

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            return CleanupResult(
                success=False,
                freed_mb=0,
                before_mb=0,
                after_mb=0,
                method="emergency_error",
                timestamp=current_epoch_ms()
            )

    def get_health_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
        try:
            current_usage = self._get_memory_usage()
            usage_percentage = (current_usage / self.max_memory_mb) * 100

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if usage_percentage >= self.critical_threshold:
                status = "critical"
            elif usage_percentage >= self.warning_threshold:
                status = "warning"
            else:
                status = "healthy"

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Python 3.13)
            try:
                total_objects = len(gc.get_objects())
            except Exception:
                total_objects = 0

            return {
                "status": status,
                "current_usage_mb": round(current_usage, 2),
                "max_memory_mb": self.max_memory_mb,
                "usage_percentage": round(usage_percentage, 1),
                "available_mb": round(self.max_memory_mb - current_usage, 2),
                "total_objects": total_objects,
                "cleanup_count": self.cleanup_count,
                "emergency_cleanup_count": self.emergency_cleanup_count,
                "last_cleanup": self.last_cleanup_time,
                "warning_threshold": self.warning_threshold,
                "critical_threshold": self.critical_threshold
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø–∞–º—è—Ç–∏: {e}")
            return {
                "status": "error",
                "error": str(e),
                "current_usage_mb": 0,
                "usage_percentage": 0
            }

    def detect_memory_leaks(self) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"""
        try:
            leaks = []

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            current_usage = self._get_memory_usage()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.memory_history.append({
                "timestamp": current_epoch_ms(),
                "usage_mb": current_usage
            })

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ (–º–∏–Ω–∏–º—É–º 10 —Ç–æ—á–µ–∫)
            if len(self.memory_history) < 10:
                return leaks

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
            recent_history = list(self.memory_history)[-10:]
            memory_values = [entry["usage_mb"] for entry in recent_history]

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞—Å—Ç—ë—Ç –ª–∏ –ø–∞–º—è—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
            increases = sum(1 for i in range(1, len(memory_values)) if memory_values[i] > memory_values[i-1])

            if increases >= 8:  # 8 –∏–∑ 9 –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç
                avg_growth = (memory_values[-1] - memory_values[0]) / len(memory_values)

                if avg_growth > 1.0:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 1MB –∑–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                    leaks.append({
                        "type": "sustained_growth",
                        "severity": "high",
                        "growth_rate_mb": round(avg_growth, 2),
                        "total_growth_mb": round(memory_values[-1] - memory_values[0], 2),
                        "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—ç—à–∏ –∏ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã"
                    })

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            try:
                total_objects = len(gc.get_objects())
                if total_objects > 100000:  # –ë–æ–ª–µ–µ 100k –æ–±—ä–µ–∫—Ç–æ–≤
                    leaks.append({
                        "type": "high_object_count",
                        "severity": "medium",
                        "object_count": total_objects,
                        "recommendation": "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"
                    })
            except Exception:
                pass

            return leaks

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏: {e}")
            return []

    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏"""
        try:
            memory_info = self.process.memory_info()

            return {
                "rss_mb": round(memory_info.rss / (1024 * 1024), 2),
                "vms_mb": round(memory_info.vms / (1024 * 1024), 2),
                "percent": round(self.process.memory_percent(), 2),
                "cleanup_history": {
                    "total_cleanups": self.cleanup_count,
                    "emergency_cleanups": self.emergency_cleanup_count,
                    "last_cleanup": self.last_cleanup_time
                }
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {}


# –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
__all__ = [
    'AdvancedMemoryManager',
    'CleanupResult',
]
