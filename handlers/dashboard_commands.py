#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard Commands - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—à–±–æ—Ä–¥–∞–º–∏
/market - –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä—ã–Ω–∫–∞
/dashboard - GIO Dashboard
/dashboard live - GIO Dashboard —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""

import re
import asyncio
from typing import Optional
from datetime import datetime, timedelta
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
from config.settings import logger, TRACKED_SYMBOLS


class DashboardCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–∞—à–±–æ—Ä–¥–æ–≤"""

    def __init__(self, bot: AsyncTeleBot, bot_instance):
        """
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä AsyncTeleBot
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot
        """
        self.telegram_bot = bot
        self.bot = bot_instance

        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GIODashboardHandler
        try:
            from handlers.dashboard_handler import GIODashboardHandler

            self.dashboard_handler = GIODashboardHandler(bot_instance)
            logger.info("‚úÖ GIODashboardHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å GIODashboardHandler: {e}")
            self.dashboard_handler = None

        self.register_handlers()
        logger.info("‚úÖ DashboardCommands –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # /market
        self.telegram_bot.register_message_handler(
            self.market_command, commands=["market"], pass_bot=True
        )
        logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /market")

        # ‚úÖ /dashboard (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π "live")
        if self.dashboard_handler:
            self.telegram_bot.register_message_handler(
                self.dashboard_command, commands=["dashboard"], pass_bot=True
            )
            logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /dashboard [live]")

            # ‚úÖ /gio
            self.telegram_bot.register_message_handler(
                self.gio_command, commands=["gio"], pass_bot=True
            )
            logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /gio")

    async def market_command(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
            /market - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è BTCUSDT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            /market ETHUSDT - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ETHUSDT
            /market eth - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ETHUSDT (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            symbol = self._extract_symbol(message.text)

            logger.info(
                f"üìä /market –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è {symbol} (user: {message.from_user.id})"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MarketDashboard
            if not hasattr(self.bot, "market_dashboard"):
                await self.telegram_bot.send_message(
                    message.chat.id,
                    "‚ùå Market Dashboard –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..." —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading_msg = await self.telegram_bot.send_message(
                message.chat.id, f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ dashboard –¥–ª—è {symbol}..."
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º dashboard
            try:
                dashboard_text = await self.bot.market_dashboard.generate_dashboard(
                    symbol
                )

                # –£–¥–∞–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º dashboard
                await self.telegram_bot.delete_message(
                    message.chat.id, loading_msg.message_id
                )

                await self.telegram_bot.send_message(
                    message.chat.id, dashboard_text, parse_mode="Markdown"
                )

                logger.info(
                    f"‚úÖ Dashboard –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (user: {message.from_user.id})"
                )

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dashboard –¥–ª—è {symbol}: {e}", exc_info=True
                )

                await self.telegram_bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dashboard –¥–ª—è {symbol}:\n{str(e)}",
                    message.chat.id,
                    loading_msg.message_id,
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /market: {e}", exc_info=True)
            await self.telegram_bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            )

    # ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: /dashboard [live]
    async def dashboard_command(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dashboard [live] [SYMBOL]

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
            /dashboard - –æ–±—ã—á–Ω—ã–π dashboard –¥–ª—è BTCUSDT
            /dashboard ETHUSDT - dashboard –¥–ª—è ETHUSDT
            /dashboard live - dashboard —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (60 –º–∏–Ω)
            /dashboard live ETHUSDT - live dashboard –¥–ª—è ETHUSDT
        """
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parts = message.text.split()
            is_live = len(parts) > 1 and parts[1].lower() == "live"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª
            if is_live and len(parts) > 2:
                symbol = self._normalize_symbol(parts[2])
            elif not is_live and len(parts) > 1:
                symbol = self._normalize_symbol(parts[1])
            else:
                symbol = "BTCUSDT"

            logger.info(
                f"üìä /dashboard {'live' if is_live else ''} {symbol} "
                f"(user: {message.from_user.id})"
            )

            if is_live:
                await self._dashboard_live(message, symbol)
            else:
                await self._dashboard_normal(message, symbol)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /dashboard: {e}", exc_info=True)
            await self.telegram_bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            )

    # ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: /gio
    async def gio_command(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gio [SYMBOL]

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
            /gio - GIO Dashboard –¥–ª—è BTCUSDT
            /gio ETHUSDT - GIO Dashboard –¥–ª—è ETHUSDT
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª
            parts = message.text.split()
            symbol = self._normalize_symbol(parts[1]) if len(parts) > 1 else "BTCUSDT"

            logger.info(f"üìä /gio {symbol} (user: {message.from_user.id})")

            await self._dashboard_normal(message, symbol)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /gio: {e}", exc_info=True)
            await self.telegram_bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            )

    async def _dashboard_normal(self, message: Message, symbol: str):
        """–û–±—ã—á–Ω—ã–π dashboard (–±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        if not self.dashboard_handler:
            await self.telegram_bot.send_message(
                message.chat.id, "‚ùå GIODashboardHandler –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            )
            return

        loading_msg = await self.telegram_bot.send_message(
            message.chat.id, f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ GIO Dashboard ({symbol})..."
        )

        try:
            dashboard_text = await self.dashboard_handler._build_dashboard(symbol)

            await self.telegram_bot.delete_message(
                message.chat.id, loading_msg.message_id
            )

            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –î–õ–Ø TELEBOT
            await self.telegram_bot.send_message(
                message.chat.id,
                dashboard_text,
                parse_mode="HTML",  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è telebot
                disable_web_page_preview=True,  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
            )

            logger.info(f"‚úÖ GIO Dashboard {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dashboard: {e}", exc_info=True)
            await self.telegram_bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                message.chat.id,
                loading_msg.message_id,
            )

    async def _dashboard_live(self, message: Message, symbol: str):
        """Dashboard —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (60 –º–∏–Ω—É—Ç)"""
        if not self.dashboard_handler:
            await self.telegram_bot.send_message(
                message.chat.id, "‚ùå GIODashboardHandler –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            )
            return

        loading_msg = await self.telegram_bot.send_message(
            message.chat.id, f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ GIO Dashboard Live ({symbol})..."
        )

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π dashboard
            dashboard_text = await self.dashboard_handler._build_dashboard(symbol)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            end_time = datetime.now() + timedelta(minutes=60)
            end_time_str = end_time.strftime("%H:%M")
            dashboard_text += f"\n\nüîÑ <i>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ | –ê–∫—Ç–∏–≤–Ω–æ –¥–æ {end_time_str}</i>"

            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –î–õ–Ø TELEBOT
            await self.telegram_bot.edit_message_text(
                dashboard_text,
                message.chat.id,
                loading_msg.message_id,
                parse_mode="HTML",  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
                disable_web_page_preview=True,  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
            )

            logger.info(
                f"‚úÖ Live dashboard {symbol} –∑–∞–ø—É—â–µ–Ω –¥–ª—è user {message.from_user.id}"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            asyncio.create_task(
                self._auto_update_dashboard(loading_msg, message.from_user.id, symbol)
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ live dashboard: {e}", exc_info=True)
            await self.telegram_bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                message.chat.id,
                loading_msg.message_id,
            )

    async def _auto_update_dashboard(self, message, user_id: int, symbol: str):
        """–§–æ–Ω–æ–≤–æ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
        try:
            logger.info(f"‚úÖ Starting auto-update for user {user_id}")

            end_time = datetime.now() + timedelta(minutes=60)
            update_count = 0

            while datetime.now() < end_time:
                await asyncio.sleep(60)  # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥

                try:
                    update_count += 1
                    time_left = int((end_time - datetime.now()).total_seconds() / 60)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π dashboard
                    dashboard_text = await self.dashboard_handler._build_dashboard(
                        symbol
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    dashboard_text += f"\n\nüîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ #{update_count} | –û—Å—Ç–∞–ª–æ—Å—å ~{time_left} –º–∏–Ω</i>"

                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –î–õ–Ø TELEBOT
                    await self.telegram_bot.edit_message_text(
                        dashboard_text,
                        message.chat.id,
                        message.message_id,
                        parse_mode="HTML",  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
                        disable_web_page_preview=True,  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
                    )

                    logger.info(
                        f"üîÑ Dashboard updated #{update_count} for user {user_id}"
                    )

                except Exception as e:
                    if "message is not modified" in str(e).lower():
                        logger.debug("Dashboard unchanged, skipping")
                        continue
                    else:
                        logger.error(f"Error updating dashboard: {e}")
                        break

        except Exception as e:
            logger.error(f"Auto-update task error: {e}")

        finally:
            logger.info(f"üõë Live dashboard stopped for user {user_id}")

    def _extract_symbol(self, text: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã

        Args:
            text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/market ETHUSDT" –∏–ª–∏ "/market eth")

        Returns:
            –°–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "BTCUSDT"
        """
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /market
        text = text.replace("/market", "").strip()

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º BTCUSDT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not text:
            return "BTCUSDT"

        return self._normalize_symbol(text)

    def _normalize_symbol(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∏–º–≤–æ–ª –∫ —Ñ–æ—Ä–º–∞—Ç—É XXXUSDT"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        symbol = text.upper()

        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ USDT –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not symbol.endswith("USDT"):
            symbol = f"{symbol}USDT"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        if symbol not in TRACKED_SYMBOLS:
            logger.warning(
                f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –≤ TRACKED_SYMBOLS, "
                f"–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)"
            )

        return symbol


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["DashboardCommands"]
