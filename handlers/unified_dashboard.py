#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Unified Dashboard Handler –¥–ª—è Telegram —Å LIVE AUTO-UPDATE
"""

import logging
import aiohttp
import sqlite3
import asyncio
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from core.scenario_interpreter import ScenarioInterpreter, get_scenario_emoji
from core.mm_scenarios_generator import MMScenariosGenerator

logger = logging.getLogger(__name__)


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


class UnifiedDashboardHandler:
    """Handler –¥–ª—è unified dashboard –∫–æ–º–∞–Ω–¥—ã —Å live updates"""

    def __init__(self, bot):
        self.bot = bot
        self.interpreter = ScenarioInterpreter()
        self.generator = MMScenariosGenerator()
        self.live_tasks = {}  # {chat_id: task}

    async def handle_dashboard(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /dashboard [live]"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = context.args or []
            is_live = "live" in args

            if is_live:
                await self._start_live_dashboard(update, context)
            else:
                await self._send_single_dashboard(update, context)

        except Exception as e:
            logger.error(f"Dashboard error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _send_single_dashboard(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–π dashboard (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)"""
        try:
            await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ dashboard...")

            dashboard_text = await self._build_dashboard_text()

            # ‚úÖ –£–ë–ò–†–ê–ï–ú parse_mode –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await update.message.reply_text(dashboard_text)

        except Exception as e:
            logger.error(f"Single dashboard error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _start_live_dashboard(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å LIVE dashboard —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        chat_id = update.effective_chat.id

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é live-—Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id in self.live_tasks:
            self.live_tasks[chat_id].cancel()
            logger.info(f"üõë Stopped previous live dashboard for chat {chat_id}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading_msg = await update.message.reply_text(
                "üìä –ó–∞–≥—Ä—É–∑–∫–∞ GIO Dashboard Live..."
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π dashboard
            dashboard_text = await self._build_dashboard_text()

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            end_time = datetime.now() + timedelta(minutes=60)
            end_time_str = end_time.strftime("%H:%M")
            dashboard_text += f"\n\nüîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ | –ê–∫—Ç–∏–≤–Ω–æ –¥–æ {end_time_str}"  # ‚úÖ –ë–ï–ó –ü–û–î–ß–Å–†–ö–ò–í–ê–ù–ò–ô!

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await loading_msg.edit_text(dashboard_text)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            task = asyncio.create_task(
                self._auto_update_loop(
                    chat_id=chat_id,
                    message_id=loading_msg.message_id,
                    end_time=end_time,
                    context=context,
                )
            )

            self.live_tasks[chat_id] = task

            logger.info(f"‚úÖ Live dashboard started for chat {chat_id}")

        except Exception as e:
            logger.error(f"Start live dashboard error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _auto_update_loop(
        self,
        chat_id: int,
        message_id: int,
        end_time: datetime,
        context: ContextTypes.DEFAULT_TYPE,
    ):
        """–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            update_count = 0

            while datetime.now() < end_time:
                await asyncio.sleep(60)  # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥

                try:
                    update_count += 1
                    time_left = int((end_time - datetime.now()).total_seconds() / 60)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π dashboard
                    dashboard_text = await self._build_dashboard_text()

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    dashboard_text += f"\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ #{update_count} | –û—Å—Ç–∞–ª–æ—Å—å ~{time_left} –º–∏–Ω"  # ‚úÖ –ë–ï–ó –ü–û–î–ß–Å–†–ö–ò–í–ê–ù–ò–ô!

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=dashboard_text,
                    )

                    logger.info(
                        f"üîÑ Dashboard updated #{update_count} for chat {chat_id}"
                    )

                except BadRequest as e:
                    if "message is not modified" in str(e).lower():
                        logger.debug("Dashboard unchanged, skipping update")
                        continue
                    else:
                        logger.error(f"Update error: {e}")
                        break

                except Exception as e:
                    logger.error(f"Update loop error: {e}")
                    break

        except asyncio.CancelledError:
            logger.info(f"üõë Live dashboard cancelled for chat {chat_id}")

        except Exception as e:
            logger.error(f"Auto-update loop error: {e}")

        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if chat_id in self.live_tasks:
                del self.live_tasks[chat_id]
            logger.info(f"üõë Live dashboard stopped for chat {chat_id}")

    async def _build_dashboard_text(self) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç dashboard"""
        try:
            # === 1. Market Overview ===
            market_text = await self._get_market_overview()

            # === 2. MM Scenario ===
            scenario_text = await self._get_mm_scenario()

            # === 3. HOT Pairs ===
            hot_pairs_text = await self._get_hot_pairs()

            # === 4. Active Signals ===
            signals_text = self._get_active_signals()

            # === 5. Signal Performance ===
            performance_text = self._get_signal_performance()

            # === –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
            full_message = f"""
{market_text}

{scenario_text}

{hot_pairs_text}

{signals_text}

{performance_text}
"""
            return full_message.strip()

        except Exception as e:
            logger.error(f"Build dashboard error: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è dashboard: {e}"

    async def _get_market_overview(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å Market Overview —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                url = "https://api.binance.com/api/v3/ticker/24hr"
                params = {"symbols": '["BTCUSDT","ETHUSDT"]'}

                async with session.get(url, params=params) as resp:
                    data = await resp.json()

                    btc = next(d for d in data if d["symbol"] == "BTCUSDT")
                    eth = next(d for d in data if d["symbol"] == "ETHUSDT")

                    btc_price = float(btc["lastPrice"])
                    btc_change = float(btc["priceChangePercent"])
                    eth_price = float(eth["lastPrice"])
                    eth_change = float(eth["priceChangePercent"])

                    total_vol = (
                        float(btc["quoteVolume"]) + float(eth["quoteVolume"])
                    ) / 1e9

                    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    btc_emoji = "üü¢" if btc_change >= 0 else "üî¥"
                    eth_emoji = "üü¢" if eth_change >= 0 else "üî¥"

                    return f"""üìä Market Overview  #
    ‚Ä¢ BTC: ${btc_price:,.0f} ({btc_emoji}{btc_change:+.1f}%)
    ‚Ä¢ ETH: ${eth_price:,.0f} ({eth_emoji}{eth_change:+.1f}%)
    ‚Ä¢ Total Vol: ${total_vol:.1f}B"""

        except Exception as e:
            logger.error(f"Market Overview error: {e}")
            return "‚ö†Ô∏è Market Overview –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    async def _get_mm_scenario(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å MM —Å—Ü–µ–Ω–∞—Ä–∏–π –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò"""
        try:
            # === –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó market_dashboard ===
            logger.info("üìä Fetching REAL market data from market_dashboard...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π market_dashboard –∏–∑ –±–æ—Ç–∞
            cvd_data = await self.bot.market_dashboard.get_volume_analysis("BTCUSDT")
            sentiment_data = await self.bot.market_dashboard.get_sentiment_pressure(
                "BTCUSDT"
            )

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò!
            cvd = cvd_data.get("cvd", 0)
            funding = sentiment_data.get(
                "funding_rate", 0
            )  # ‚Üê ‚úÖ –î–ï–°–Ø–¢–ò–ß–ù–ê–Ø –§–û–†–ú–ê (0.006755)
            ls_ratio = sentiment_data.get(
                "long_short_ratio", 1.0
            )  # ‚Üê ‚úÖ –ë–´–õ–û "ls_ratio", –î–û–õ–ñ–ù–û –ë–´–¢–¨ "long_short_ratio"!

            logger.info(
                f"‚úÖ REAL DATA FETCHED: CVD={cvd}, Funding={funding}, L/S={ls_ratio}"
            )

            # ‚úÖ –¢–ï–ü–ï–†–¨ –î–ê–ù–ù–´–ï –†–ï–ê–õ–¨–ù–´–ï!
            market_data = {
                "cvd": cvd,
                "funding": funding,  # ‚Üê ‚úÖ –î–ï–°–Ø–¢–ò–ß–ù–ê–Ø –§–û–†–ú–ê (0.006755)
                "ratio": ls_ratio,
                "liquidations": sentiment_data.get("liquidations", 5_000_000),
                "institutional": 12.5,
                "wyckoff_phase": "accumulation",
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
            scenario_data = self.generator.generate_scenario(market_data)

            if not scenario_data:
                return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            interpretation = self.interpreter.interpret(
                scenario_data["scenario"],
                scenario_data["phase"],
                scenario_data["metrics"],
            )

            emoji = get_scenario_emoji(scenario_data["scenario"])

            # ====================================================
            # ‚úÖ –§–û–†–ú–ê–¢–ò–†–£–ï–ú MM SCENARIO –° –ü–û–î–†–û–ë–ù–´–ú–ò –ü–û–Ø–°–ù–ï–ù–ò–Ø–ú–ò
            # ====================================================

            # –°–ª–æ–≤–∞—Ä—å –ø–æ—è—Å–Ω–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ MM
            mm_scenarios_info = {
                "accumulation": {
                    "emoji": "üü¢",
                    "title": "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ",
                    "short_desc": "MM —Å–æ–±–∏—Ä–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º",
                    "action": "‚è∏Ô∏è –û–∂–∏–¥–∞–π –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö –∏–ª–∏ Spring-—Ç–µ—Å—Ç–∞",
                },
                "distribution": {
                    "emoji": "üî¥",
                    "title": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                    "short_desc": "MM —Ä–∞—Å–ø—Ä–æ–¥–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤—ã—Å–æ–∫–∏–º —Ü–µ–Ω–∞–º",
                    "action": "üö® –ì–æ—Ç–æ–≤—å—Å—è –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É –≤–Ω–∏–∑",
                },
                "markup": {
                    "emoji": "üöÄ",
                    "title": "–†–∞–∑–º–µ—Ç–∫–∞ (–†–æ—Å—Ç)",
                    "short_desc": "MM —Ç–æ–ª–∫–∞—é—Ç —Ü–µ–Ω—É –≤–≤–µ—Ä—Ö",
                    "action": "üöÄ –î–µ—Ä–∂–∏ –ª–æ–Ω–≥–∏, —Å–ª–µ–¥–∏ –∑–∞ –æ–±—ä—ë–º–∞–º–∏",
                },
                "markdown": {
                    "emoji": "üìâ",
                    "title": "–†–∞–∑–º–µ—Ç–∫–∞ (–ü–∞–¥–µ–Ω–∏–µ)",
                    "short_desc": "MM –¥–∞–≤—è—Ç —Ü–µ–Ω—É –≤–Ω–∏–∑",
                    "action": "üìâ –ò–∑–±–µ–≥–∞–π –ª–æ–Ω–≥–æ–≤, –∂–¥–∏ –¥–Ω–∞",
                },
            }

            # –°–ª–æ–≤–∞—Ä—å —Ñ–∞–∑ Wyckoff
            wyckoff_phases_info = {
                "test": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                "spring": "–í—Å—Ç—Ä—è—Å–∫–∞ (Spring) ‚Äî –ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π",
                "sos": "–ü—Ä–∏–∑–Ω–∞–∫–∏ –°–∏–ª—ã (SOS)",
                "accumulation": "–§–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è",
                "distribution": "–§–∞–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            }

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            scenario_name = scenario_data["scenario"].lower()
            scenario_info = mm_scenarios_info.get(
                scenario_name, mm_scenarios_info["accumulation"]
            )
            phase_desc = wyckoff_phases_info.get(
                scenario_data["phase"].lower(), "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ñ–∞–∑–∞"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –° –ü–û–Ø–°–ù–ï–ù–ò–Ø–ú–ò
            message = (
                f"{emoji} MM Scenario: {scenario_data['scenario'].title()} ({scenario_info['title']})\n\n"
                f"üìå –ß—Ç–æ —ç—Ç–æ? {scenario_info['short_desc']}\n\n"
                f"üìç –§–∞–∑–∞ Wyckoff: {scenario_data['phase'].capitalize()}\n"
                f"‚îî‚îÄ {phase_desc}\n\n"
                f"üí¨ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n{interpretation}\n\n"
                f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {scenario_info['action']}\n\n"
                f"üìä Metrics:\n"
                f"‚Ä¢ CVD: {scenario_data['metrics']['cvd']}%\n"
                f"‚Ä¢ Funding: {scenario_data['metrics']['funding']*100:.2f}%\n"
                f"‚Ä¢ L/S Ratio: {scenario_data['metrics']['ratio']}\n"
            )

            # === –î–û–ë–ê–í–õ–Ø–ï–ú AI INTERPRETATION –û–¢ GEMINI ===
            logger.info("ü§ñ Starting Gemini AI interpretation...")

            try:
                from ai.gemini_interpreter import GeminiInterpreter
                from config.settings import GEMINI_API_KEY

                gemini = GeminiInterpreter(api_key=GEMINI_API_KEY)

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–ï–†–ï–î–ê–Å–ú –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò!
                dashboard_data = {
                    "scenario": scenario_data["scenario"],  # ‚Üê ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
                    "symbol": "BTCUSDT",  # ‚Üê ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
                    "cvd": scenario_data["metrics"]["cvd"],
                    "funding_rate": scenario_data["metrics"][
                        "funding"
                    ],  # ‚Üê ‚úÖ –î–ï–°–Ø–¢–ò–ß–ù–ê–Ø –§–û–†–ú–ê (0.006755)
                    "ls_ratio": scenario_data["metrics"]["ratio"],
                    "open_interest": 0,  # ‚Üê ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
                    "orderbook_pressure": 0,  # ‚Üê ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
                    "whale_activity": [],  # ‚Üê ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
                }

                # ‚úÖ DEBUG: –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ü–ï–†–ï–î–ê–ù–û
                logger.debug(f"üîç dashboard_data –¥–ª—è Gemini: {dashboard_data}")

                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î –° await
                ai_text = await gemini.interpret_metrics(dashboard_data)

                # ====================================================
                # ‚úÖ –§–û–†–ú–ê–¢–ò–†–£–ï–ú AI INTERPRETATION –° –ü–û–Ø–°–ù–ï–ù–ò–Ø–ú–ò
                # ====================================================

                # CVD –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                cvd = scenario_data["metrics"]["cvd"]
                if cvd < -20:
                    cvd_emoji = "üî¥"
                    cvd_text = "–°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                    cvd_explanation = "–ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
                elif cvd > 20:
                    cvd_emoji = "üü¢"
                    cvd_text = "–°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
                    cvd_explanation = "–ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                else:
                    cvd_emoji = "‚ö™"
                    cvd_text = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"
                    cvd_explanation = "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã"

                # Funding –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                funding = scenario_data["metrics"]["funding"]
                if funding > 0.01:
                    funding_emoji = "üü¢"
                    funding_text = "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π Funding"
                    funding_explanation = "–õ–æ–Ω–≥–∏ –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∞–º ‚Üí –º–Ω–æ–≥–æ –ª–æ–Ω–≥–æ–≤"
                elif funding < -0.01:
                    funding_emoji = "üî¥"
                    funding_text = "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π Funding"
                    funding_explanation = "–®–æ—Ä—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∞–º ‚Üí –º–Ω–æ–≥–æ —à–æ—Ä—Ç–æ–≤"
                else:
                    funding_emoji = "‚ö™"
                    funding_text = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π Funding"
                    funding_explanation = "–†—ã–Ω–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω"

                # L/S Ratio
                ls_ratio = scenario_data["metrics"]["ratio"]
                if ls_ratio > 1:
                    ls_emoji = "üü¢"
                    ls_text = "–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ª–æ–Ω–≥–∏"
                else:
                    ls_emoji = "üî¥"
                    ls_text = "–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —à–æ—Ä—Ç—ã"

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                if cvd < -20 and funding > 0:
                    recommendation = """‚ö†Ô∏è –ü–†–û–¢–ò–í–û–†–ï–ß–ò–í–´–ï –°–ò–ì–ù–ê–õ–´:
                CVD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏, –Ω–æ Funding –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π.
                üí° –î–µ–π—Å—Ç–≤–∏–µ: ‚è∏Ô∏è –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º."""
                elif cvd > 20 and funding > 0:
                    recommendation = """‚úÖ –ë–´–ß–¨–ò –°–ò–ì–ù–ê–õ–´:
                CVD —Ä–∞—Å—Ç—ë—Ç + Funding –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π.
                üí° –î–µ–π—Å—Ç–≤–∏–µ: üöÄ –†–∞—Å—Å–º–æ—Ç—Ä–∏ –ª–æ–Ω–≥-–ø–æ–∑–∏—Ü–∏–∏."""
                else:
                    recommendation = """‚è∏Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–û–°–¢–¨:
                –°–∏–≥–Ω–∞–ª—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ.
                üí° –î–µ–π—Å—Ç–≤–∏–µ: –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞."""

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –° –ü–û–Ø–°–ù–ï–ù–ò–Ø–ú–ò
                message += (
                    f"\n\n AI INTERPRETATION\n"
                    f"{'‚îÅ' * 30}\n\n"
                    f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n\n"
                    f"CVD: {cvd_emoji} {cvd:+.1f}% ‚Äî {cvd_text}\n"
                    f"‚îî‚îÄ {cvd_explanation}\n\n"
                    f"Funding Rate: {funding_emoji} {funding*100:+.2f}% ‚Äî {funding_text}\n"
                    f"‚îî‚îÄ {funding_explanation}\n\n"
                    f"L/S Ratio: {ls_emoji} {ls_ratio:.2f} ‚Äî {ls_text}\n\n"
                    f"{recommendation}\n\n"
                    f"{'‚îÅ' * 30}\n\n"
                    f"AI ANALYSIS:\n{ai_text}\n"
                    f"{'‚îÅ' * 30}\n"
                )

                logger.info("‚úÖ AI Interpretation added successfully")

            except Exception as e:
                logger.error(f"‚ùå Gemini AI error: {e}", exc_info=True)
                message += f"\n\n‚ö†Ô∏è AI Interpretation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"

            return message

        except Exception as e:
            logger.error(f"‚ùå MM Scenario error: {e}", exc_info=True)
            return f"‚ö†Ô∏è MM Scenario: {e}"

    async def _get_hot_pairs(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¢–û–ü-3 –ø–∞—Ä—ã –ø–æ –æ–±—ä—ë–º—É"""
        try:
            async with aiohttp.ClientSession() as session:
                url = "https://api.binance.com/api/v3/ticker/24hr"

                async with session.get(url) as resp:
                    data = await resp.json()

                    # –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã
                    usdt_pairs = [d for d in data if d["symbol"].endswith("USDT")]

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä—ë–º—É
                    top_pairs = sorted(
                        usdt_pairs, key=lambda x: float(x["quoteVolume"]), reverse=True
                    )[:3]

                    message = "üî• HOT Pairs\n"
                    for pair in top_pairs:
                        symbol = pair["symbol"]
                        volume = float(pair["quoteVolume"]) / 1e9
                        message += f"‚Ä¢ {symbol} - Vol: ${volume:.1f}B\n"

                    return message.strip()

        except Exception as e:
            logger.error(f"HOT Pairs error: {e}")
            return "‚ö†Ô∏è HOT Pairs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    def _get_active_signals(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect("gio.db")
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT symbol, direction, entry_price, tp1
                FROM signals
                WHERE status = 'active'
                ORDER BY created_at DESC
                LIMIT 3
            """
            )

            signals = cursor.fetchall()
            conn.close()

            if not signals:
                return "üìà Active Signals\n‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"

            message = "üìà Active Signals\n"
            for symbol, direction, entry, tp in signals:
                message += f"‚Ä¢ {symbol} {direction.upper()} - Entry: {entry:.0f} | TP: {tp:.0f}\n"

            return message.strip()

        except Exception as e:
            logger.error(f"Active Signals error: {e}")
            return "‚ö†Ô∏è Active Signals –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    def _get_signal_performance(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            conn = sqlite3.connect("gio.db")
            cursor = conn.cursor()

            # Win Rate
            cursor.execute(
                """
                SELECT
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'closed_profit' THEN 1 ELSE 0 END) as wins
                FROM signals
                WHERE status IN ('closed_profit', 'closed_loss')
            """
            )

            total, wins = cursor.fetchone()
            win_rate = (wins / total * 100) if total > 0 else 0

            # Avg ROI
            cursor.execute(
                """
                SELECT AVG(roi) FROM signals WHERE status = 'closed_profit'
            """
            )

            avg_roi = cursor.fetchone()[0] or 0
            conn.close()

            return f"""üìâ Signal Performance
    ‚Ä¢ Win Rate: {win_rate:.0f}%
    ‚Ä¢ Total Signals: {total}
    ‚Ä¢ Avg ROI: {avg_roi:+.1f}%"""

        except Exception as e:
            logger.error(f"Performance error: {e}")
            return "‚ö†Ô∏è Performance –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
