#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Market Analysis Handler –¥–ª—è GIO Bot
–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

import sqlite3
import logging
from typing import Dict, Optional
from handlers.support_resistance_detector import AdvancedSupportResistanceDetector
from config.settings import DATA_DIR

logger = logging.getLogger(__name__)


class MarketAnalysisHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""

    def __init__(self, db_path: str = None):
        self.db_path = db_path or f"{DATA_DIR}/gio.db"

        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        self.sr_detector = AdvancedSupportResistanceDetector(
            atr_multiplier=0.5,
            volume_threshold=1.5
        )

        logger.info("‚úÖ MarketAnalysisHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def analyze_symbol(self, symbol: str) -> Dict:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)

        Returns:
            Dict —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {symbol}")

            # 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self._get_market_data(symbol)

            if not market_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

            # 2. –§–æ—Ä–º–∏—Ä—É–µ–º features –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            features_dict = self._prepare_features(symbol, market_data)

            # 3. –†–∞—Å—á—ë—Ç Volume Profile
            volume_profile = self._calculate_volume_profile(symbol)
            features_dict.update(volume_profile)

            # 4. ‚úÖ SUPPORT/RESISTANCE DETECTION
            sr_levels = self.sr_detector.detect_support_resistance(features_dict)
            features_dict['sr_levels'] = sr_levels

            logger.info(f"‚úÖ SR Levels –¥–ª—è {symbol}: {sr_levels.get('summary', 'N/A')}")

            return features_dict

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", exc_info=True)
            return {"error": str(e)}

    def _get_market_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            query = """
            SELECT price, volume, high, low, atr
            FROM market_data
            WHERE symbol = ?
            ORDER BY timestamp DESC
            LIMIT 1
            """
            cursor.execute(query, (symbol,))
            row = cursor.fetchone()
            conn.close()

            if not row:
                return None

            return {
                "price": row[0],
                "volume": row[1],
                "high": row[2],
                "low": row[3],
                "atr": row[4]
            }
        except Exception as e:
            logger.error(f"DB error: {e}")
            return None

    def _prepare_features(self, symbol: str, market_data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ features –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        features = market_data.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        features['symbol'] = symbol
        features['order_book_bids'] = 0  # –ó–∞–≥–ª—É—à–∫–∞
        features['order_book_asks'] = 0  # –ó–∞–≥–ª—É—à–∫–∞
        features['cvd_slope'] = 0  # –ó–∞–≥–ª—É—à–∫–∞
        features['cvd_value'] = 0  # –ó–∞–≥–ª—É—à–∫–∞

        return features

    def _calculate_volume_profile(self, symbol: str) -> Dict:
        """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π Volume Profile –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–≤–µ—á–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            query = """
            SELECT price, volume FROM market_data
            WHERE symbol = ?
            ORDER BY timestamp DESC
            LIMIT 100
            """
            cursor.execute(query, (symbol,))
            rows = cursor.fetchall()
            conn.close()

            if not rows or len(rows) < 10:
                logger.warning(f"Volume Profile: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return {"poc": 0, "vah": 0, "val": 0}

            prices = [row[0] for row in rows if row[0] > 0]
            volumes = [row[1] for row in rows if row[1] > 0]

            if not prices or not volumes:
                return {"poc": 0, "vah": 0, "val": 0}

            # POC = —Ü–µ–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä—ë–º–æ–º
            max_vol_idx = volumes.index(max(volumes))
            poc = prices[max_vol_idx]

            # VAH/VAL = —Ç–æ–ø 30% –∏ –Ω–∏–∑ 30% –ø–æ –æ–±—ä—ë–º—É
            sorted_data = sorted(zip(prices, volumes), key=lambda x: x[1], reverse=True)
            top_30_count = max(1, len(sorted_data) // 3)
            top_30 = sorted_data[:top_30_count]

            if top_30:
                vah = max([p for p, v in top_30])
                val = min([p for p, v in top_30])
            else:
                vah = max(prices)
                val = min(prices)

            logger.info(f"Volume Profile –¥–ª—è {symbol}: POC={poc:.2f}, VAH={vah:.2f}, VAL={val:.2f}")
            return {"poc": poc, "vah": vah, "val": val}

        except Exception as e:
            logger.error(f"Volume Profile calculation error: {e}", exc_info=True)
            return {"poc": 0, "vah": 0, "val": 0}


# ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    handler = MarketAnalysisHandler()
    result = handler.analyze_symbol("BTCUSDT")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
