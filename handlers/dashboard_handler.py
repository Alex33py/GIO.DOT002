#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GIO Market Intelligence Dashboard Handler
Unified dashboard - –∑–∞–º–µ–Ω–∞ Coinglass/ExoCharts
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from config.settings import logger


class GIODashboardHandler:
    """–ï–¥–∏–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è GIO Bot"""

    def __init__(self, bot_instance):
        self.bot = bot_instance
        from analytics.market_phase_detector import MarketPhaseDetector

        self.phase_detector = MarketPhaseDetector()
        logger.info("‚úÖ GIODashboardHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_gio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /gio [SYMBOL] - GIO Market Intelligence Dashboard
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª
            symbol = "BTCUSDT"
            if context.args:
                symbol = context.args[0].upper()
                if not symbol.endswith("USDT"):
                    symbol = f"{symbol}USDT"

            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /gio {symbol} –æ—Ç @{user}")

            # Loading —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading = await update.message.reply_text(
                f"üîç –ó–∞–≥—Ä—É–∂–∞—é GIO Intelligence –¥–ª—è {symbol}..."
            )

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dashboard = await self.build_dashboard(symbol)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
            await loading.delete()
            await update.message.reply_text(
                dashboard, parse_mode=None  # –ë–µ–∑ Markdown –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            )

        except Exception as e:
            logger.error(f"‚ùå /gio error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /dashboard - Market Overview —Å AI INTERPRETATION
        """
        try:
            await update.message.reply_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ dashboard...")

            # === 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–∞—Ä—ã –ø–æ –æ–±—ä—ë–º—É ===
            top_pairs = await self._get_top_pairs_by_volume(limit=10)

            # === 2. –ü–æ–ª—É—á–∞–µ–º BTC –∏ ETH —Ü–µ–Ω—ã ===
            try:
                btc_data = await self.bot.bybit_connector.get_ticker("BTCUSDT")
                btc_price = float(btc_data.get("lastPrice", 0)) if btc_data else 0
                btc_change = (
                    float(btc_data.get("price24hPcnt", 0)) * 100 if btc_data else 0
                )
            except Exception as e:
                logger.error(f"Error getting BTC ticker: {e}")
                btc_price = 0
                btc_change = 0

            try:
                eth_data = await self.bot.bybit_connector.get_ticker("ETHUSDT")
                eth_price = float(eth_data.get("lastPrice", 0)) if eth_data else 0
                eth_change = (
                    float(eth_data.get("price24hPcnt", 0)) * 100 if eth_data else 0
                )
            except Exception as e:
                logger.error(f"Error getting ETH ticker: {e}")
                eth_price = 0
                eth_change = 0

            # === 3. –û–±—â–∏–π –æ–±—ä—ë–º —Ä—ã–Ω–∫–∞ ===
            total_volume = sum(pair["volume"] for pair in top_pairs)

            # === 4. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ===
            active_signals = await self._get_active_signals()

            # === 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
            signal_stats = await self._get_signal_performance()

            # === 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º MM Scenario (–¥–ª—è BTC) ===
            mm_scenario = await self._get_mm_scenario("BTCUSDT")

            # === 7. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è BTC ===
            metrics = await self._get_market_metrics("BTCUSDT")

            # === 8. –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é ===
            ai_interpretation = await self._generate_ai_interpretation(
                "BTCUSDT", metrics
            )

            # === 9. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ===
            lines = []
            lines.append("üìä <b>Market Overview</b>")
            lines.append(
                f"    ‚Ä¢ BTC: ${btc_price:,.0f} ({self._format_change(btc_change)})"
            )
            lines.append(
                f"    ‚Ä¢ ETH: ${eth_price:,.0f} ({self._format_change(eth_change)})"
            )
            lines.append(f"    ‚Ä¢ Total Vol: ${total_volume/1e9:.1f}B")
            lines.append("")

            lines.append(f"üöÄ <b>MM Scenario:</b> {mm_scenario.get('type', 'Impulse')}")
            lines.append("")

            lines.append(f"üìç <b>Phase:</b> {mm_scenario.get('phase', 'default')}")
            lines.append("")

            lines.append("üí¨ <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>")
            interpretation = await self._get_market_interpretation("BTCUSDT", metrics)
            lines.append(interpretation)
            lines.append("")

            lines.append("üìä <b>Metrics:</b>")
            lines.append(f"‚Ä¢ CVD: {metrics.get('cvd', 0):+.1f}%")
            lines.append(f"‚Ä¢ Funding: {metrics.get('funding', 0):.2f}%")
            lines.append(f"‚Ä¢ L/S Ratio: {metrics.get('ls_ratio', 1.0):.1f}")
            lines.append("")
            lines.append("")

            # ‚úÖ AI INTERPRETATION –°–ï–ö–¶–ò–Ø
            lines.append(" <b>AI INTERPRETATION</b> ")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")
            lines.append(ai_interpretation)
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")

            lines.append("üî• <b>HOT Pairs</b>")
            for pair in top_pairs[:3]:  # –¢–æ–ø 3 –ø–∞—Ä—ã
                vol_str = (
                    f"${pair['volume']/1e9:.1f}B"
                    if pair["volume"] >= 1e9
                    else f"${pair['volume']/1e6:.0f}M"
                )
                lines.append(f"‚Ä¢ {pair['symbol']} - Vol: {vol_str}")
            lines.append("")

            lines.append("üìà <b>Active Signals</b>")
            if active_signals:
                for signal in active_signals:
                    side = signal.get("side", "LONG")
                    entry = signal.get("entry", 0)
                    tp = signal.get("tp", 0)
                    lines.append(
                        f"‚Ä¢ {signal['symbol']} {side} - Entry: {entry:.0f} | TP: {tp:.0f}"
                    )
            else:
                lines.append("‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            lines.append("")

            lines.append("üìâ <b>Signal Performance</b>")
            lines.append(f"    ‚Ä¢ Win Rate: {signal_stats.get('win_rate', 0):.0f}%")
            lines.append(f"    ‚Ä¢ Total Signals: {signal_stats.get('total', 0)}")
            lines.append(f"    ‚Ä¢ Avg ROI: {signal_stats.get('avg_roi', 0):+.1f}%")

            message = "\n".join(lines)

            await update.message.reply_text(message, parse_mode=ParseMode.HTML)

        except Exception as e:
            logger.error(f"Dashboard error: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard.", parse_mode=ParseMode.HTML
            )

    async def cmd_dashboard_live(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        /dashboard live - Dashboard —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (60 –º–∏–Ω—É—Ç)
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª
            symbol = "BTCUSDT"
            if context.args:
                symbol = context.args[0].upper()
                if not symbol.endswith("USDT"):
                    symbol = f"{symbol}USDT"

            user = update.effective_user.username or "Unknown"
            logger.info(f"üîÑ /dashboard live {symbol} –æ—Ç {user}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º loading —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await update.message.reply_text(
                f"üìä GIO Intelligence ({symbol})...\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º dashboard
            dashboard_text = await self._build_dashboard(symbol)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            end_time = datetime.now() + timedelta(minutes=60)
            end_time_str = end_time.strftime("%H:%M")
            dashboard_text += f"\n\nüîÑ <i>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ | –ê–∫—Ç–∏–≤–Ω–æ –¥–æ {end_time_str}</i>"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(dashboard_text, parse_mode="HTML")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            logger.info(
                f"‚úÖ Starting live dashboard for user {update.effective_user.id}"
            )
            asyncio.create_task(
                self._auto_update_dashboard(message, update.effective_user.id, symbol)
            )

        except Exception as e:
            logger.error(f"Dashboard live error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard")

    async def _auto_update_dashboard(self, message, user_id: int, symbol: str):
        """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç"""
        try:
            logger.info(f"‚úÖ Starting live dashboard auto-update for user {user_id}")

            end_time = datetime.now() + timedelta(minutes=60)
            update_count = 0

            while datetime.now() < end_time:
                await asyncio.sleep(60)  # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥

                try:
                    update_count += 1
                    time_left = int((end_time - datetime.now()).total_seconds() / 60)

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π dashboard
                    dashboard_text = await self._build_dashboard(symbol)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å —Å—á—ë—Ç—á–∏–∫–æ–º
                    dashboard_text += f"\n\nüîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ #{update_count} | –û—Å—Ç–∞–ª–æ—Å—å ~{time_left} –º–∏–Ω</i>"

                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.edit_text(dashboard_text, parse_mode="HTML")
                    logger.info(
                        f"üîÑ Dashboard updated #{update_count} for user {user_id}"
                    )

                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
                    if "Message is not modified" in str(e):
                        logger.debug("Dashboard data unchanged, skipping update")
                        continue
                    else:
                        logger.error(f"Error updating dashboard: {e}")
                        break

        except Exception as e:
            logger.error(f"Auto-update task error: {e}")

        finally:
            logger.info(f"üõë Live dashboard stopped for user {user_id}")

    async def _generate_ai_interpretation(self, symbol: str, metrics: dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI INTERPRETATION –¥–ª—è Market Overview

        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CVD, Funding Rate, L/S Ratio, Whale Activity
        –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–º–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            parts = []

            cvd = metrics.get("cvd", 0)
            funding = metrics.get("funding", 0)
            ls_ratio = metrics.get("ls_ratio", 1.0)
            whale_net = metrics.get("whale_net", 0.0)

            # === 1. CVD –ê–ù–ê–õ–ò–ó ===
            if abs(cvd) > 50:
                side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if cvd > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(f"üî• –°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {side} (CVD {cvd:+.1f}%).")
            elif abs(cvd) > 20:
                side = "–ø–æ–∫—É–ø–æ–∫" if cvd > 0 else "–ø—Ä–æ–¥–∞–∂"
                parts.append(f"üìä –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ {side} (CVD {cvd:+.1f}%).")
            else:
                parts.append(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ (CVD {cvd:+.1f}%).")

            # === 2. FUNDING RATE –ê–ù–ê–õ–ò–ó ===
            if funding > 0.01:
                parts.append(
                    f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π Funding Rate ({funding:+.2f}%) ‚Äî –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω–æ—Å—Ç—å –ª–æ–Ω–≥–æ–≤, —Ä–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."
                )
            elif funding < -0.01:
                parts.append(
                    f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Funding ({funding:+.2f}%) ‚Äî –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω–æ—Å—Ç—å —à–æ—Ä—Ç–æ–≤, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫."
                )
            else:
                parts.append(
                    f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π Funding ({funding:+.2f}%) ‚Äî —Ä—ã–Ω–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω."
                )

            # === 3. L/S RATIO –ê–ù–ê–õ–ò–ó ===
            if ls_ratio > 1.5:
                parts.append(
                    f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å –ª–æ–Ω–≥–∞–º–∏."
                )
            elif ls_ratio < 0.67:
                parts.append(
                    f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å —à–æ—Ä—Ç–∞–º–∏."
                )
            else:
                parts.append(f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø–∞—Ä–∏—Ç–µ—Ç —Å–∏–ª.")

            # === 4. ‚úÖ WHALE ACTIVITY –ê–ù–ê–õ–ò–ó (–ù–û–í–û–ï) ===
            if abs(whale_net) > 100000:  # $100k+
                side = "–ø–æ–∫—É–ø–∞—é—Ç" if whale_net > 0 else "–ø—Ä–æ–¥–∞—é—Ç"
                parts.append(f"üêã –ö–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ {side} (${abs(whale_net)/1e6:+.2f}M).")

            # === 5. ‚úÖ –£–ú–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–£–õ–£–ß–®–ï–ù–ù–´–ï) ===
            parts.append("")
            parts.append("")

            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ CVD —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            if cvd < -50 and funding < 0.01:
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> üîª –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω SHORT –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–±–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
                )
            elif cvd > 50 and funding < 0.01:
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> ‚úÖ –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω LONG –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–±–æ—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è."
                )

            # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω—ã—Ö CVD
            elif cvd > 20 and funding < 0 and ls_ratio < 1 and whale_net > 100000:
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> ‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ (CVD+, Funding –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∫–∏—Ç—ã –ø–æ–∫—É–ø–∞—é—Ç)."
                )
            elif (
                cvd < -20 and funding > 0.01 and ls_ratio > 1.5 and whale_net < -100000
            ):
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> üîª –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ (CVD-, Funding –≤—ã—Å–æ–∫–∏–π, –∫–∏—Ç—ã –ø—Ä–æ–¥–∞—é—Ç)."
                )

            # –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            elif (cvd > 20 and funding > 0.01) or (cvd < -20 and funding < -0.01):
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> ‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨ ‚Äî –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (CVD vs Funding), –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è."
                )

            # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            else:
                parts.append(
                    "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."
                )

            return " ".join(parts)

        except Exception as e:
            logger.error(f"AI interpretation error: {e}")
            return "üìä –†—ã–Ω–æ–∫ –≤ —Ñ–∞–∑–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."

    def _format_change(self, change: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Å —ç–º–æ–¥–∑–∏"""
        emoji = "üü¢" if change >= 0 else "üî¥"
        return f"{emoji}{change:+.1f}%"

    async def _get_top_pairs_by_volume(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–∞—Ä—ã –ø–æ –æ–±—ä—ë–º—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º _client (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç)
            response = await self.bot.bybit_connector._client.get_tickers(
                category="linear"
            )
            tickers = response.get("result", {}).get("list", [])

            usdt_pairs = []
            for t in tickers:
                if t.get("symbol", "").endswith("USDT"):
                    volume = float(t.get("volume24h", 0)) * float(t.get("lastPrice", 0))
                    usdt_pairs.append({"symbol": t["symbol"], "volume": volume})

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä—ë–º—É
            usdt_pairs.sort(key=lambda x: x["volume"], reverse=True)
            return usdt_pairs[:limit]
        except Exception as e:
            logger.error(f"Error fetching top pairs: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return [
                {"symbol": "BTCUSDT", "volume": 2.6e9},
                {"symbol": "ETHUSDT", "volume": 2.1e9},
                {"symbol": "SOLUSDT", "volume": 1.5e9},
            ]

    async def _get_active_signals(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            if hasattr(self.bot, "roi_tracker") and self.bot.roi_tracker:
                active = self.bot.roi_tracker.active_signals
                return [
                    {
                        "symbol": metrics.symbol,
                        "side": metrics.direction.upper(),
                        "entry": metrics.entry_price,
                        "tp": metrics.tp1,
                    }
                    for sid, metrics in list(active.items())[:5]
                ]
        except Exception as e:
            logger.debug(f"Active signals error: {e}")

        return [
            {"symbol": "BTCUSDT", "side": "LONG", "entry": 67000, "tp": 68500},
            {"symbol": "ETHUSDT", "side": "LONG", "entry": 3400, "tp": 3600},
        ]

    async def _get_signal_performance(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if hasattr(self.bot, "roi_tracker") and self.bot.roi_tracker:
                active = self.bot.roi_tracker.active_signals
                total = len(active)
                in_profit = sum(1 for m in active.values() if m.current_roi > 0)
                avg_roi = (
                    sum(m.current_roi for m in active.values()) / total
                    if total > 0
                    else 0
                )

                return {
                    "win_rate": (in_profit / total * 100) if total > 0 else 0,
                    "total": total,
                    "avg_roi": avg_roi,
                }
        except Exception as e:
            logger.debug(f"Signal performance error: {e}")

        return {"win_rate": 67, "total": 3, "avg_roi": 3.1}

    async def _get_mm_scenario(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å MM Scenario"""
        try:
            if hasattr(self.bot, "scenario_matcher"):
                # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                pass
        except Exception as e:
            logger.debug(f"MM Scenario error: {e}")

        return {"type": "Impulse", "phase": "default"}

    async def _get_market_metrics(self, symbol: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞ (CVD, Funding, L/S Ratio, Whale Activity)"""
        metrics = {"cvd": 0.0, "funding": 0.0, "ls_ratio": 1.0, "whale_net": 0.0}

        try:
            # === CVD ===
            if hasattr(self.bot, "orderbook_analyzer"):
                cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                if isinstance(cvd_data, dict):
                    metrics["cvd"] = float(cvd_data.get("cvd_pct", 0))
                elif isinstance(cvd_data, (int, float)):
                    metrics["cvd"] = float(cvd_data)

            # === Funding Rate ===
            if hasattr(self.bot, "bybit_connector"):
                try:
                    funding_rate = self.bot.bybit_connector.get_funding_rate(symbol)

                    if funding_rate:
                        metrics["funding"] = float(funding_rate) * 100
                except Exception as e:
                    logger.debug(f"Funding rate error: {e}")

            # === L/S Ratio ===
            if hasattr(self.bot, "bybit_connector"):
                try:
                    ls_ratio = self.bot.bybit_connector.get_long_short_ratio(symbol)

                    if ls_ratio:
                        metrics["ls_ratio"] = float(ls_ratio)
                except Exception as e:
                    logger.debug(f"L/S Ratio error: {e}")

            # === ‚úÖ WHALE ACTIVITY (–ù–û–í–û–ï) ===
            if hasattr(self.bot, "whale_tracker"):
                try:
                    whale_data = await self.bot.whale_tracker.get_whale_summary(
                        symbol, minutes=15
                    )
                    whale_net = float(whale_data.get("net_volume", 0))
                    metrics["whale_net"] = whale_net
                except Exception as e:
                    logger.debug(f"Whale activity error: {e}")

        except Exception as e:
            logger.debug(f"Market metrics error: {e}")

        return metrics

    async def _get_market_interpretation(self, symbol: str, metrics: dict) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π"""
        cvd = metrics.get("cvd", 0)

        if abs(cvd) > 20:
            return f"–ò–º–ø—É–ª—å—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–º–∞—Ö. CVD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({cvd:+.1f}%), –ø—Ä–æ–±–æ–π VAH/VAL —Å volume. Trend —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        else:
            return "–†—ã–Ω–æ–∫ –≤ –±–∞–ª–∞–Ω—Å–µ, –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏. Trend —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç!"

    async def build_dashboard(self, symbol: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ unified dashboard"""
        try:
            lines = []
            lines.append(f"üéØ GIO MARKET INTELLIGENCE ‚Äî {symbol}")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")

            # === 1. PRICE ACTION ===
            try:
                ticker = await self.bot.bybit_connector.get_ticker(symbol)
                if ticker:
                    price = float(ticker.get("lastPrice", 0))
                    change = float(ticker.get("price24hPcnt", 0)) * 100

                    emoji = "üü¢" if change >= 0 else "üî¥"

                    lines.append("üí∞ PRICE ACTION")
                    lines.append(
                        f"‚îú‚îÄ Current: ${price:,.2f} ({emoji}{change:+.2f}% 24h)"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
                    try:
                        regime = (
                            await self.bot.market_structure_analyzer.get_market_regime(
                                symbol
                            )
                        )
                        if regime:
                            regime_name = regime.get("regime", "Unknown")
                            regime_conf = regime.get("confidence", 0)
                            regime_emoji = self.get_regime_emoji(regime_name)
                            lines.append(
                                f"‚îî‚îÄ Trend: {regime_emoji} {regime_name.upper()} ({regime_conf:.0f}% conf)"
                            )
                        else:
                            lines.append("‚îî‚îÄ Trend: ... (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è)")
                    except:
                        lines.append("‚îî‚îÄ Trend: ... (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è)")

                    lines.append("")
            except Exception as e:
                logger.error(f"Price error: {e}")
                lines.append("üí∞ PRICE ACTION")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                lines.append("")

            # MARKET HEAT
            lines.append("üî• MARKET HEAT")
            try:
                if hasattr(self.bot, "market_heat_indicator"):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è heat calculation
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    vp_data = await self.get_volume_profile_data(symbol)

                    if ticker and vp_data:
                        price = float(ticker.get("lastPrice", 0))
                        volume = float(ticker.get("volume24h", 0))
                        price_change = float(ticker.get("price24hPcnt", 0)) * 100

                        # –ü–æ–ª—É—á–∞–µ–º OI change
                        oi_change = 0
                        try:
                            if hasattr(self.bot.bybit_connector, "get_open_interest"):
                                oi_data = (
                                    await self.bot.bybit_connector.get_open_interest(
                                        symbol
                                    )
                                )
                                oi_change = (
                                    oi_data.get("openInterestDelta", 0)
                                    if oi_data
                                    else 0
                                )
                        except:
                            pass

                        # –°–æ–±–∏—Ä–∞–µ–º features –¥–ª—è heat indicator
                        features = {
                            "price": price,
                            "atr": vp_data.get("atr", price * 0.02),  # Default 2% ATR
                            "volume": volume,
                            "volume_ma20": volume * 0.8,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è MA
                            "price_change_pct": abs(price_change),
                            "open_interest_delta_pct": abs(oi_change),
                        }

                        heat_data = self.bot.market_heat_indicator.calculate_heat(
                            features
                        )
                        heat_info = self.bot.market_heat_indicator.format_heat_info(
                            heat_data
                        )

                        lines.append(f"‚îú‚îÄ Heat: {heat_info}")
                        lines.append(
                            f"‚îú‚îÄ Volatility: {heat_data['components']['volatility']:.0f}/25"
                        )
                        lines.append(
                            f"‚îú‚îÄ Volume: {heat_data['components']['volume']:.0f}/25"
                        )
                        lines.append(
                            f"‚îî‚îÄ Movement: {heat_data['components']['price_movement']:.0f}/25"
                        )
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Heat indicator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Market heat error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è Heat calculation error")
            lines.append("")

            # === 2. MARKET PHASE ===
            lines.append("üéØ MARKET PHASE")
            try:
                ticker = await self.bot.bybit_connector.get_ticker(symbol)
                vp_data = await self.get_volume_profile_data(symbol)

                if ticker and vp_data:
                    price = float(ticker.get("lastPrice", 0))
                    price_change = float(ticker.get("price24hPcnt", 0)) * 100

                    # –ü–æ–ª—É—á–∞–µ–º OB imbalance
                    ob_imbalance = 0
                    try:
                        if hasattr(self.bot, "orderbook_ws") and self.bot.orderbook_ws:
                            if hasattr(self.bot.orderbook_ws, "_orderbook"):
                                snapshot = self.bot.orderbook_ws._orderbook
                                bids = snapshot.get("bids", [])
                                asks = snapshot.get("asks", [])
                                if bids and asks:
                                    bid_vol = sum(float(b[1]) for b in bids[:50])
                                    ask_vol = sum(float(a[1]) for a in asks[:50])
                                    total = bid_vol + ask_vol
                                    if total > 0:
                                        ob_imbalance = (
                                            (bid_vol - ask_vol) / total
                                        ) * 100
                    except:
                        pass

                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CVD #1 - –ü–æ–ª—É—á–∞–µ–º CVD —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    cvd = 0
                    try:
                        if (
                            hasattr(self.bot, "orderbook_analyzer")
                            and self.bot.orderbook_analyzer
                        ):
                            cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                            logger.debug(
                                f"[CVD DEBUG PHASE] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(cvd_data)}, –ó–Ω–∞—á–µ–Ω–∏–µ: {cvd_data}"
                            )

                            if isinstance(cvd_data, dict):
                                if "cvd_pct" in cvd_data:
                                    cvd = float(cvd_data.get("cvd_pct", 0))
                                elif (
                                    "buy_volume" in cvd_data
                                    and "sell_volume" in cvd_data
                                ):
                                    buy_vol = float(cvd_data.get("buy_volume", 0))
                                    sell_vol = float(cvd_data.get("sell_volume", 0))
                                    total_vol = buy_vol + sell_vol
                                    if total_vol > 0:
                                        cvd = ((buy_vol - sell_vol) / total_vol) * 100
                            elif isinstance(cvd_data, (int, float)):
                                cvd = float(cvd_data)

                            logger.debug(f"[CVD PHASE] {symbol}: {cvd:.2f}%")
                    except Exception as cvd_err:
                        logger.error(f"[CVD PHASE ERROR] {cvd_err}")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É
                    phase_info = await self.phase_detector.detect_phase(
                        symbol=symbol,
                        price=price,
                        volume_profile=vp_data,
                        ob_imbalance=ob_imbalance,
                        cvd=cvd,
                        price_change_24h=price_change,
                    )

                    phase = phase_info.get("phase", "UNKNOWN")
                    emoji = phase_info.get("emoji", "‚ùì")
                    confidence = phase_info.get("confidence", 0)
                    description = phase_info.get("description", "")

                    lines.append(
                        f"‚îú‚îÄ Phase: {emoji} {phase} ({confidence}% confidence)"
                    )
                    lines.append(f"‚îî‚îÄ {description}")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"Phase detection error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã")
            lines.append("")

            # ===  MARKET MAKER SCENARIO ===
            lines.append("üìä MARKET MAKER SCENARIO")
            try:
                if hasattr(self.bot, "scenario_matcher"):
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    vp_data = await self.get_volume_profile_data(symbol)

                    if ticker and vp_data:
                        price = float(ticker.get("lastPrice", 0))

                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¥–ª—è UnifiedScenarioMatcher
                        market_data = {
                            "price": price,
                            "close": price,
                            "volume": float(ticker.get("volume24h", 0)),
                            "poc": vp_data.get("poc", 0),
                            "vah": vp_data.get("vah", 0),
                            "val": vp_data.get("val", 0),
                        }

                        indicators = {
                            "rsi": 50,  # –ó–∞–≥–ª—É—à–∫–∞
                            "rsi_1h": 50,
                            "macd_histogram": 0,
                            "atr": 0,
                        }

                        mtf_trends = {
                            "1H": {"trend": "neutral", "strength": 0},
                            "4H": {"trend": "neutral", "strength": 0},
                            "1D": {"trend": "neutral", "strength": 0},
                        }

                        news_sentiment = {
                            "sentiment": "neutral",
                            "score": 0,
                        }

                        veto_checks = {
                            "has_veto": False,
                            "veto_reasons": [],
                            "liquidity_ok": True,
                            "spread_ok": True,
                            "volatility_ok": True,
                        }

                        cvd_data = None  # Optional

                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í match_scenario
                        scenario = self.bot.scenario_matcher.match_scenario(
                            symbol=symbol,
                            market_data=market_data,
                            indicators=indicators,
                            mtf_trends=mtf_trends,
                            volume_profile=vp_data,
                            news_sentiment=news_sentiment,
                            veto_checks=veto_checks,
                            cvd_data=cvd_data,
                        )

                        if scenario and scenario.get("score", 0) > 50:
                            name = scenario.get("scenario_name", "Unknown")
                            status = scenario.get("status", "observation")
                            conf = scenario.get("score", 0)

                            emoji = self.get_scenario_emoji(name)
                            lines.append(
                                f"‚îú‚îÄ {emoji} {name.upper()} ‚Äî {status} ({conf:.0f}% conf)"
                            )
                            lines.append(
                                f"‚îú‚îÄ Direction: {scenario.get('direction', 'N/A').upper()}"
                            )
                            lines.append(
                                f"‚îî‚îÄ Timeframe: {scenario.get('timeframe', '1H')}"
                            )
                        else:
                            lines.append("‚îî‚îÄ ‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–Ω–∏–∑–∫–∏–π score)")
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Scenario matcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Scenario error: {e}", exc_info=True)
                lines.append(f"‚îî‚îÄ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")
            lines.append("")

            # === 3. INSTITUTIONAL METRICS ===
            lines.append("üî• INSTITUTIONAL METRICS")
            try:
                funding_rate = 0
                oi_value = 0
                ls_ratio = 0

                # ‚úÖ Funding Rate (–ë–ï–ó await!)
                try:
                    if (
                        hasattr(self.bot, "bybit_connector")
                        and self.bot.bybit_connector
                    ):
                        funding_rate = self.bot.bybit_connector.get_funding_rate(symbol)

                        if funding_rate is None or funding_rate == 0:
                            ticker = await self.bot.bybit_connector.get_ticker(symbol)
                            if ticker and "fundingRate" in ticker:
                                funding_rate = float(ticker.get("fundingRate", 0))

                        logger.debug(f"[FUNDING] {symbol}: {funding_rate:.4f}%")
                except Exception as e:
                    logger.error(f"[FUNDING ERROR] {e}")
                    funding_rate = 0

                # ‚úÖ Open Interest (–° await + –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ Dict!)
                try:
                    if (
                        hasattr(self.bot, "bybit_connector")
                        and self.bot.bybit_connector
                    ):
                        oi_data = await self.bot.bybit_connector.get_open_interest(
                            symbol
                        )

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        oi_contracts = 0
                        if isinstance(oi_data, dict):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
                            if "openInterest" in oi_data:
                                oi_contracts = float(oi_data["openInterest"])
                            elif "value" in oi_data:
                                oi_contracts = float(oi_data["value"])
                            elif "open_interest" in oi_data:
                                oi_contracts = float(oi_data["open_interest"])
                            else:
                                logger.warning(
                                    f"[OI] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Dict –¥–ª—è {symbol}: {list(oi_data.keys())}"
                                )
                        elif isinstance(oi_data, (int, float)):
                            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –Ω–∞–ø—Ä—è–º—É—é
                            oi_contracts = float(oi_data)

                        logger.debug(
                            f"[OI] {symbol}: oi_contracts = {oi_contracts:,.0f}"
                        )

                        if oi_contracts and oi_contracts > 0:
                            ticker = await self.bot.bybit_connector.get_ticker(symbol)
                            if ticker:
                                price = float(ticker.get("lastPrice", 0))
                                oi_value = oi_contracts * price
                                logger.debug(
                                    f"[OI] {symbol}: {oi_contracts:,.0f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ √ó ${price:,.2f} = ${oi_value:,.0f}"
                                )
                            else:
                                oi_value = oi_contracts
                        else:
                            oi_value = 0
                            logger.warning(f"[OI] {symbol}: oi_contracts = 0 –∏–ª–∏ None")
                except Exception as e:
                    logger.error(f"[OI ERROR] {e}", exc_info=True)
                    oi_value = 0

                # ‚úÖ Long/Short Ratio (–ë–ï–ó await!)
                try:
                    if (
                        hasattr(self.bot, "bybit_connector")
                        and self.bot.bybit_connector
                    ):
                        ls_ratio = self.bot.bybit_connector.get_long_short_ratio(symbol)

                        if ls_ratio is None or ls_ratio == 0:
                            ls_ratio = 1.0

                        logger.debug(f"[L/S] {symbol}: {ls_ratio:.2f}")
                except Exception as e:
                    logger.error(f"[L/S ERROR] {e}")
                    ls_ratio = 0

                long_pct = (ls_ratio / (1 + ls_ratio)) * 100 if ls_ratio else 50

                # ‚úÖ CVD (–ü–û–õ–ù–´–ô –ö–û–î!)
                cvd = 0.0
                cvd_emoji = "‚ö™"

                if (
                    hasattr(self.bot, "orderbook_analyzer")
                    and self.bot.orderbook_analyzer
                ):
                    try:
                        cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                        logger.debug(
                            f"[CVD DEBUG METRICS] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(cvd_data)}, –ó–Ω–∞—á–µ–Ω–∏–µ: {cvd_data}"
                        )

                        if isinstance(cvd_data, dict):
                            if "cvd_pct" in cvd_data:
                                cvd = float(cvd_data.get("cvd_pct", 0))
                            elif "buy_volume" in cvd_data and "sell_volume" in cvd_data:
                                buy_vol = float(cvd_data.get("buy_volume", 0))
                                sell_vol = float(cvd_data.get("sell_volume", 0))
                                total_vol = buy_vol + sell_vol
                                if total_vol > 0:
                                    cvd = ((buy_vol - sell_vol) / total_vol) * 100
                            elif "cvd" in cvd_data:
                                cvd = float(cvd_data.get("cvd", 0))

                        elif isinstance(cvd_data, (int, float)):
                            cvd = float(cvd_data)

                        cvd_emoji = self.get_cvd_emoji(cvd)
                        logger.info(f"‚úÖ [CVD FINAL] {symbol}: {cvd:.2f}% {cvd_emoji}")

                    except Exception as e:
                        logger.error(f"‚ùå [CVD ERROR] {symbol}: {e}", exc_info=True)
                        cvd = 0.0
                        cvd_emoji = "‚ö™"

                funding_emoji = self.get_funding_emoji(funding_rate)

                lines.append(f"‚îú‚îÄ Funding: {funding_rate:+.4f}% {funding_emoji}")
                lines.append(f"‚îú‚îÄ OI: ${oi_value/1e9:.2f}B")
                lines.append(
                    f"‚îú‚îÄ L/S Ratio: {ls_ratio:.2f} ({long_pct:.0f}% LONG) {'üü¢' if ls_ratio > 1 else 'üî¥'}"
                )
                lines.append(f"‚îî‚îÄ CVD: {cvd:+.2f}% {cvd_emoji}")

            except Exception as e:
                logger.error(f"Metrics error: {e}", exc_info=True)
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            lines.append("")

            # === 4. MULTI-TIMEFRAME ===
            lines.append("üìà MULTI-TIMEFRAME ALIGNMENT")
            try:
                trends = {}

                if hasattr(self.bot, "multi_tf_filter"):
                    mtf = self.bot.multi_tf_filter

                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MTF
                    if hasattr(mtf, "_cache") and mtf._cache:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
                        cache_key = f"mtf_{symbol}"
                        if cache_key in mtf._cache:
                            cached_data = mtf._cache[cache_key]
                            for tf in ["1h", "4h", "1d"]:
                                if tf in cached_data:
                                    trends[tf] = cached_data[tf]

                    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ connector –Ω–∞–ø—Ä—è–º—É—é
                    if not trends:
                        for tf in ["1h", "4h", "1d"]:
                            try:
                                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cached data –≤ multi_tf_filter
                                if hasattr(mtf, "trends") and symbol in mtf.trends:
                                    symbol_trends = mtf.trends[symbol]
                                    if tf in symbol_trends:
                                        trends[tf] = symbol_trends[tf]
                                else:
                                    # Fallback: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UNKNOWN
                                    trends[tf] = {"trend": "UNKNOWN", "strength": 0}
                            except Exception as e:
                                logger.debug(f"MTF {tf} cache error: {e}")
                                trends[tf] = {"trend": "UNKNOWN", "strength": 0}

                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if trends and any(
                        t.get("trend") != "UNKNOWN" for t in trends.values()
                    ):
                        for tf in ["1h", "4h", "1d"]:
                            trend_data = trends.get(tf, {})
                            trend = trend_data.get("trend", "UNKNOWN")
                            strength = trend_data.get("strength", 0)
                            emoji = self.get_trend_emoji(trend)
                            lines.append(
                                f"‚îú‚îÄ {tf.upper()}: {emoji} {trend} (strength {strength:.2f})"
                            )

                        # Agreement calculation
                        up_count = sum(
                            1 for t in trends.values() if t.get("trend") == "UP"
                        )
                        down_count = sum(
                            1 for t in trends.values() if t.get("trend") == "DOWN"
                        )
                        total = len(trends)

                        if up_count > down_count:
                            agreement = up_count / total
                            agreement_text = "Bullish"
                        elif down_count > up_count:
                            agreement = down_count / total
                            agreement_text = "Bearish"
                        else:
                            agreement = 0.33
                            agreement_text = "Mixed"

                        agreement_emoji = (
                            "üü¢"
                            if agreement >= 0.67
                            else "‚ö†Ô∏è" if agreement >= 0.34 else "üî¥"
                        )
                        lines.append(
                            f"‚îî‚îÄ Agreement: {agreement:.0%} {agreement_emoji} {agreement_text}"
                        )
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"MTF error: {e}", exc_info=True)
                lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 5. VOLUME PROFILE ===
            lines.append("üìä VOLUME PROFILE")
            try:
                vp = await self.bot.get_volume_profile(symbol)
                if vp and vp.get("poc"):
                    poc = vp.get("poc", 0)
                    vah = vp.get("vah", 0)
                    val = vp.get("val", 0)

                    lines.append(f"‚îú‚îÄ POC: ${poc:,.2f} (Point of Control)")
                    lines.append(f"‚îú‚îÄ VAH: ${vah:,.2f} (Value Area High)")
                    lines.append(f"‚îú‚îÄ VAL: ${val:,.2f} (Value Area Low)")

                    # Position
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    if ticker:
                        price = float(ticker.get("lastPrice", 0))
                        position = self.get_vp_position(price, poc, vah, val)
                        poc_diff = ((price - poc) / poc) * 100
                        lines.append(
                            f"‚îî‚îÄ Position: {position} ({poc_diff:+.2f}% from POC)"
                        )
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è VP –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"VP error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è VP –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 6. ORDERBOOK PRESSURE ===
            lines.append("üêã ORDERBOOK PRESSURE (Real-time)")
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.bot.orderbook_ws (–Ω–µ bybit_orderbook_ws)
                if hasattr(self.bot, "orderbook_ws") and self.bot.orderbook_ws:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ _orderbook –∞—Ç—Ä–∏–±—É—Ç–∞
                    if (
                        hasattr(self.bot.orderbook_ws, "_orderbook")
                        and self.bot.orderbook_ws._orderbook
                    ):
                        snapshot = self.bot.orderbook_ws._orderbook

                        bids = snapshot.get("bids", [])
                        asks = snapshot.get("asks", [])

                        if bids and asks:
                            # –°—á–∏—Ç–∞–µ–º top 50 levels
                            bid_vol = sum(float(b[1]) for b in bids[:50])
                            ask_vol = sum(float(a[1]) for a in asks[:50])
                            total = bid_vol + ask_vol

                            if total > 0:
                                bid_pct = (bid_vol / total) * 100
                                ask_pct = (ask_vol / total) * 100
                                imbalance = bid_pct - ask_pct

                                emoji = self.get_pressure_emoji(imbalance)

                                lines.append(
                                    f"‚îú‚îÄ BID: {bid_pct:.1f}% {'üü¢' if bid_pct > 50 else 'üî¥'}"
                                )
                                lines.append(f"‚îú‚îÄ ASK: {ask_pct:.1f}%")
                                lines.append(f"‚îî‚îÄ Imbalance: {imbalance:+.1f}% {emoji}")
                            else:
                                lines.append("‚îî‚îÄ ‚ö†Ô∏è –ù–µ—Ç –æ–±—ä—ë–º–∞ –≤ orderbook")
                        else:
                            lines.append("‚îî‚îÄ ‚ö†Ô∏è –ü—É—Å—Ç–æ–π orderbook")
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö orderbook...")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Orderbook WS –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"L2 error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è L2 –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 7. KEY LEVELS ===
            lines.append("üíé KEY LEVELS")
            try:
                vp = await self.bot.get_volume_profile(symbol)
                if vp:
                    # –ë–µ—Ä–µ–º VAH/VAL –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
                    vah = vp.get("vah", 0)
                    val = vp.get("val", 0)

                    lines.append(f"‚îú‚îÄ Resistance: ${vah:,.0f}")
                    lines.append(f"‚îú‚îÄ Support: ${val:,.0f}")

                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    if ticker:
                        price = float(ticker.get("lastPrice", 0))
                        if price > 0 and vah > 0:
                            breakout_pct = ((vah - price) / price) * 100
                            lines.append(
                                f"‚îî‚îÄ Breakout Target: ${vah:,.0f} ({breakout_pct:+.1f}%)"
                            )
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"Levels error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 8. WHALE ACTIVITY ===
            lines.append("üêã WHALE ACTIVITY (Last 15min)")
            try:
                if hasattr(self.bot, "whale_tracker"):
                    whale_info = self.bot.whale_tracker.format_whale_info(
                        symbol, minutes=15
                    )
                    lines.append(whale_info)
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Whale tracker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Whale activity error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è Whale data unavailable")
            lines.append("")

            # === 9. LIQUIDATIONS 24H ===
            lines.append("üí• LIQUIDATIONS (24H)")
            try:
                if hasattr(self.bot, "bybit_connector") and self.bot.bybit_connector:
                    liquidations = await self.bot.bybit_connector.get_liquidations_24h(
                        symbol
                    )

                    if liquidations and isinstance(liquidations, dict):
                        total = liquidations.get("total", 0)
                        total_long = liquidations.get("total_long", 0)
                        total_short = liquidations.get("total_short", 0)
                        long_pct = liquidations.get("long_pct", 0)
                        short_pct = liquidations.get("short_pct", 0)
                        count = liquidations.get("count", 0)

                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–∏–ª–ª–∏–æ–Ω—ã
                        total_m = total / 1_000_000
                        long_m = total_long / 1_000_000
                        short_m = total_short / 1_000_000

                        lines.append(f"‚îú‚îÄ Total: ${total_m:.2f}M ({count} events)")
                        lines.append(f"‚îú‚îÄ üü¢ Longs: ${long_m:.2f}M ({long_pct:.1f}%)")
                        lines.append(
                            f"‚îú‚îÄ üî¥ Shorts: ${short_m:.2f}M ({short_pct:.1f}%)"
                        )

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
                        if long_pct > 65:
                            pressure = "üî¥ LONG SQUEEZE"
                        elif short_pct > 65:
                            pressure = "üü¢ SHORT SQUEEZE"
                        else:
                            pressure = "‚öñÔ∏è BALANCED"

                        lines.append(f"‚îî‚îÄ Pressure: {pressure}")
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Connector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Liquidations error: {e}", exc_info=True)
                lines.append("‚îî‚îÄ ‚ö†Ô∏è Liquidations data unavailable")
            lines.append("")

            # === AI INTERPRETATION ===
            lines.append("")
            lines.append(" AI INTERPRETATION ")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretation = await self.generate_ai_interpretation(symbol)
            lines.append(interpretation)

            # === FOOTER ===
            now = datetime.now().strftime("%H:%M:%S")
            next_update = (datetime.now() + timedelta(minutes=5)).strftime("%H:%M:%S")

            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append(f"‚è±Ô∏è Updated: {now}")
            lines.append(f"üîÑ Next update: {next_update} (manual)")

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"‚ùå build_dashboard error: {e}", exc_info=True)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

    async def generate_interpretation(self, symbol: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
        try:
            parts = []

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CVD #3 - –í generate_interpretation
            cvd = 0.0

            if hasattr(self.bot, "orderbook_analyzer") and self.bot.orderbook_analyzer:
                try:
                    cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)

                    if isinstance(cvd_data, dict):
                        if "cvd_pct" in cvd_data:
                            cvd = float(cvd_data.get("cvd_pct", 0))
                        elif "buy_volume" in cvd_data and "sell_volume" in cvd_data:
                            buy_vol = float(cvd_data.get("buy_volume", 0))
                            sell_vol = float(cvd_data.get("sell_volume", 0))
                            total_vol = buy_vol + sell_vol
                            if total_vol > 0:
                                cvd = ((buy_vol - sell_vol) / total_vol) * 100
                        elif "cvd" in cvd_data:
                            cvd = float(cvd_data.get("cvd", 0))

                    elif isinstance(cvd_data, (int, float)):
                        cvd = float(cvd_data)

                except Exception as e:
                    logger.error(f"[CVD INTERPRETATION ERROR] {e}")
                    cvd = 0.0

            # –ü–æ–ª—É—á–∞–µ–º L2 pressure
            try:
                snapshot = (
                    self.bot.orderbook_ws._orderbook
                    if hasattr(self.bot, "orderbook_ws")
                    and hasattr(self.bot.orderbook_ws, "_orderbook")
                    else None
                )
                if snapshot:
                    bid_vol = sum(float(b[1]) for b in snapshot.get("bids", [])[:50])
                    ask_vol = sum(float(b[1]) for b in snapshot.get("asks", [])[:50])
                    total = bid_vol + ask_vol
                    imbalance = ((bid_vol - ask_vol) / total * 100) if total > 0 else 0
                else:
                    imbalance = 0
            except:
                imbalance = 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            if abs(cvd) > 50:
                side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if cvd > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(f"–°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {side} (CVD {cvd:+.0f}%).")

            if abs(imbalance) > 30:
                pressure_side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if imbalance > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(
                    f"L2 orderbook –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ {pressure_side} ({imbalance:+.0f}%)."
                )

            if not parts:
                parts.append("–†—ã–Ω–æ–∫ –≤ –±–∞–ª–∞–Ω—Å–µ, –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.")

            return " ".join(parts)

        except Exception as e:
            logger.error(f"generate_interpretation error: {e}")
            return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."

    async def generate_ai_interpretation(self, symbol: str) -> str:
        """–ü–æ–ª–Ω–∞—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –º–µ—Ç—Ä–∏–∫"""
        try:
            parts = []

            # === 1. –ü–æ–ª—É—á–∞–µ–º CVD ===
            cvd = 0.0
            if hasattr(self.bot, "orderbook_analyzer"):
                try:
                    cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                    if isinstance(cvd_data, dict):
                        cvd = float(cvd_data.get("cvd_pct", 0))
                    elif isinstance(cvd_data, (int, float)):
                        cvd = float(cvd_data)
                except Exception as e:
                    logger.debug(f"CVD fetch error: {e}")

            # === 2. –ü–æ–ª—É—á–∞–µ–º Funding Rate ===
            funding = 0.0
            if hasattr(self.bot, "binance_client"):
                try:
                    funding_data = self.bot.binance_client.get_funding_rate(symbol)

                    funding = float(funding_data.get("lastFundingRate", 0))
                except Exception as e:
                    logger.debug(f"Funding fetch error: {e}")

            # === 3. –ü–æ–ª—É—á–∞–µ–º L/S Ratio ===
            ls_ratio = 1.0
            if hasattr(self.bot, "binance_client"):
                try:
                    ls_data = self.bot.binance_client.get_long_short_ratio(symbol)
                    ls_ratio = float(ls_data.get("longShortRatio", 1.0))
                except Exception as e:
                    logger.debug(f"L/S Ratio fetch error: {e}")

            # === 4. –ü–æ–ª—É—á–∞–µ–º Market Phase ===
            phase = "UNKNOWN"
            phase_conf = 0.0
            if hasattr(self, "phase_detector"):
                try:
                    df = await self.bot.fetch_ohlcv(symbol, "1h", limit=100)
                    phase_result = await self.phase_detector.detect_phase(
                        df, symbol, "1h"
                    )
                    phase = phase_result.get("phase", "UNKNOWN")
                    phase_conf = phase_result.get("confidence", 0.0)
                except Exception as e:
                    logger.debug(f"Phase detection error: {e}")

            # === 5. –ü–æ–ª—É—á–∞–µ–º Whale Activity ===
            whale_net = 0.0
            if hasattr(self.bot, "whale_tracker"):
                try:
                    whale_data = await self.bot.whale_tracker.get_whale_summary(
                        symbol, minutes=15
                    )
                    whale_net = float(whale_data.get("net_volume", 0))
                except Exception as e:
                    logger.debug(f"Whale activity error: {e}")

            # === 6. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é ===

            # CVD –∞–Ω–∞–ª–∏–∑
            if abs(cvd) > 50:
                side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if cvd > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(f"üî• –°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {side} (CVD {cvd:+.1f}%).")
            elif abs(cvd) > 20:
                side = "–ø–æ–∫—É–ø–æ–∫" if cvd > 0 else "–ø—Ä–æ–¥–∞–∂"
                parts.append(f"üìä –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ {side} (CVD {cvd:+.1f}%).")
            else:
                parts.append(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ (CVD {cvd:+.1f}%).")

            # Funding Rate –∞–Ω–∞–ª–∏–∑
            if funding > 0.01:
                parts.append(
                    f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π Funding Rate ({funding*100:+.3f}%) ‚Äî –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω–æ—Å—Ç—å –ª–æ–Ω–≥–æ–≤, —Ä–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."
                )
            elif funding < -0.01:
                parts.append(
                    f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Funding ({funding*100:+.3f}%) ‚Äî –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω–æ—Å—Ç—å —à–æ—Ä—Ç–æ–≤, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫."
                )
            else:
                parts.append(
                    f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π Funding ({funding*100:+.3f}%) ‚Äî —Ä—ã–Ω–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω."
                )

            # L/S Ratio –∞–Ω–∞–ª–∏–∑
            if ls_ratio > 1.5:
                parts.append(
                    f"üìä L/S Ratio {ls_ratio:.2f} ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å –ª–æ–Ω–≥–∞–º–∏."
                )
            elif ls_ratio < 0.67:
                parts.append(
                    f"üìä L/S Ratio {ls_ratio:.2f} ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å —à–æ—Ä—Ç–∞–º–∏."
                )
            else:
                parts.append(f"üìä L/S Ratio {ls_ratio:.2f} ‚Äî –ø–∞—Ä–∏—Ç–µ—Ç —Å–∏–ª.")

            # Whale Activity –∞–Ω–∞–ª–∏–∑
            if abs(whale_net) > 100000:  # $100k+
                side = "–ø–æ–∫—É–ø–∞—é—Ç" if whale_net > 0 else "–ø—Ä–æ–¥–∞—é—Ç"
                parts.append(f"üêã –ö–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ {side} (${abs(whale_net)/1e6:+.2f}M).")

            # Phase –∞–Ω–∞–ª–∏–∑
            if phase_conf > 0.7:
                if phase == "IMPULSE":
                    parts.append("üöÄ –ò–º–ø—É–ª—å—Å–Ω–∞—è —Ñ–∞–∑–∞ ‚Äî —Å–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ.")
                elif phase == "ACCUMULATION":
                    parts.append(
                        "üì¶ –§–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è ‚Äî –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏."
                    )
                elif phase == "DISTRIBUTION":
                    parts.append(
                        "üì§ –§–∞–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—Ö–æ–¥—è—Ç –∏–∑ –ø–æ–∑–∏—Ü–∏–π."
                    )
                elif phase == "CORRECTION":
                    parts.append("üìâ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è ‚Äî –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞.")
            else:
                parts.append("‚ùì –§–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")

            # === 7. –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ===
            parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
            parts.append("")

            # –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if cvd > 50 and funding < 0 and ls_ratio < 1 and whale_net > 100000:
                parts.append(
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ."
                )
            elif (
                cvd < -50 and funding > 0.01 and ls_ratio > 1.5 and whale_net < -100000
            ):
                parts.append(
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: üîª –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ."
                )
            elif phase_conf < 0.5:
                parts.append(
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∞–∑—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."
                )
            else:
                parts.append(
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨ ‚Äî –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è."
                )

            return " ".join(parts)

        except Exception as e:
            logger.error(f"AI interpretation error: {e}", exc_info=True)
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é."

    def get_regime_emoji(self, regime: str) -> str:
        mapping = {"TRENDING": "üìà", "RANGING": "‚ÜîÔ∏è", "VOLATILE": "‚ö°", "BREAKOUT": "üöÄ"}
        return mapping.get(regime.upper(), "‚ö™")

    def get_scenario_emoji(self, scenario: str) -> str:
        mapping = {
            "ACCUMULATION": "üéØ",
            "MARKUP": "üìà",
            "DISTRIBUTION": "üìâ",
            "MARKDOWN": "üî¥",
            "IMPULSE": "üöÄ",
            "MEANREVERSION": "‚ÜîÔ∏è",
            "FLAT": "üìä",
        }
        return mapping.get(scenario.upper(), "‚ö™")

    def get_funding_emoji(self, funding: float) -> str:
        if funding > 0.01:
            return "üî•"
        elif funding < -0.01:
            return "‚ùÑÔ∏è"
        else:
            return "‚ö™"

    def get_cvd_emoji(self, cvd: float) -> str:
        if cvd > 50:
            return "üî•"
        elif cvd > 20:
            return "üü¢"
        elif cvd < -50:
            return "‚ùÑÔ∏è"
        elif cvd < -20:
            return "üî¥"
        else:
            return "‚ö™"

    def get_trend_emoji(self, trend: str) -> str:
        mapping = {"UP": "üü¢", "DOWN": "üî¥", "NEUTRAL": "‚ö™", "UNKNOWN": "‚ö™"}
        return mapping.get(trend.upper(), "‚ö™")

    def get_pressure_emoji(self, imbalance: float) -> str:
        if imbalance > 50:
            return "üî•"
        elif imbalance > 20:
            return "üü¢"
        elif imbalance < -50:
            return "‚ùÑÔ∏è"
        elif imbalance < -20:
            return "üî¥"
        else:
            return "‚ö™"

    def get_vp_position(self, price: float, poc: float, vah: float, val: float) -> str:
        if price > vah:
            return "Above VAH ‚¨ÜÔ∏è"
        elif price < val:
            return "Below VAL ‚¨áÔ∏è"
        elif price > poc:
            return "Above POC üü¢"
        else:
            return "Below POC üî¥"

    async def get_market_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {}

            # Ticker
            ticker = await self.bot.bybit_connector.get_ticker(symbol)
            if ticker:
                data["price"] = float(ticker.get("lastPrice", 0))
                data["change_24h"] = float(ticker.get("price24hPcnt", 0)) * 100
                data["volume_24h"] = float(ticker.get("volume24h", 0))

            # Funding
            if hasattr(self.bot, "get_funding_rate"):
                funding = self.bot.get_funding_rate(symbol)
                data["funding_rate"] = funding.get("rate", 0) if funding else 0

            # OI
            if hasattr(self.bot, "get_open_interest"):
                oi = await self.bot.get_open_interest(symbol)
                data["open_interest"] = oi.get("value", 0) if oi else 0

            # L/S Ratio
            if hasattr(self.bot, "get_long_short_ratio"):
                ratio = self.bot.get_long_short_ratio(symbol)
                data["long_short_ratio"] = ratio.get("ratio", 0) if ratio else 0

            # CVD
            if hasattr(self.bot, "orderbook_analyzer"):
                cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                data["cvd"] = cvd_data.get("cvd_pct", 0) if cvd_data else 0

            return data
        except Exception as e:
            logger.error(f"get_market_data error: {e}")
            return {}

    async def get_volume_profile_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Volume Profile"""
        try:
            if hasattr(self.bot, "get_volume_profile"):
                return await self.bot.get_volume_profile(symbol)
            elif hasattr(self.bot, "volume_profile_calculator"):
                return await self.bot.volume_profile_calculator.get_latest_profile(
                    symbol
                )
            else:
                return {}
        except Exception as e:
            logger.error(f"get_volume_profile_data error: {e}")
            return {}

    async def get_mtf_trends(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Multi-Timeframe —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            trends = {}

            if not hasattr(self.bot, "multitf_filter"):
                return trends

            mtf = self.bot.multitf_filter

            for tf in ["1h", "4h", "1d"]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º klines
                    klines = await mtf.get_klines_from_connector(symbol, tf, 200)
                    if not klines:
                        trends[tf] = {"trend": "UNKNOWN", "strength": 0}
                        continue

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                    if hasattr(mtf, "mtf_analyzer"):
                        result = await mtf.mtf_analyzer.analyze(klines, tf)
                        trends[tf] = {
                            "trend": result.get("trend", "UNKNOWN"),
                            "strength": result.get("strength", 0),
                        }
                    else:
                        trends[tf] = {"trend": "UNKNOWN", "strength": 0}

                except Exception as e:
                    logger.error(f"MTF {tf} error: {e}")
                    trends[tf] = {"trend": "UNKNOWN", "strength": 0}

            return trends

        except Exception as e:
            logger.error(f"get_mtf_trends error: {e}")
            return {}

    async def get_orderbook_pressure(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è orderbook"""
        try:
            if (
                not hasattr(self.bot, "bybit_orderbook_ws")
                or not self.bot.bybit_orderbook_ws
            ):
                return {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ get_orderbook_snapshot
            if hasattr(self.bot.bybit_orderbook_ws, "get_orderbook_snapshot"):
                snapshot = self.bot.bybit_orderbook_ws.get_orderbook_snapshot()
            elif hasattr(self.bot.bybit_orderbook_ws, "orderbook"):
                snapshot = self.bot.bybit_orderbook_ws.orderbook
            else:
                return {}

            if not snapshot:
                return {}

            bids = snapshot.get("bids", [])
            asks = snapshot.get("asks", [])

            if not bids or not asks:
                return {}

            # –°—á–∏—Ç–∞–µ–º top 50 levels
            bid_vol = sum(float(b[1]) for b in bids[:50])
            ask_vol = sum(float(a[1]) for a in asks[:50])
            total = bid_vol + ask_vol

            if total == 0:
                return {}

            bid_pct = (bid_vol / total) * 100
            ask_pct = (ask_vol / total) * 100
            imbalance = bid_pct - ask_pct

            return {
                "bid_pct": bid_pct,
                "ask_pct": ask_pct,
                "imbalance": imbalance,
                "bid_vol": bid_vol,
                "ask_vol": ask_vol,
            }

        except Exception as e:
            logger.error(f"get_orderbook_pressure error: {e}")
            return {}

    async def get_scenario(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è MM"""
        try:
            if not hasattr(self.bot, "unified_scenario_matcher"):
                return None

            # –ü–æ–ª—É—á–∞–µ–º market data
            market_data = await self.get_market_data(symbol)
            vp_data = await self.get_volume_profile_data(symbol)

            if not market_data or not market_data.get("price"):
                return None

            # Match scenario
            scenario = await self.bot.unified_scenario_matcher.match_scenario(
                symbol=symbol,
                price=market_data.get("price", 0),
                volume_profile=vp_data,
                market_data=market_data,
            )

            return scenario if scenario and scenario.get("score", 0) > 40 else None

        except Exception as e:
            logger.error(f"get_scenario error: {e}")
            return None
