#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Performance Handler
Telegram command handler for signal performance analytics
"""

import asyncio
import sqlite3
from typing import List
from telegram import Update
from telegram.ext import ContextTypes
from config.settings import logger, DB_FILE


class PerformanceHandler:
    """Handler for signal performance commands"""

    def __init__(self, bot_instance):
        self.bot = bot_instance
        logger.info("‚úÖ PerformanceHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_performance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /performance ‚Äî Overall performance statistics
        /performance 7 ‚Äî Performance for last 7 days
        /performance 90 ‚Äî Performance for last 90 days
        """
        try:
            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /performance –æ—Ç @{user}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–¥–Ω–∏)
            days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
            if context.args and len(context.args) >= 1:
                try:
                    days = int(context.args[0])
                    if days < 1 or days > 365:
                        days = 30
                except:
                    days = 30

            # Loading message
            loading = await update.message.reply_text(
                f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π..."
            )

            # Get performance stats
            stats = await self.bot.signal_performance_analyzer.get_performance_overview(
                days
            )

            # Format output
            output = self.bot.signal_performance_analyzer.format_performance_overview(
                stats
            )

            # Send result
            await loading.delete()
            await update.message.reply_text(output, parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /performance error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_bestsignals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /bestsignals ‚Äî Top 10 best performing signals
        """
        try:
            user = update.effective_user.username or "Unknown"
            logger.info(f"üèÜ /bestsignals –æ—Ç @{user}")

            # Get top signals
            top_signals = await self._get_top_signals(limit=10, best=True)

            if not top_signals:
                await update.message.reply_text(
                    "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                return

            # Format output
            lines = ["üèÜ TOP 10 BEST SIGNALS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", ""]

            for i, signal in enumerate(top_signals, 1):
                symbol = signal["symbol"]
                roi = signal["roi"]
                direction = signal["direction"] or "UNKNOWN"
                entry_time = (
                    signal["entry_time"][:10] if signal["entry_time"] else "N/A"
                )

                emoji = (
                    "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                )
                lines.append(
                    f"{emoji} {symbol} {direction}: {roi:+.2f}% ROI\n"
                    f"   üìÖ {entry_time}"
                )

            lines.append("")
            lines.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /performance –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            await update.message.reply_text("\n".join(lines), parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /bestsignals error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_worstsignals(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        /worstsignals ‚Äî Top 10 worst performing signals
        """
        try:
            user = update.effective_user.username or "Unknown"
            logger.info(f"üìâ /worstsignals –æ—Ç @{user}")

            # Get worst signals
            worst_signals = await self._get_top_signals(limit=10, best=False)

            if not worst_signals:
                await update.message.reply_text(
                    "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                return

            # Format output
            lines = ["üìâ TOP 10 WORST SIGNALS", "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", ""]

            for i, signal in enumerate(worst_signals, 1):
                symbol = signal["symbol"]
                roi = signal["roi"]
                direction = signal["direction"] or "UNKNOWN"
                entry_time = (
                    signal["entry_time"][:10] if signal["entry_time"] else "N/A"
                )

                lines.append(
                    f"{i}. {symbol} {direction}: {roi:+.2f}% ROI\n"
                    f"   üìÖ {entry_time}"
                )

            lines.append("")
            lines.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /performance –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            await update.message.reply_text("\n".join(lines), parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /worstsignals error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def _get_top_signals(self, limit: int = 10, best: bool = True) -> List[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ ROI

        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
            best: True –¥–ª—è –ª—É—á—à–∏—Ö, False –¥–ª—è —Ö—É–¥—à–∏—Ö

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ [{symbol, roi, direction, entry_time}, ...]
        """
        try:
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: DESC –¥–ª—è –ª—É—á—à–∏—Ö, ASC –¥–ª—è —Ö—É–¥—à–∏—Ö
            order = "DESC" if best else "ASC"

            cursor.execute(
                f"""
                SELECT symbol, roi, direction, entry_time
                FROM signals
                WHERE status = 'closed'
                  AND roi IS NOT NULL
                ORDER BY roi {order}
                LIMIT ?
            """,
                (limit,),
            )

            rows = cursor.fetchall()
            conn.close()

            if not rows:
                return []

            return [
                {
                    "symbol": row[0],
                    "roi": row[1],
                    "direction": row[2],
                    "entry_time": row[3],
                }
                for row in rows
            ]

        except Exception as e:
            logger.error(f"_get_top_signals error: {e}")
            return []
