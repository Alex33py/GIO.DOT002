#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Correlation Handler
Telegram command handler for /correlation
"""

import asyncio
from typing import List
from telegram import Update
from telegram.ext import ContextTypes
from config.settings import logger


class CorrelationHandler:
    """Handler for /correlation command"""

    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.default_symbols = [
            "BTCUSDT",
            "ETHUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "BNBUSDT",
        ]
        logger.info("‚úÖ CorrelationHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_correlation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        /correlation - Show correlation matrix for top assets
        /correlation BTC ETH SOL - Show correlation for specific assets
        """
        try:
            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /correlation –æ—Ç @{user}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
            if context.args and len(context.args) >= 2:
                # User provided symbols
                symbols = []
                for arg in context.args:
                    symbol = arg.upper()
                    if not symbol.endswith("USDT"):
                        symbol = f"{symbol}USDT"
                    symbols.append(symbol)
            else:
                # Use default top 5 symbols
                symbols = self.default_symbols

            # Loading message
            loading = await update.message.reply_text(
                f"üîç –í—ã—á–∏—Å–ª—è—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è {len(symbols)} –∞–∫—Ç–∏–≤–æ–≤..."
            )

            # Calculate correlation
            result = await self.bot.correlation_analyzer.calculate_correlation_matrix(
                symbols, period="24h"
            )

            # Format output
            output = self.bot.correlation_analyzer.format_correlation_matrix(result)

            # Send result
            await loading.delete()
            await update.message.reply_text(output, parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /correlation error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_correlation_pair(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        /corrpair BTCUSDT ETHUSDT - Show correlation between two specific assets
        """
        try:
            if not context.args or len(context.args) < 2:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /corrpair SYMBOL1 SYMBOL2\n"
                    "–ü—Ä–∏–º–µ—Ä: /corrpair BTC ETH"
                )
                return

            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /corrpair –æ—Ç @{user}")

            # Parse symbols
            symbol1 = context.args[0].upper()
            symbol2 = context.args[1].upper()

            if not symbol1.endswith("USDT"):
                symbol1 = f"{symbol1}USDT"
            if not symbol2.endswith("USDT"):
                symbol2 = f"{symbol2}USDT"

            # Loading message
            loading = await update.message.reply_text(
                f"üîç –í—ã—á–∏—Å–ª—è—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é {symbol1} –∏ {symbol2}..."
            )

            # Calculate correlation for pair
            result = await self.bot.correlation_analyzer.calculate_correlation_matrix(
                [symbol1, symbol2], period="24h"
            )

            # Format pair-specific output
            matrix = result["matrix"]
            corr_value = matrix[0][1] if len(matrix) > 1 else 0

            # Interpretation
            if corr_value > 0.8:
                strength = "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–ê–Ø"
                emoji = "üî•"
            elif corr_value > 0.6:
                strength = "–°–ò–õ–¨–ù–ê–Ø"
                emoji = "üü¢"
            elif corr_value > 0.4:
                strength = "–£–ú–ï–†–ï–ù–ù–ê–Ø"
                emoji = "üü°"
            elif corr_value > 0.2:
                strength = "–°–õ–ê–ë–ê–Ø"
                emoji = "‚ö™"
            else:
                strength = "–û–ß–ï–ù–¨ –°–õ–ê–ë–ê–Ø"
                emoji = "üî¥"

            output = (
                f"üìä CORRELATION: {symbol1.replace('USDT', '')} ‚Üî {symbol2.replace('USDT', '')}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"{emoji} –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {corr_value:.2f}\n"
                f"–°–∏–ª–∞: {strength}\n\n"
                f"üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n"
            )

            if corr_value > 0.7:
                output += "‚Ä¢ –ê–∫—Ç–∏–≤—ã –¥–≤–∏–∂—É—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ\n"
                output += "‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å\n"
                output += "‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞"
            elif corr_value > 0.4:
                output += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –¥–≤–∏–∂–µ–Ω–∏–π\n"
                output += "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å\n"
                output += "‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"
            else:
                output += "‚Ä¢ –°–ª–∞–±–∞—è —Å–≤—è–∑—å –∏–ª–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\n"
                output += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                output += "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è"

            await loading.delete()
            await update.message.reply_text(output, parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /corrpair error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
