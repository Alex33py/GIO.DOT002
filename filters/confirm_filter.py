#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Confirm Filter - –§–∏–ª—å—Ç—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CVD, –æ–±—ä—ë–º –∏ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–≤–µ—á–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–∞
"""


import time
import asyncio
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from config.settings import logger


class ConfirmFilter:
    """
    –§–∏–ª—å—Ç—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤


    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç 3 –∫—Ä–∏—Ç–µ—Ä–∏—è:
    1. CVD (Cumulative Volume Delta) ‚â• 60%
    2. Volume ‚â• 1.5x —Å—Ä–µ–¥–Ω–µ–≥–æ
    3. Candle pattern –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    """

    def __init__(
        self,
        bot_instance=None,
        cvd_threshold: float = 0.5,  # –ò–ó–ú–ï–ù–ï–ù–û: 2.0 ‚Üí 0.5 (–ø—Ä–æ—Ü–µ–Ω—Ç!)
        volume_multiplier: float = 1.5,  # –ò–ó–ú–ï–ù–ï–ù–û: 1.3 ‚Üí 1.5
        candle_check: bool = False,  # –ò–ó–ú–ï–ù–ï–ù–û: True ‚Üí False
        min_large_trade_value: float = 10000,
        adaptive_mode: bool = True,  # –ù–û–í–û–ï: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞

        Args:
            bot_instance: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cvd_threshold: –ü–æ—Ä–æ–≥ CVD –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            volume_multiplier: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä—ë–º–∞ (1.5x –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            candle_check: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–≤–µ—á–∏ (False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            min_large_trade_value: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä large trade ($)
            adaptive_mode: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ CVD (True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        """
        self.bot = bot_instance
        self.cvd_threshold = cvd_threshold
        self.volume_multiplier = volume_multiplier
        self.volume_threshold_multiplier = volume_multiplier  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.candle_check = candle_check
        self.require_candle_confirmation = candle_check  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.min_large_trade_value = min_large_trade_value
        self.adaptive_mode = adaptive_mode  # –ù–û–í–û–ï

        logger.info(
            f"‚úÖ ConfirmFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (CVD‚â•{cvd_threshold}%, "
            f"Vol‚â•{volume_multiplier}x, Candle={candle_check}, Adaptive={adaptive_mode})"
        )

    # ========== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò (ASYNC) ==========

    async def validate(
        self,
        symbol: str,
        direction: str,
        market_data: Optional[Dict] = None,
        signal_data: Optional[Dict] = None,
    ) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π (async –≤–µ—Ä—Å–∏—è)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ—Ä—É—Ç—Å—è –∏–∑ bot.market_data)
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (pattern, direction) –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤

        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        logger.info(f"üîç Confirm Filter –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {symbol} {direction}")

        # ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ê–¢–†–ò–ë–£–¢–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø
        self.last_cvd = 0.0
        self.last_volume_ratio = 0.0

        # ‚úÖ –ï–°–õ–ò –ù–ï–¢ signal_data - –°–û–ó–î–ê–Å–ú –ë–ê–ó–û–í–´–ô!
        if signal_data is None:
            signal_data = {
                "pattern": "Unknown",
                "direction": direction,
            }

        try:
            # –ü–æ–ª—É—á–∞–µ–º market_data
            if market_data is None and self.bot:
                market_data = self.bot.market_data.get(symbol, {})
            elif market_data is None:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç market_data, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return True

            # 1. –ü–†–û–í–ï–†–ö–ê CVD (async) ‚Üê –¢–ï–ü–ï–†–¨ signal_data –ü–ï–†–ï–î–ê–Å–¢–°–Ø!
            cvd_ok = await self._check_cvd_simple(
                symbol, direction, market_data, signal_data
            )
            if not cvd_ok:
                logger.warning(f"‚ùå {symbol}: CVD –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return False

            # 2. –ü–†–û–í–ï–†–ö–ê –û–ë–™–Å–ú–ê (async)
            volume_ok = await self._check_volume_simple(symbol, market_data)
            if not volume_ok:
                logger.warning(f"‚ùå {symbol}: Volume –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return False

            # 3. –ü–†–û–í–ï–†–ö–ê –°–í–ï–ß–ò (async)
            if self.candle_check:
                candle_ok = await self._check_candle_simple(
                    symbol, direction, market_data
                )
                if not candle_ok:
                    logger.warning(f"‚ùå {symbol}: Candle pattern –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è")
                    return False

            logger.info(f"‚úÖ {symbol}: –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ (CVD, Volume, Candle)")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ validate –¥–ª—è {symbol}: {e}")
            return False  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª

    # ========== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î (–î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò) ==========

    async def validate_signal(
        self, signal: Dict, market_data: Dict, symbol: str
    ) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Confirm Filter (async –≤–µ—Ä—Å–∏—è)


        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞


        Returns:
            (is_valid, reason) - —Ñ–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—á–∏–Ω–∞
        """
        try:
            direction = signal.get("direction", "LONG")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π async –º–µ—Ç–æ–¥ validate
            is_valid = await self.validate(symbol, direction, market_data)

            if is_valid:
                return (True, "All confirmations passed")
            else:
                return (False, "One or more confirmations failed")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ validate_signal –¥–ª—è {symbol}: {e}")
            return (False, f"Error: {e}")


    async def _check_cvd_simple(
        self, symbol: str, direction: str, market_data: Dict, signal_data: Dict
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CVD (Cumulative Volume Delta) —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º scenario –∏–∑ signal_data
            scenario = signal_data.get("pattern", "Unknown")

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
            cvd_threshold = self._get_adaptive_cvd_threshold(scenario, direction)

            # –ü–æ–ª—É—á–∞–µ–º CVD –æ—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            cvd_okx = None
            cvd_bybit = None

            if hasattr(self.bot, "okx") and self.bot.okx:
                cvd_okx = self.bot.okx.get_cvd_percentage(symbol)

            if hasattr(self.bot, "bybit") and self.bot.bybit:
                cvd_bybit = self.bot.bybit.get_cvd_percentage(symbol)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π CVD
            cvd = cvd_okx if cvd_okx is not None else cvd_bybit

            if cvd is None:
                logger.warning(f"‚ö†Ô∏è CVD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                return True  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú CVD
            self.last_cvd = cvd

            # –õ–æ–≥–∏—Ä—É–µ–º CVD
            logger.debug(f"   üìä {symbol} CVD: {cvd:.1f}% (–ø–æ—Ä–æ–≥: ¬±{cvd_threshold}%)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CVD –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction == "LONG":
                # –î–ª—è LONG –Ω—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π CVD
                if cvd < -cvd_threshold:  # –°–ª–∏—à–∫–æ–º bearish
                    logger.debug(
                        f"   ‚ùå CVD –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç LONG: {cvd:.1f}% < -{cvd_threshold}%"
                    )
                    return False

            elif direction == "SHORT":
                # –î–ª—è SHORT –Ω—É–∂–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π CVD
                if cvd > cvd_threshold:  # –°–ª–∏—à–∫–æ–º bullish
                    logger.debug(
                        f"   ‚ùå CVD –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç SHORT: {cvd:.1f}% > {cvd_threshold}%"
                    )
                    return False

            # CVD OK
            logger.debug(f"   ‚úÖ CVD –ø—Ä–æ–≤–µ—Ä–∫–∞ OK: {cvd:.1f}%")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CVD –¥–ª—è {symbol}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É


    # ========== –ü–†–û–í–ï–†–ö–ò –û–ë–™–Å–ú–ê (ASYNC) ==========

    async def _check_volume_simple(self, symbol: str, market_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—ë–º–∞ (async –≤–µ—Ä—Å–∏—è)"""
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò–∑ market_data
            current_volume = market_data.get("volume_1m", 0)
            avg_volume = market_data.get("avg_volume_24h", 0)

            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–∑ WebSocket –¥–∞–Ω–Ω—ã—Ö
            if current_volume == 0:
                current_volume = market_data.get("volume", 0)

            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ API (async)
            if current_volume == 0 and self.bot:
                current_volume = await self._get_current_volume(symbol)

            if avg_volume == 0 and self.bot:
                avg_volume = await self._get_average_volume(symbol, periods=20)

            if avg_volume == 0:
                logger.debug(f"   ‚ö†Ô∏è {symbol}: –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º = 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

            volume_ratio = current_volume / avg_volume

            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú VOLUME RATIO
            self.last_volume_ratio = volume_ratio

            logger.debug(
                f"   üìä {symbol} Volume: {current_volume:,.0f} / {avg_volume:,.0f} = {volume_ratio:.2f}x"
            )

            if volume_ratio < self.volume_multiplier:
                logger.debug(
                    f"   ‚ö†Ô∏è Volume {volume_ratio:.2f}x < –ø–æ—Ä–æ–≥ {self.volume_multiplier}x"
                )
                return False

            logger.debug(f"   ‚úÖ Volume –ø—Ä–æ–≤–µ—Ä–∫–∞ OK: {volume_ratio:.2f}x")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_volume_simple –¥–ª—è {symbol}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

    async def _get_current_volume(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º (async –≤–µ—Ä—Å–∏—è)"""
        try:
            if not self.bot:
                return 0

            # –ò–∑ market_data (WebSocket) - –±—ã—Å—Ç—Ä–µ–µ
            market_data = self.bot.market_data.get(symbol, {})
            volume = market_data.get("volume", 0)

            if volume > 0:
                return float(volume)

            # ‚úÖ Async fallback: –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ API
            try:
                candles = await self.bot.bybit_connector.get_klines(symbol, "1", 1)

                if candles and len(candles) > 0:
                    return float(candles[-1].get("volume", 0))
            except Exception as e:
                logger.debug(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è volume —á–µ—Ä–µ–∑ API: {e}")

            return 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_current_volume: {e}")
            return 0

    async def _get_average_volume(self, symbol: str, periods: int = 20) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º (async –≤–µ—Ä—Å–∏—è)"""
        try:
            if not self.bot:
                return 0

            # ‚úÖ Async –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
            candles = await self.bot.bybit_connector.get_klines(symbol, "1", periods)

            if not candles or len(candles) < periods:
                return 0

            volumes = [float(c.get("volume", 0)) for c in candles]
            avg = sum(volumes) / len(volumes)
            return avg

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_average_volume: {e}")
            return 0

    # ========== –ü–†–û–í–ï–†–ö–ò –°–í–ï–ß–ò (ASYNC) ==========

    async def _check_candle_simple(
        self, symbol: str, direction: str, market_data: Dict
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—á–∏ (async –≤–µ—Ä—Å–∏—è)"""
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò–∑ market_data
            last_candle = market_data.get("last_candle")

            if not last_candle and self.bot:
                # ‚úÖ Async fallback: –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ API
                try:
                    candles = await self.bot.bybit_connector.get_klines(symbol, "1", 2)

                    if candles and len(candles) >= 2:
                        last_candle = candles[-2]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è
                except Exception as e:
                    logger.debug(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ API: {e}")

            if not last_candle:
                logger.debug(f"   ‚ö†Ô∏è {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ—á—É
            open_price = float(last_candle.get("open", 0))
            close_price = float(last_candle.get("close", 0))
            candle_body = close_price - open_price

            is_bullish = candle_body > 0
            is_bearish = candle_body < 0

            candle_type = (
                "üü¢ Bullish"
                if is_bullish
                else ("üî¥ Bearish" if is_bearish else "‚ö™ Doji")
            )
            logger.debug(f"   üïØÔ∏è {symbol} –°–≤–µ—á–∞: {candle_type}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            if direction == "LONG" and not is_bullish:
                logger.debug(f"   ‚ö†Ô∏è LONG —Å–∏–≥–Ω–∞–ª, –Ω–æ —Å–≤–µ—á–∞ bearish")
                return False
            elif direction == "SHORT" and not is_bearish:
                logger.debug(f"   ‚ö†Ô∏è SHORT —Å–∏–≥–Ω–∞–ª, –Ω–æ —Å–≤–µ—á–∞ bullish")
                return False

            logger.debug(f"   ‚úÖ Candle –ø—Ä–æ–≤–µ—Ä–∫–∞ OK")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_candle_simple –¥–ª—è {symbol}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

    # ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ==========

    async def _check_large_trades(
        self, signal: Dict, market_data: Dict, symbol: str
    ) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (Large Trades)"""
        try:
            large_trades = market_data.get("large_trades", [])
            if not large_trades:
                return (False, "No large trades data")

            direction = signal.get("direction", "LONG")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å BUY/SELL large trades
            buy_value = sum(
                t["value"]
                for t in large_trades
                if t.get("side") == "BUY"
                and t.get("value", 0) >= self.min_large_trade_value
            )
            sell_value = sum(
                t["value"]
                for t in large_trades
                if t.get("side") == "SELL"
                and t.get("value", 0) >= self.min_large_trade_value
            )

            if direction == "LONG" and buy_value > sell_value * 1.5:
                logger.info(
                    f"‚úÖ {symbol}: Large trades –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç LONG "
                    f"(BUY: ${buy_value:,.0f} vs SELL: ${sell_value:,.0f})"
                )
                return (True, f"Large trades support LONG")
            elif direction == "SHORT" and sell_value > buy_value * 1.5:
                logger.info(
                    f"‚úÖ {symbol}: Large trades –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç SHORT "
                    f"(SELL: ${sell_value:,.0f} vs BUY: ${buy_value:,.0f})"
                )
                return (True, f"Large trades support SHORT")
            else:
                return (False, "Large trades neutral or conflicting")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_large_trades: {e}")
            return (False, "Large trades check error")

    def _get_adaptive_cvd_threshold(self, scenario: str, direction: str) -> float:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ CVD –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è

        Args:
            scenario: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (Impulse, Reversal, Range –∏ —Ç.–¥.)
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (LONG/SHORT)

        Returns:
            float: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ CVD –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, -30.0 –¥–ª—è LONG)
        """

        if not self.adaptive_mode:
            # –ï—Å–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
            return 30.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ 30%

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_upper = scenario.upper()

        # –î–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥
        if any(x in scenario_upper for x in ["REVERSAL", "COUNTER", "DEAL_REVERSAL"]):
            threshold = 50.0  # 50% –¥–æ–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–≤
            logger.debug(
                f"   üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CVD –ø–æ—Ä–æ–≥ –¥–ª—è {scenario}: ¬±{threshold}% (Reversal)"
            )
            return threshold

        # –î–ª—è –∏–º–ø—É–ª—å—Å–Ω—ã—Ö - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π
        elif any(x in scenario_upper for x in ["IMPULSE", "BREAKOUT", "DEAL"]):
            threshold = 10.0  # 10% –¥–æ–ø—É—Å–∫ –¥–ª—è –∏–º–ø—É–ª—å—Å–æ–≤
            logger.debug(
                f"   ‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CVD –ø–æ—Ä–æ–≥ –¥–ª—è {scenario}: ¬±{threshold}% (Impulse)"
            )
            return threshold

        # –î–ª—è Range - —Å—Ä–µ–¥–Ω–∏–π
        elif any(x in scenario_upper for x in ["RANGE", "CONSOLIDATION"]):
            threshold = 30.0  # 30% –¥–æ–ø—É—Å–∫ –¥–ª—è range
            logger.debug(
                f"   ‚ÜîÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CVD –ø–æ—Ä–æ–≥ –¥–ª—è {scenario}: ¬±{threshold}% (Range)"
            )
            return threshold

        # –î–ª—è Squeeze - —É—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        elif any(x in scenario_upper for x in ["SQUEEZE", "LIQUIDATION"]):
            threshold = 40.0  # 40% –¥–æ–ø—É—Å–∫ –¥–ª—è squeeze
            logger.debug(
                f"   üí• –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CVD –ø–æ—Ä–æ–≥ –¥–ª—è {scenario}: ¬±{threshold}% (Squeeze)"
            )
            return threshold

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        threshold = 30.0
        logger.debug(
            f"   üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CVD –ø–æ—Ä–æ–≥ –¥–ª—è {scenario}: ¬±{threshold}% (Default)"
        )
        return threshold


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["ConfirmFilter"]
