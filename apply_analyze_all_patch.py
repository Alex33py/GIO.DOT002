# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ –¥–ª—è /analyze_batching ALL
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –û–î–ò–ù –†–ê–ó –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(__file__))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è /analyze_batching ALL")
    print("=" * 60)

    # –ü–æ–∏—Å–∫ main.py
    main_files = ['main.py', 'bot.py', 'gio_bot.py']
    main_file = None

    for filename in main_files:
        if os.path.exists(filename):
            main_file = filename
            break

    if not main_file:
        print("‚ùå –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é:")
        main_file = input("–ü—É—Ç—å –∫ main.py: ").strip()

        if not os.path.exists(main_file):
            print("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False

    print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {main_file}")

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    with open(main_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω –ª–∏ —É–∂–µ –ø–∞—Ç—á
    if 'apply_analyze_batching_all_patch' in content:
        print("‚úÖ –ü–∞—Ç—á —É–∂–µ –ø—Ä–∏–º–µ–Ω—ë–Ω!")
        return True

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_file = main_file + '.backup_analyze_all'
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
    import_line = "\nfrom patches.analyze_batching_all_patch import apply_analyze_batching_all_patch\n"

    # –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
    import re
    import_pattern = r'(^import\s+\w+|^from\s+\w+)'
    matches = list(re.finditer(import_pattern, content, re.MULTILINE))

    if matches:
        last_import_end = matches[-1].end()
        newline_pos = content.find('\n', last_import_end)
        if newline_pos != -1:
            content = content[:newline_pos+1] + import_line + content[newline_pos+1:]
    else:
        content = import_line + content

    # –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram_bot_handler)
    patch_code = '''
        # ========== –ü–ê–¢–ß: /analyze_batching ALL ==========
        apply_analyze_batching_all_patch(self)
        # ==================================================
'''

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å telegram_bot_handler
    pattern = r'(self\.telegram_bot_handler\s*=.*?\n)'
    match = re.search(pattern, content)

    if match:
        insert_pos = match.end()
        content = content[:insert_pos] + patch_code + content[insert_pos:]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(content)

        print(f"‚úÖ –§–∞–π–ª {main_file} –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        print("\n‚úÖ –ü–ê–¢–ß –ü–†–ò–ú–ï–ù–Å–ù –£–°–ü–ï–®–ù–û!")
        print("\nüìã –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:")
        print("   /analyze_batching          - –∞–Ω–∞–ª–∏–∑ BTCUSDT")
        print("   /analyze_batching ETHUSDT  - –∞–Ω–∞–ª–∏–∑ ETHUSDT")
        print("   /analyze_batching ALL      - –∞–Ω–∞–ª–∏–∑ –í–°–ï–• –ø–∞—Ä!")
        print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ __init__ –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ telegram_bot_handler:")
        print(patch_code)
        return False


if __name__ == "__main__":
    main()
