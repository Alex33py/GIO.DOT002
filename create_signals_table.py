import sqlite3
import os

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "data/gio_crypto_bot.db"

def create_signals_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É signals –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {DB_PATH}")

        # –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS signals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                symbol TEXT NOT NULL,
                signal_type TEXT NOT NULL,
                direction TEXT,
                confidence REAL,
                price REAL,
                entry_price REAL,
                stop_loss REAL,
                take_profit REAL,
                status TEXT DEFAULT 'active',
                scenario_id TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                closed_at DATETIME,
                profit_loss REAL,
                roi_percent REAL,
                notes TEXT
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'signals' —Å–æ–∑–¥–∞–Ω–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü–û–¢–û–ú —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π)
        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_symbol ON signals(symbol)")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_signals_symbol —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_signals_symbol: {e}")

        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_status ON signals(status)")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_signals_status —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_signals_status: {e}")

        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_timestamp ON signals(timestamp)")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_signals_timestamp —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_signals_timestamp: {e}")

        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_type ON signals(signal_type)")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_signals_type —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å idx_signals_type: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='signals'")
        if cursor.fetchone():
            print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'signals' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("PRAGMA table_info(signals)")
            columns = cursor.fetchall()
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'signals':")
            for col in columns:
                print(f"   - {col[1]} ({col[2]})")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM signals")
            count = cursor.fetchone()[0]
            print(f"\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")

        conn.close()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ signals —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("   python main.py")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_signals_table()
