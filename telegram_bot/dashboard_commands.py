#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard Commands - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—à–±–æ—Ä–¥–∞–º–∏
/market - –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä—ã–Ω–∫–∞
"""

import re
from typing import Optional
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
from config.settings import logger, TRACKED_SYMBOLS


class DashboardCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–∞—à–±–æ—Ä–¥–æ–≤"""

    def __init__(self, bot: AsyncTeleBot, bot_instance):
        """
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä AsyncTeleBot
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot
        """
        self.telegram_bot = bot
        self.bot = bot_instance
        self.register_handlers()
        logger.info("‚úÖ DashboardCommands –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.telegram_bot.register_message_handler(
            self.market_command, commands=["market"], pass_bot=True
        )
        logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /market")

    async def market_command(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
            /market - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è BTCUSDT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            /market ETHUSDT - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ETHUSDT
            /market eth - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ETHUSDT (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            symbol = self._extract_symbol(message.text)

            logger.info(
                f"üìä /market –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è {symbol} (user: {message.from_user.id})"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MarketDashboard
            if not hasattr(self.bot, "market_dashboard"):
                await self.telegram_bot.send_message(
                    message.chat.id,
                    "‚ùå Market Dashboard –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..." —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading_msg = await self.telegram_bot.send_message(
                message.chat.id, f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ dashboard –¥–ª—è {symbol}..."
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º dashboard
            try:
                dashboard_text = await self.bot.market_dashboard.generate_dashboard(
                    symbol
                )

                # –£–¥–∞–ª—è–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º dashboard
                await self.telegram_bot.delete_message(
                    message.chat.id, loading_msg.message_id
                )

                await self.telegram_bot.send_message(
                    message.chat.id, dashboard_text, parse_mode="Markdown"
                )

                logger.info(
                    f"‚úÖ Dashboard –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (user: {message.from_user.id})"
                )

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dashboard –¥–ª—è {symbol}: {e}", exc_info=True
                )

                await self.telegram_bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dashboard –¥–ª—è {symbol}:\n{str(e)}",
                    message.chat.id,
                    loading_msg.message_id,
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /market: {e}", exc_info=True)
            await self.telegram_bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            )

    def _extract_symbol(self, text: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã

        Args:
            text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/market ETHUSDT" –∏–ª–∏ "/market eth")

        Returns:
            –°–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "BTCUSDT"
        """
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /market
        text = text.replace("/market", "").strip()

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º BTCUSDT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not text:
            return "BTCUSDT"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        symbol = text.upper()

        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ USDT –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not symbol.endswith("USDT"):
            symbol = f"{symbol}USDT"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        if symbol not in TRACKED_SYMBOLS:
            logger.warning(
                f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –≤ TRACKED_SYMBOLS, "
                f"–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)"
            )

        return symbol


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["DashboardCommands"]
