# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä ROI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import aiosqlite
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from config.settings import logger, DATABASE_PATH


# ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ó–î–ï–°–¨
async def init_wal_mode():
    """–í–∫–ª—é—á–µ–Ω–∏–µ WAL mode –¥–ª—è SQLite (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute("PRAGMA journal_mode=WAL")
            await db.execute("PRAGMA busy_timeout=30000")  # 30 —Å–µ–∫—É–Ω–¥
            await db.commit()
        logger.info("‚úÖ SQLite WAL mode –≤–∫–ª—é—á—ë–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è WAL mode: {e}")


@dataclass
class ROIMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ ROI –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""

    signal_id: str
    symbol: str
    direction: str
    entry_price: float
    stop_loss: float
    tp1: float
    tp2: float
    tp3: float
    tp1_hit: bool = False
    tp2_hit: bool = False
    tp3_hit: bool = False
    sl_hit: bool = False
    current_roi: float = 0.0
    status: str = "active"
    entry_time: str = field(default_factory=lambda: datetime.now().isoformat())
    close_time: Optional[str] = None
    fills: List[Dict] = field(default_factory=list)
    quality_score: float = 0.0


class ROITracker:
    """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä ROI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    def __init__(self, bot, telegram_handler=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ROI —Ç—Ä–µ–∫–µ—Ä–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω"""
        self.bot = bot  # ‚Üê –î–æ—Å—Ç—É–ø –∫ –±–∏—Ä–∂–∞–º (–û–ë–û–í'–Ø–ó–ö–û–í–û!)
        self.active_signals: Dict[str, ROIMetrics] = {}
        self.completed_signals: List[ROIMetrics] = []
        self.telegram = telegram_handler

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
        self.tp1_percentage = 0.25
        self.tp2_percentage = 0.50
        self.tp3_percentage = 0.25

        # === –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù ===
        self.price_cache: Dict[str, Dict] = {}
        self.cache_ttl = 2  # –ö–µ—à –Ω–∞ 2 —Å–µ–∫—É–Ω–¥–∏

        # –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.is_running = False
        self.is_shutting_down = False

        # –ó–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitor_tasks: Dict[str, asyncio.Task] = {}
        self.price_updater_task: Optional[asyncio.Task] = None

        # ‚úÖ –í–∫–ª—é—á–∞–µ–º WAL mode
        asyncio.create_task(init_wal_mode())

        logger.info(
            "‚úÖ ROITracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–µ–π, Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω"
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ ROI Tracker —Å —Ñ–æ–Ω–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω"""
        self.is_running = True
        self.is_shutting_down = False

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –æ–±–Ω–æ–≤–ª—è—Ç–µ–ª—å —Ü–µ–Ω
        self.price_updater_task = asyncio.create_task(self._price_updater())

        logger.info("‚úÖ ROI Tracker started with price caching")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ROI Tracker"""
        logger.info("üõë Stopping ROI Tracker...")

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥–∏
        self.is_shutting_down = True
        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å price updater
        if self.price_updater_task and not self.price_updater_task.done():
            self.price_updater_task.cancel()
            try:
                await self.price_updater_task
            except asyncio.CancelledError:
                pass

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
        for signal_id, task in list(self.monitor_tasks.items()):
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        self.monitor_tasks.clear()
        self.price_cache.clear()

        logger.info("‚úÖ ROI Tracker stopped")

    async def _price_updater(self):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã"""
        logger.info("üîÑ Price updater started")

        while self.is_running and not self.is_shutting_down:
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                symbols = list(
                    set(metrics.symbol for metrics in self.active_signals.values())
                )

                if not symbols:
                    await asyncio.sleep(5)
                    continue

                # –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                update_count = 0
                for symbol in symbols:
                    price = await self._fetch_price(symbol)
                    if price > 0:
                        # –û–±–Ω–æ–≤–∏—Ç—å –ö–ï–®
                        self.price_cache[symbol] = {
                            "price": price,
                            "timestamp": datetime.now(),
                        }

                        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å current_price –≤ –ë–î
                        await self._update_current_price_in_db(symbol, price)

                        update_count += 1

                if update_count > 0:
                    logger.debug(
                        f"üí∞ Prices updated for {update_count}/{len(symbols)} symbols"
                    )

                # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)

            except asyncio.CancelledError:
                break
            except Exception as e:
                if not self.is_shutting_down:
                    logger.error(f"‚ùå Price updater error: {e}")
                await asyncio.sleep(5)

        logger.info("üõë Price updater stopped")

    async def _fetch_price(self, symbol: str) -> float:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ –±—ñ—Ä–∂—ñ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ price_updater)"""
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ Bybit
            if hasattr(self.bot, "bybit_connector") and self.bot.bybit_connector:
                ticker = await self.bot.bybit_connector.get_ticker(symbol)
                if ticker:
                    price = float(
                        ticker.get("lastPrice", 0) or ticker.get("last_price", 0)
                    )
                    if price > 0:
                        return price

            # Fallback –Ω–∞ Binance
            if hasattr(self.bot, "binance_connector") and self.bot.binance_connector:
                ticker = await self.bot.binance_connector.get_ticker(symbol)
                if ticker and "price" in ticker:
                    price = float(ticker["price"])
                    if price > 0:
                        return price

            return 0.0

        except Exception as e:
            if not self.is_shutting_down:
                logger.debug(f"‚ö†Ô∏è Fetch price error {symbol}: {e}")
            return 0.0

    async def _update_current_price_in_db(self, symbol: str, current_price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_price –ò ROI –≤ –ë–î –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏–º–≤–æ–ª–∞"""
        max_retries = 3
        retry_delay = 0.1

        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(DATABASE_PATH, timeout=10.0) as db:
                    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    cursor = await db.execute(
                        """
                        SELECT id, direction, entry_price, stop_loss
                        FROM signals
                        WHERE symbol = ? AND status = 'active'
                    """,
                        (symbol,),
                    )

                    signals = await cursor.fetchall()

                    # –û–±–Ω–æ–≤–∏—Ç—å current_price –∏ ROI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    for sig_id, direction, entry_price, stop_loss in signals:
                        if entry_price == 0 or entry_price is None:
                            continue

                        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ROI
                        if direction.upper() == "LONG":
                            roi = ((current_price - entry_price) / entry_price) * 100
                        else:  # SHORT
                            roi = ((entry_price - current_price) / entry_price) * 100

                        # –û–±–Ω–æ–≤–∏—Ç—å current_price –∏ roi
                        await db.execute(
                            """
                            UPDATE signals
                            SET current_price = ?, roi = ?
                            WHERE id = ?
                        """,
                            (current_price, roi, sig_id),
                        )

                    await db.commit()

                    # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                    if attempt == 0 and len(signals) > 0:
                        logger.debug(
                            f"‚úÖ current_price –∏ ROI –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {symbol}: ${current_price:.4f} ({len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤)"
                        )

                    return

            except aiosqlite.OperationalError as e:
                if "database is locked" in str(e) and attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay * (2**attempt))
                    continue
                else:
                    if not self.is_shutting_down:
                        logger.error(
                            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è current_price –≤ –ë–î –¥–ª—è {symbol}: {e}"
                        )
                    break

            except Exception as e:
                if not self.is_shutting_down:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è current_price –≤ –ë–î –¥–ª—è {symbol}: {e}"
                    )
                break

    async def register_signal(self, signal: Dict) -> str:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        signal_id = f"{signal['symbol']}_{int(datetime.now().timestamp())}"

        metrics = ROIMetrics(
            signal_id=signal_id,
            symbol=signal["symbol"],
            direction=signal["direction"],
            entry_price=signal["entry_price"],
            stop_loss=signal.get("sl") or signal.get("stop_loss"),
            tp1=signal.get("tp1", 0),
            tp2=signal.get("tp2", 0),
            tp3=signal.get("tp3", 0),
            quality_score=signal.get("quality_score", 0),
        )

        self.active_signals[signal_id] = metrics
        await self._save_signal_to_db(metrics)

        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª {signal_id} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ROI")
        return signal_id

    async def update_signal_price(
        self, signal_id: str, current_price: float
    ) -> Optional[Dict]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL"""
        if signal_id not in self.active_signals:
            return None

        metrics = self.active_signals[signal_id]
        event = None

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∏–≤–æ–¥–∏–º direction –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        direction = metrics.direction.lower()

        if direction == "long":
            if not metrics.tp3_hit and current_price >= metrics.tp3:
                metrics.tp3_hit = True
                event = await self._handle_tp_hit(metrics, "tp3", current_price)
            elif not metrics.tp2_hit and current_price >= metrics.tp2:
                metrics.tp2_hit = True
                event = await self._handle_tp_hit(metrics, "tp2", current_price)
            elif not metrics.tp1_hit and current_price >= metrics.tp1:
                metrics.tp1_hit = True
                event = await self._handle_tp_hit(metrics, "tp1", current_price)
            elif not metrics.sl_hit and current_price <= metrics.stop_loss:
                metrics.sl_hit = True
                event = await self._handle_sl_hit(metrics, current_price)

        elif direction == "short":
            if not metrics.tp3_hit and current_price <= metrics.tp3:
                metrics.tp3_hit = True
                event = await self._handle_tp_hit(metrics, "tp3", current_price)
            elif not metrics.tp2_hit and current_price <= metrics.tp2:
                metrics.tp2_hit = True
                event = await self._handle_tp_hit(metrics, "tp2", current_price)
            elif not metrics.tp1_hit and current_price <= metrics.tp1:
                metrics.tp1_hit = True
                event = await self._handle_tp_hit(metrics, "tp1", current_price)
            elif not metrics.sl_hit and current_price >= metrics.stop_loss:
                metrics.sl_hit = True
                event = await self._handle_sl_hit(metrics, current_price)

        metrics.current_roi = await self._calculate_current_roi(metrics, current_price)
        await self._update_signal_in_db(metrics)

        return event

    async def _handle_tp_hit(
        self, metrics: ROIMetrics, tp_level: str, price: float
    ) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit"""
        if tp_level == "tp1":
            close_percent = self.tp1_percentage
        elif tp_level == "tp2":
            close_percent = self.tp2_percentage
        else:
            close_percent = self.tp3_percentage

        if metrics.entry_price == 0:
            logger.error(f"‚ùå Entry price = 0 –¥–ª—è {metrics.symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º TP")
            return {
                "type": "error",
                "signal_id": metrics.signal_id,
                "reason": "entry_price_zero",
            }

        # –ü—Ä–∏–≤–æ–¥–∏–º direction –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        direction = metrics.direction.lower()

        if direction == "long":
            profit_percent = ((price - metrics.entry_price) / metrics.entry_price) * 100
        else:  # short
            profit_percent = ((metrics.entry_price - price) / metrics.entry_price) * 100

        weighted_profit = profit_percent * close_percent

        fill = {
            "level": tp_level,
            "price": price,
            "percentage": close_percent,
            "profit_percent": profit_percent,
            "weighted_profit": weighted_profit,
            "timestamp": datetime.now().isoformat(),
        }

        metrics.fills.append(fill)

        logger.info(
            f"‚úÖ {tp_level.upper()} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {metrics.signal_id}! –¶–µ–Ω–∞: {price}, –ü—Ä–∏–±—ã–ª—å: +{profit_percent:.2f}% (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è: +{weighted_profit:.2f}%)"
        )

        await self._send_tp_notification(metrics, tp_level, price, profit_percent)

        if tp_level == "tp3" or (
            metrics.tp1_hit and metrics.tp2_hit and metrics.tp3_hit
        ):
            await self._close_signal(metrics, "completed")

        return {
            "type": "tp_hit",
            "signal_id": metrics.signal_id,
            "level": tp_level,
            "price": price,
            "profit": weighted_profit,
        }

    async def _handle_sl_hit(self, metrics: ROIMetrics, price: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Stop Loss"""

        if metrics.entry_price == 0:
            logger.error(f"‚ùå Entry price = 0 –¥–ª—è {metrics.symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º SL")
            return {
                "type": "error",
                "signal_id": metrics.signal_id,
                "reason": "entry_price_zero",
            }

        # –ü—Ä–∏–≤–æ–¥–∏–º direction –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        direction = metrics.direction.lower()

        if direction == "long":
            loss_percent = ((price - metrics.entry_price) / metrics.entry_price) * 100
        else:  # short
            loss_percent = ((metrics.entry_price - price) / metrics.entry_price) * 100

        closed_percent = sum(
            [
                self.tp1_percentage if metrics.tp1_hit else 0,
                self.tp2_percentage if metrics.tp2_hit else 0,
                self.tp3_percentage if metrics.tp3_hit else 0,
            ]
        )

        remaining_percent = 1.0 - closed_percent
        weighted_loss = loss_percent * remaining_percent

        fill = {
            "level": "stop_loss",
            "price": price,
            "percentage": remaining_percent,
            "profit_percent": loss_percent,
            "weighted_profit": weighted_loss,
            "timestamp": datetime.now().isoformat(),
        }

        metrics.fills.append(fill)

        logger.warning(
            f"üõë STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {metrics.signal_id}! –¶–µ–Ω–∞: {price}, –£–±—ã—Ç–æ–∫: {weighted_loss:.2f}%"
        )

        await self._send_stop_notification(metrics, price, weighted_loss)
        await self._close_signal(metrics, "stopped")

        return {
            "type": "sl_hit",
            "signal_id": metrics.signal_id,
            "price": price,
            "loss": weighted_loss,
        }

    async def _send_tp_notification(
        self, metrics: ROIMetrics, tp_level: str, price: float, profit_percent: float
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP"""
        if not self.telegram:
            return

        try:
            is_risky = metrics.quality_score < 50

            if tp_level == "tp1":
                if is_risky:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ (RISKY ENTRY) üéØ\n\n"
                        f"‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!\n\n"
                        f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                        f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                        f"üìà Current: ${price:.2f}\n"
                        f"üéØ TP1: ${metrics.tp1:.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                    )
                else:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                        f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                        f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                        f"üìà Current: ${price:.2f}\n"
                        f"üéØ TP1: ${metrics.tp1:.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                    )
            elif tp_level == "tp2":
                message = (
                    f"üéØ TP2 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                    f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                    f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                    f"üìà Current: ${price:.2f}\n"
                    f"üéØ TP2: ${metrics.tp2:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                    f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP3\n"
                    f"   ‚Ä¢ –°—Ç–æ–ø —É–∂–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ"
                )
            else:
                message = (
                    f"üéØ TP3 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                    f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                    f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                    f"üìà Current: ${price:.2f}\n"
                    f"üéØ TP3: ${metrics.tp3:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –¢—Ä–µ–π–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ (trailing stop)\n"
                    f"   ‚Ä¢ –ò–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                    f"   ‚Ä¢ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞! üéâ"
                )

            await self.telegram.send_alert(message)
            logger.info(
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {tp_level.upper()} –¥–ª—è {metrics.symbol}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TP: {e}")

    async def _send_stop_notification(
        self, metrics: ROIMetrics, price: float, loss_percent: float
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø–∞"""
        if not self.telegram:
            return

        try:
            message = (
                f"üõë –°–¢–û–ü –ê–ö–¢–ò–í–ò–†–û–í–ê–ù üõë\n\n"
                f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                f"üìâ Current: ${price:.2f}\n"
                f"üõë Stop Loss: ${metrics.stop_loss:.2f}\n"
                f"üí∏ Loss: {loss_percent:.2f}%\n\n"
                f"‚ùå –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"   ‚Ä¢ –£–±—ã—Ç–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
                f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã\n"
                f"   ‚Ä¢ –ñ–¥—ë–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ STOP –¥–ª—è {metrics.symbol}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è STOP: {e}")

    async def _calculate_current_roi(
        self, metrics: ROIMetrics, current_price: float
    ) -> float:
        """–†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ ROI"""
        closed_roi = sum([fill["weighted_profit"] for fill in metrics.fills])

        closed_percent = sum(
            [
                self.tp1_percentage if metrics.tp1_hit else 0,
                self.tp2_percentage if metrics.tp2_hit else 0,
                self.tp3_percentage if metrics.tp3_hit else 0,
            ]
        )

        remaining_percent = 1.0 - closed_percent

        if remaining_percent > 0:

            if metrics.entry_price == 0:
                logger.warning(
                    f"‚ö†Ô∏è Entry price = 0 –¥–ª—è {metrics.symbol}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º closed_roi = {closed_roi:.2f}%"
                )
                return closed_roi

            # –ü—Ä–∏–≤–æ–¥–∏–º direction –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            direction = metrics.direction.lower()

            if direction == "long":
                unrealized_profit = (
                    (current_price - metrics.entry_price) / metrics.entry_price
                ) * 100
            else:  # short
                unrealized_profit = (
                    (metrics.entry_price - current_price) / metrics.entry_price
                ) * 100

            unrealized_roi = unrealized_profit * remaining_percent
        else:
            unrealized_roi = 0.0

        return closed_roi + unrealized_roi

    async def _close_signal(self, metrics: ROIMetrics, status: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        metrics.status = status
        metrics.close_time = datetime.now().isoformat()

        final_roi = sum([fill["weighted_profit"] for fill in metrics.fills])
        metrics.current_roi = final_roi

        self.completed_signals.append(metrics)
        del self.active_signals[metrics.signal_id]

        await self._update_signal_in_db(metrics, final=True)

        logger.info(
            f"üèÅ –°–∏–≥–Ω–∞–ª {metrics.signal_id} –∑–∞–∫—Ä—ã—Ç. –°—Ç–∞—Ç—É—Å: {status}, –§–∏–Ω–∞–ª—å–Ω—ã–π ROI: {final_roi:+.2f}%"
        )

    async def get_statistics(self, days: int = 30) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ROI"""
        cutoff_date = datetime.now() - timedelta(days=days)

        recent_signals = [
            s
            for s in self.completed_signals
            if s.close_time and datetime.fromisoformat(s.close_time) > cutoff_date
        ]

        if not recent_signals:
            return {
                "total_signals": 0,
                "win_rate": 0.0,
                "average_roi": 0.0,
                "total_roi": 0.0,
            }

        total = len(recent_signals)
        wins = len([s for s in recent_signals if s.current_roi > 0])
        losses = len([s for s in recent_signals if s.current_roi <= 0])

        win_rate = (wins / total) * 100 if total > 0 else 0
        average_roi = sum([s.current_roi for s in recent_signals]) / total
        total_roi = sum([s.current_roi for s in recent_signals])

        return {
            "total_signals": total,
            "wins": wins,
            "losses": losses,
            "win_rate": win_rate,
            "average_roi": average_roi,
            "total_roi": total_roi,
            "period_days": days,
        }

    async def _save_signal_to_db(self, metrics: ROIMetrics):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                await db.execute(
                    """
                    INSERT INTO signals (
                        symbol, direction, entry_price, sl,
                        tp1, tp2, tp3, status, timestamp
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        metrics.symbol,
                        metrics.direction,
                        metrics.entry_price,
                        metrics.stop_loss,
                        metrics.tp1,
                        metrics.tp2,
                        metrics.tp3,
                        metrics.status,
                        metrics.entry_time,
                    ),
                )
                await db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")

    async def _update_signal_in_db(self, metrics: ROIMetrics, final: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î —Å retry –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        max_retries = 10
        retry_delay = 0.2

        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(DATABASE_PATH, timeout=30.0) as db:
                    if final:
                        await db.execute(
                            """
                            UPDATE signals
                            SET status = ?, roi = ?, close_time = ?
                            WHERE symbol = ? AND timestamp = ?
                        """,
                            (
                                metrics.status,
                                metrics.current_roi,
                                metrics.close_time,
                                metrics.symbol,
                                metrics.entry_time,
                            ),
                        )
                    else:
                        await db.execute(
                            """
                            UPDATE signals
                            SET roi = ?, tp1_hit = ?, tp2_hit = ?, tp3_hit = ?, sl_hit = ?
                            WHERE symbol = ? AND timestamp = ?
                        """,
                            (
                                metrics.current_roi,
                                metrics.tp1_hit,
                                metrics.tp2_hit,
                                metrics.tp3_hit,
                                metrics.sl_hit,
                                metrics.symbol,
                                metrics.entry_time,
                            ),
                        )
                    await db.commit()
                    return

            except aiosqlite.OperationalError as e:
                if "database is locked" in str(e) and attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay * (2**attempt))
                    logger.warning(
                        f"‚ö†Ô∏è –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥—ë–º {retry_delay * (2 ** attempt):.2f}s"
                    )
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")
                    break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")
                break

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ Real-Time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Real-Time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ROI...")

        await self._load_active_signals_from_db()

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        for signal_id, metrics in self.active_signals.items():
            task = asyncio.create_task(self._monitor_signal(signal_id))
            self.monitor_tasks[signal_id] = task  # ‚Üê –ó–ë–ï–†–ï–ì–¢–ò TASK!

        logger.info(
            f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self.active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        )

    async def _monitor_signal(self, signal_id: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            while signal_id in self.active_signals and not self.is_shutting_down:
                metrics = self.active_signals[signal_id]
                symbol = metrics.symbol

                try:
                    # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ price_cache –° –ü–†–û–í–ï–†–ö–û–ô
                    cached_data = self.price_cache.get(symbol)

                    if not cached_data or not isinstance(cached_data, dict):
                        # –ö–µ—à –ø—É—Å—Ç–æ–π - –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        await asyncio.sleep(5)
                        continue

                    current_price = cached_data.get("price")

                    if not current_price or current_price <= 0:
                        # –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω—ã - –∂–¥—ë–º
                        await asyncio.sleep(5)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TP/SL
                    event = await self.update_signal_price(signal_id, current_price)

                    # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ
                    if event:
                        if event["type"] == "tp_hit":
                            logger.info(
                                f"üéØ {event['level'].upper()} reached: {signal_id}"
                            )
                        elif event["type"] == "sl_hit":
                            logger.warning(f"üö® STOP LOSS triggered: {signal_id}")

                except Exception as e:
                    if not self.is_shutting_down:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {signal_id}: {e}")

                # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(5)

        except asyncio.CancelledError:
            logger.info(f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {signal_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            if not self.is_shutting_down:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {signal_id}: {e}")

    async def _get_current_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∑ –∫–µ—à—É (–ë–ï–ó API –∑–∞–ø–∏—Ç—É!)"""

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–µ shutdown
        if self.is_shutting_down:
            return 0.0

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
        cached = self.price_cache.get(symbol)

        if cached:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∫–µ—à
            age = (datetime.now() - cached["timestamp"]).total_seconds()

            if age < self.cache_ttl:
                # –ö–µ—à –∞–∫—Ç—É–∞–ª—å–Ω–∏–π - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ë–ï–ó –ª–æ–≥—É–≤–∞–Ω–Ω—è
                return cached["price"]

        # –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 0 (price_updater –æ–Ω–æ–≤–∏—Ç—å)
        return 0.0

    async def _load_active_signals_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î"""
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                cursor = await db.execute(
                    """
                    SELECT id, symbol, direction, entry_price, sl,
                        tp1, tp2, tp3, status, timestamp
                    FROM signals
                    WHERE status = 'active'
                    ORDER BY id DESC
                """
                )

                rows = await cursor.fetchall()

                for row in rows:
                    signal_id = f"{row[1]}_{row[0]}"

                    if row[3] == 0 or row[3] is None:
                        logger.warning(
                            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª {signal_id}: entry_price = {row[3]}"
                        )
                        continue

                    metrics = ROIMetrics(
                        signal_id=signal_id,
                        symbol=row[1],
                        direction=row[2],
                        entry_price=row[3],
                        stop_loss=row[4],
                        tp1=row[5],
                        tp2=row[6],
                        tp3=row[7],
                        status=row[8],
                        entry_time=row[9] or datetime.now().isoformat(),
                    )

                    self.active_signals[signal_id] = metrics
                logger.info(
                    f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
            import traceback

            logger.error(traceback.format_exc())

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ROI...")
        self.active_signals.clear()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ROI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
