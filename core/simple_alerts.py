#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Alerts - –ü—Ä–æ—Å—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã (–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏, –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–æ–≤, –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã)
–í–ï–†–°–ò–Ø –° –ê–ù–¢–ò–°–ü–ê–ú–û–ú
"""

from typing import Dict, List
from datetime import datetime
import time
from config.settings import logger


class SimpleAlertsSystem:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, bot_instance):
        """
        Args:
            bot_instance: –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot
        """
        self.bot = bot_instance

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ (–£–í–ï–õ–ò–ß–ï–ù–´ –î–õ–Ø –ê–ù–¢–ò–°–ü–ê–ú–ê!)
        self.volume_surge_threshold = 3.0  # 3x
        self.liquidation_threshold = 10_000_000  # $10M
        self.imbalance_threshold = 0.75  # 75%

        # –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        self.recent_alerts = {}
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        self.max_alerts_per_hour = 20
        self.alert_history = []  # [(timestamp, alert_type, symbol), ...]

        logger.info("‚úÖ SimpleAlertsSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ê–ù–¢–ò–°–ü–ê–ú)")
        logger.info(f"   üìä Volume Surge: ‚â•{self.volume_surge_threshold}x")
        logger.info(f"   üí∞ Liquidations: ‚â•${self.liquidation_threshold:,.0f}")
        logger.info(f"   ‚öñÔ∏è Imbalance: ‚â•{self.imbalance_threshold*100:.0f}%")


    async def check_alerts(self, symbol: str, market_data: Dict):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            market_data: –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä—ë–º–∞
            await self._check_volume_surge(symbol, market_data)

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            await self._check_large_liquidations(symbol, market_data)

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤
            await self._check_order_imbalance(symbol, market_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_alerts: {e}")


    async def _check_volume_surge(self, symbol: str, market_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞"""
        try:
            current_volume = market_data.get("volume_24h", 0)
            avg_volume = market_data.get("avg_volume", current_volume)

            if avg_volume == 0:
                return

            volume_ratio = current_volume / avg_volume

            if volume_ratio >= self.volume_surge_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
                if self._should_send_alert(symbol, "volume_surge"):
                    await self._send_alert(
                        alert_type="volume_surge",
                        symbol=symbol,
                        message=(
                            f"‚ö° *–í–°–ü–õ–ï–°–ö –û–ë–™–Å–ú–ê {symbol}*\n\n"
                            f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {current_volume:,.0f}\n"
                            f"üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {avg_volume:,.0f}\n"
                            f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: *{volume_ratio:.2f}x*\n\n"
                            f"üí° –í–æ–∑–º–æ–∂–Ω–∞ —Å–∏–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å!"
                        )
                    )

                    self._record_alert(symbol, "volume_surge")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_volume_surge: {e}")


    async def _check_large_liquidations(self, symbol: str, market_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            liquidations = market_data.get("liquidations", {})

            long_liquidations = liquidations.get("long", 0)
            short_liquidations = liquidations.get("short", 0)
            total_liquidations = long_liquidations + short_liquidations

            if total_liquidations >= self.liquidation_threshold:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if long_liquidations > short_liquidations * 2:
                    direction = "LONG"
                    emoji = "üìâ"
                elif short_liquidations > long_liquidations * 2:
                    direction = "SHORT"
                    emoji = "üìà"
                else:
                    direction = "MIXED"
                    emoji = "‚öñÔ∏è"

                if self._should_send_alert(symbol, "liquidations"):
                    await self._send_alert(
                        alert_type="liquidations",
                        symbol=symbol,
                        message=(
                            f"{emoji} *–ö–†–£–ü–ù–´–ï –õ–ò–ö–í–ò–î–ê–¶–ò–ò {symbol}*\n\n"
                            f"üí∞ –í—Å–µ–≥–æ: ${total_liquidations:,.0f}\n"
                            f"üìâ Long: ${long_liquidations:,.0f}\n"
                            f"üìà Short: ${short_liquidations:,.0f}\n"
                            f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{direction}*\n\n"
                            f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å!"
                        )
                    )

                    self._record_alert(symbol, "liquidations")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_large_liquidations: {e}")


    async def _check_order_imbalance(self, symbol: str, market_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            orderbook = market_data.get("orderbook", {})

            bid_volume = orderbook.get("bid_volume", 0)
            ask_volume = orderbook.get("ask_volume", 0)
            total_volume = bid_volume + ask_volume

            if total_volume == 0:
                return

            bid_ratio = bid_volume / total_volume
            ask_ratio = ask_volume / total_volume

            # –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –ø–æ–∫—É–ø–∫–∏
            if bid_ratio >= self.imbalance_threshold:
                if self._should_send_alert(symbol, "imbalance_buy"):
                    await self._send_alert(
                        alert_type="imbalance",
                        symbol=symbol,
                        message=(
                            f"üü¢ *–î–ò–°–ë–ê–õ–ê–ù–° –í –ü–û–ö–£–ü–ö–ò {symbol}*\n\n"
                            f"üìä Bid: {bid_ratio*100:.1f}%\n"
                            f"üìä Ask: {ask_ratio*100:.1f}%\n\n"
                            f"üí° –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π!\n"
                            f"‚ö° –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç —Ü–µ–Ω—ã"
                        )
                    )

                    self._record_alert(symbol, "imbalance_buy")

            # –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ–¥–∞–∂–∏
            elif ask_ratio >= self.imbalance_threshold:
                if self._should_send_alert(symbol, "imbalance_sell"):
                    await self._send_alert(
                        alert_type="imbalance",
                        symbol=symbol,
                        message=(
                            f"üî¥ *–î–ò–°–ë–ê–õ–ê–ù–° –í –ü–†–û–î–ê–ñ–ò {symbol}*\n\n"
                            f"üìä Bid: {bid_ratio*100:.1f}%\n"
                            f"üìä Ask: {ask_ratio*100:.1f}%\n\n"
                            f"üí° –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤!\n"
                            f"‚ö° –í–æ–∑–º–æ–∂–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã"
                        )
                    )

                    self._record_alert(symbol, "imbalance_sell")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _check_order_imbalance: {e}")


    def _should_send_alert(self, symbol: str, alert_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
        key = f"{symbol}:{alert_type}"

        if key not in self.recent_alerts:
            return True

        last_alert_time = self.recent_alerts[key]
        time_passed = (datetime.now() - last_alert_time).total_seconds()

        return time_passed >= self.alert_cooldown


    def _record_alert(self, symbol: str, alert_type: str):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        key = f"{symbol}:{alert_type}"
        self.recent_alerts[key] = datetime.now()


    async def _send_alert(self, alert_type: str, symbol: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram —Å –ê–ù–¢–ò–°–ü–ê–ú –∑–∞—â–∏—Ç–æ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            now = time.time()
            hour_ago = now - 3600

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            self.alert_history = [
                (ts, atype, sym) for ts, atype, sym in self.alert_history
                if ts > hour_ago
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.alert_history) >= self.max_alerts_per_hour:
                logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤: {self.max_alerts_per_hour}/—á–∞—Å")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if self.bot.telegram_handler:
                await self.bot.telegram_handler.application.bot.send_message(
                    chat_id=self.bot.telegram_handler.chat_id,
                    text=message,
                    parse_mode='Markdown'
                )

                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                self.alert_history.append((now, alert_type, symbol))

                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_type} –¥–ª—è {symbol}")
            else:
                logger.warning("‚ö†Ô∏è telegram_handler –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
