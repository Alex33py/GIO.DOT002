# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
T1: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
T2: –û–±—ä—ë–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
T3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
"""

from typing import Dict, List, Optional
from datetime import datetime
from config.settings import logger

class TriggerSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.t1_sensitivity = 0.7  # –ü–æ—Ä–æ–≥ –¥–ª—è T1
        self.t2_sensitivity = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä—ë–º–∞ –¥–ª—è T2
        self.t3_sensitivity = 0.6  # –ü–æ—Ä–æ–≥ –¥–ª—è T3

        logger.info("‚úÖ TriggerSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def evaluate_all_triggers(self, direction: str, indicators: Dict,
                              market_data: Dict, candles: List[Dict]) -> Dict:
        """
        –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

        Returns:
            {
                't1': {'fired': bool, 'score': float, 'details': str},
                't2': {'fired': bool, 'score': float, 'details': str},
                't3': {'fired': bool, 'score': float, 'details': str},
                'total_fired': int,
                'confidence': float
            }
        """

        t1_result = self.evaluate_t1_technical(direction, indicators, candles)
        t2_result = self.evaluate_t2_volume(direction, market_data)
        t3_result = self.evaluate_t3_orderflow(direction, market_data, indicators)

        total_fired = sum([
            t1_result['fired'],
            t2_result['fired'],
            t3_result['fired']
        ])

        # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = (
            t1_result['score'] * 0.4 +
            t2_result['score'] * 0.3 +
            t3_result['score'] * 0.3
        )

        logger.debug(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä—ã: T1={t1_result['fired']}, T2={t2_result['fired']}, T3={t3_result['fired']}, confidence={confidence:.2f}")

        return {
            't1': t1_result,
            't2': t2_result,
            't3': t3_result,
            'total_fired': total_fired,
            'confidence': confidence
        }

    def evaluate_t1_technical(self, direction: str, indicators: Dict,
                              candles: List[Dict]) -> Dict:
        """
        T1: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –ø—Ä–æ–±–æ–∏ —É—Ä–æ–≤–Ω–µ–π
        """
        score = 0.0
        details = []

        # 1. RSI –∞–Ω–∞–ª–∏–∑
        rsi = indicators.get('rsi_1h', 50)
        if direction == 'long':
            if 25 < rsi < 45:  # –ó–æ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
                score += 0.3
                details.append(f"RSI oversold ({rsi:.1f})")
        else:
            if 55 < rsi < 75:  # –ó–æ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
                score += 0.3
                details.append(f"RSI overbought ({rsi:.1f})")

        # 2. MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        macd_hist = indicators.get('macd_histogram_1h', 0)
        macd_prev = indicators.get('macd_histogram_1h_prev', 0)

        if direction == 'long' and macd_hist > 0 and macd_hist > macd_prev:
            score += 0.3
            details.append("MACD bullish crossover")
        elif direction == 'short' and macd_hist < 0 and macd_hist < macd_prev:
            score += 0.3
            details.append("MACD bearish crossover")

        # 3. –ü–∞—Ç—Ç–µ—Ä–Ω —Å–≤–µ—á–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏)
        if len(candles) >= 3:
            pattern_score = self._detect_candle_pattern(direction, candles[-3:])
            score += pattern_score * 0.2
            if pattern_score > 0.5:
                details.append(f"Bullish pattern" if direction == 'long' else "Bearish pattern")

        # 4. –ü—Ä–æ–±–æ–π Moving Average
        price = indicators.get('close', 0)
        ema_20 = indicators.get('ema_20_1h', 0)
        ema_50 = indicators.get('ema_50_1h', 0)

        if direction == 'long' and price > ema_20 > ema_50:
            score += 0.2
            details.append("Price above EMAs (bullish)")
        elif direction == 'short' and price < ema_20 < ema_50:
            score += 0.2
            details.append("Price below EMAs (bearish)")

        fired = score >= self.t1_sensitivity

        return {
            'fired': fired,
            'score': min(score, 1.0),
            'details': ', '.join(details) if details else 'No triggers'
        }

    def _detect_candle_pattern(self, direction: str, candles: List[Dict]) -> float:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if len(candles) < 3:
            return 0.0

        c1, c2, c3 = candles[-3], candles[-2], candles[-1]

        # –î–ª—è –ª–æ–Ω–≥–∞: –∏—â–µ–º –±—ã—á—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if direction == 'long':
            # –ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ
            if (c2['close'] < c2['open'] and  # –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                c3['close'] > c3['open'] and  # –ë—ã—á—å—è —Å–≤–µ—á–∞
                c3['close'] > c2['open'] and  # –ü–æ–≥–ª–æ—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é
                c3['open'] < c2['close']):
                return 1.0

            # –£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞
            if (c1['close'] < c1['open'] and  # –ú–µ–¥–≤–µ–∂—å—è
                abs(c2['close'] - c2['open']) < (c2['high'] - c2['low']) * 0.3 and  # –î–æ–¥–∂–∏
                c3['close'] > c3['open'] and  # –ë—ã—á—å—è
                c3['close'] > (c1['open'] + c1['close']) / 2):  # –ó–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø–µ—Ä–≤–æ–π
                return 0.9

            # –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞
            if all(c['close'] > c['open'] for c in [c1, c2, c3]) and \
               c2['close'] > c1['close'] and c3['close'] > c2['close']:
                return 0.8

        # –î–ª—è —à–æ—Ä—Ç–∞: –∏—â–µ–º –º–µ–¥–≤–µ–∂—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        else:
            # –ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ
            if (c2['close'] > c2['open'] and  # –ë—ã—á—å—è —Å–≤–µ—á–∞
                c3['close'] < c3['open'] and  # –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                c3['close'] < c2['open'] and  # –ü–æ–≥–ª–æ—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é
                c3['open'] > c2['close']):
                return 1.0

            # –í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞
            if (c1['close'] > c1['open'] and  # –ë—ã—á—å—è
                abs(c2['close'] - c2['open']) < (c2['high'] - c2['low']) * 0.3 and  # –î–æ–¥–∂–∏
                c3['close'] < c3['open'] and  # –ú–µ–¥–≤–µ–∂—å—è
                c3['close'] < (c1['open'] + c1['close']) / 2):  # –ó–∞–∫—Ä—ã–ª–∞—Å—å –Ω–∏–∂–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø–µ—Ä–≤–æ–π
                return 0.9

            # –¢—Ä–∏ —á—ë—Ä–Ω—ã–µ –≤–æ—Ä–æ–Ω—ã
            if all(c['close'] < c['open'] for c in [c1, c2, c3]) and \
               c2['close'] < c1['close'] and c3['close'] < c2['close']:
                return 0.8

        return 0.0

    def evaluate_t2_volume(self, direction: str, market_data: Dict) -> Dict:
        """
        T2: –û–±—ä—ë–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–∞ –∏ –∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        """
        score = 0.0
        details = []

        # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º vs —Å—Ä–µ–¥–Ω–∏–π
        volume_ratio = market_data.get('volume_ratio', 1.0)

        if volume_ratio >= 3.0:
            score = 1.0
            details.append(f"–°–∏–ª—å–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ ({volume_ratio:.1f}x)")
        elif volume_ratio >= 2.0:
            score = 0.8
            details.append(f"–í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ ({volume_ratio:.1f}x)")
        elif volume_ratio >= self.t2_sensitivity:
            score = 0.6
            details.append(f"–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º ({volume_ratio:.1f}x)")
        else:
            score = 0.3
            details.append(f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º ({volume_ratio:.1f}x)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ —á–µ—Ä–µ–∑ buy/sell volume
        buy_volume = market_data.get('buy_volume', 0)
        sell_volume = market_data.get('sell_volume', 0)
        total_volume = buy_volume + sell_volume

        if total_volume > 0:
            buy_ratio = buy_volume / total_volume

            if direction == 'long' and buy_ratio > 0.6:
                score = min(score * 1.2, 1.0)
                details.append(f"–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ ({buy_ratio:.1%})")
            elif direction == 'short' and buy_ratio < 0.4:
                score = min(score * 1.2, 1.0)
                details.append(f"–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ ({1-buy_ratio:.1%})")

        fired = score >= self.t2_sensitivity / 2  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥

        return {
            'fired': fired,
            'score': min(score, 1.0),
            'details': ', '.join(details) if details else 'Low volume'
        }

    def evaluate_t3_orderflow(self, direction: str, market_data: Dict,
                              indicators: Dict) -> Dict:
        """
        T3: –¢—Ä–∏–≥–≥–µ—Ä –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ (CVD + Orderbook)
        """
        score = 0.0
        details = []

        # 1. Cumulative Volume Delta (CVD)
        cvd = market_data.get('cvd', 0)
        cvd_normalized = cvd / 1000000  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –º–∏–ª–ª–∏–æ–Ω–∞–º

        if direction == 'long' and cvd > 0:
            cvd_score = min(abs(cvd_normalized) / 5.0, 1.0)  # –ú–∞–∫—Å 5M = 1.0
            score += cvd_score * 0.5
            details.append(f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π CVD ({cvd:,.0f})")
        elif direction == 'short' and cvd < 0:
            cvd_score = min(abs(cvd_normalized) / 5.0, 1.0)
            score += cvd_score * 0.5
            details.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π CVD ({cvd:,.0f})")

        # 2. Orderbook pressure (bid/ask ratio)
        bid_volume = market_data.get('bid_volume', 0)
        ask_volume = market_data.get('ask_volume', 0)
        total_ob_volume = bid_volume + ask_volume

        if total_ob_volume > 0:
            bid_ratio = bid_volume / total_ob_volume

            if direction == 'long' and bid_ratio > 0.6:
                ob_score = (bid_ratio - 0.5) * 2  # 0.6 -> 0.2, 0.8 -> 0.6, 1.0 -> 1.0
                score += ob_score * 0.3
                details.append(f"–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É ({bid_ratio:.1%})")
            elif direction == 'short' and bid_ratio < 0.4:
                ob_score = (0.5 - bid_ratio) * 2
                score += ob_score * 0.3
                details.append(f"–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ({1-bid_ratio:.1%})")

        # 3. Delta momentum (–∏–∑–º–µ–Ω–µ–Ω–∏–µ CVD)
        cvd_prev = market_data.get('cvd_prev', 0)
        cvd_change = cvd - cvd_prev

        if direction == 'long' and cvd_change > 0:
            score += 0.2
            details.append("–†–∞—Å—Ç—É—â–∏–π CVD")
        elif direction == 'short' and cvd_change < 0:
            score += 0.2
            details.append("–ü–∞–¥–∞—é—â–∏–π CVD")

        fired = score >= self.t3_sensitivity

        return {
            'fired': fired,
            'score': min(score, 1.0),
            'details': ', '.join(details) if details else 'Neutral orderflow'
        }
