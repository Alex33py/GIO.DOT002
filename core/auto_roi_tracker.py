#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Auto ROI Tracker - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è ROI
"""

import asyncio
from typing import Dict, List
from datetime import datetime, timedelta
from config.settings import logger


class AutoROITracker:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è ROI"""

    def __init__(self, bot_instance):
        """
        Args:
            bot_instance: –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot
        """
        self.bot = bot_instance
        self.is_running = False
        self.check_interval = 60  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.active_signals = {}
        self.tp1_percentage = 0.25
        self.tp2_percentage = 0.50
        self.tp3_percentage = 0.25

        logger.info("‚úÖ AutoROITracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.is_running = True
        logger.info("üéØ AutoROITracker –∑–∞–ø—É—â–µ–Ω")
        await self.load_active_signals()

        while self.is_running:
            try:
                await self.check_all_signals()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ROI: {e}")
                await asyncio.sleep(60)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.is_running = False
        logger.info("üõë AutoROITracker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def load_active_signals(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î"""
        try:
            if not hasattr(self.bot, "signal_recorder"):
                return

            active_signals = self.bot.signal_recorder.get_active_signals()
            cutoff_time = datetime.now() - timedelta(hours=24)
            filtered_count = 0

            for signal in active_signals:
                signal_id = signal.get("id")

                # ========== –§–ò–õ–¨–¢–† –°–¢–ê–†–´–• –°–ò–ì–ù–ê–õ–û–í ==========
                created_at_str = signal.get("created_at")
                if created_at_str:
                    try:
                        created_at = datetime.fromisoformat(
                            created_at_str.replace("Z", "+00:00")
                        )
                        age_hours = (datetime.now() - created_at).total_seconds() / 3600

                        if created_at < cutoff_time:
                            filtered_count += 1
                            logger.info(
                                f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å—Ç–∞—Ä—ã–π —Å–∏–≥–Ω–∞–ª #{signal_id} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)"
                            )
                            continue
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è #{signal_id}: {e}")

                tp1_hit = signal.get("tp1_hit", 0) == 1
                tp2_hit = signal.get("tp2_hit", 0) == 1
                tp3_hit = signal.get("tp3_hit", 0) == 1

                self.active_signals[signal_id] = {
                    "id": signal_id,
                    "symbol": signal.get("symbol"),
                    "direction": signal.get("direction"),
                    "entry_price": signal.get("entry_price"),
                    "stop_loss": signal.get("stop_loss"),
                    "tp1": signal.get("tp1"),
                    "tp2": signal.get("tp2"),
                    "tp3": signal.get("tp3"),
                    "tp1_reached": tp1_hit,
                    "tp2_reached": tp2_hit,
                    "tp3_reached": tp3_hit,
                    "breakeven_moved": False,
                    "trailing_started": False,
                    "realized_roi": 0.0,
                    "created_at": created_at_str,
                }

            logger.info(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_count} —Å—Ç–∞—Ä—ã—Ö)"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def add_signal(self, signal: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            signal_id = signal.get("id")
            if signal_id:
                self.active_signals[signal_id] = {
                    "id": signal_id,
                    "symbol": signal.get("symbol"),
                    "direction": signal.get("direction"),
                    "entry_price": signal.get("entry_price"),
                    "stop_loss": signal.get("stop_loss"),
                    "tp1": signal.get("tp1"),
                    "tp2": signal.get("tp2"),
                    "tp3": signal.get("tp3"),
                    "tp1_reached": False,
                    "tp2_reached": False,
                    "tp3_reached": False,
                    "breakeven_moved": False,
                    "trailing_started": False,
                    "realized_roi": 0.0,
                    "created_at": signal.get("created_at", datetime.now().isoformat()),
                }
                logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª #{signal_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def check_all_signals(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self.active_signals:
            return

        for signal_id in list(self.active_signals.keys()):
            try:
                await self.check_signal(signal_id, self.active_signals[signal_id])
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ #{signal_id}: {e}")

    async def check_signal(self, signal_id: int, signal: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            symbol = signal.get("symbol")
            direction = signal.get("direction")
            entry_price = signal.get("entry_price")
            stop_loss = signal.get("stop_loss")
            tp1 = signal.get("tp1")
            tp2 = signal.get("tp2")
            tp3 = signal.get("tp3")

            current_price = await self._get_current_price(symbol)
            if not current_price:
                return

            if self._check_stop_loss_hit(current_price, stop_loss, direction):
                await self._handle_stop_loss(signal_id, signal, current_price)
                return

            if not signal.get("tp1_reached"):
                if tp1 and tp1 != 0 and tp1 != entry_price:
                    if self._check_tp_reached(current_price, tp1, direction):
                        await self._handle_tp1_reached(signal_id, signal, current_price)
                        signal["tp1_reached"] = True

            if signal.get("tp1_reached") and not signal.get("tp2_reached"):
                if tp2 and tp2 != 0 and tp2 != entry_price:
                    if self._check_tp_reached(current_price, tp2, direction):
                        await self._handle_tp2_reached(signal_id, signal, current_price)
                        signal["tp2_reached"] = True

            if signal.get("tp2_reached") and not signal.get("tp3_reached"):
                if tp3 and tp3 != 0 and tp3 != entry_price:
                    if self._check_tp_reached(current_price, tp3, direction):
                        await self._handle_tp3_reached(signal_id, signal, current_price)
                        signal["tp3_reached"] = True
                        del self.active_signals[signal_id]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_signal #{signal_id}: {e}")

    def _check_stop_loss_hit(
        self, current_price: float, stop_loss: float, direction: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Stop Loss"""
        if direction == "LONG":
            return current_price <= stop_loss
        else:
            return current_price >= stop_loss

    def _check_tp_reached(
        self, current_price: float, tp: float, direction: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit"""
        if direction == "LONG":
            return current_price >= tp
        else:
            return current_price <= tp

    async def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker = await self.bot.bybit_connector.get_ticker(symbol)
            if ticker:
                return float(ticker.get("last_price", 0))
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0

    async def _handle_tp1_reached(
        self, signal_id: int, signal: Dict, current_price: float
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP1"""
        try:
            entry_price = signal.get("entry_price")
            tp1 = signal.get("tp1")
            direction = signal.get("direction")

            if not tp1 or tp1 == 0 or tp1 == entry_price:
                logger.info(
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ TP1 #{signal_id}: TP1 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω entry"
                )
                return

            if signal.get("tp1_reached"):
                logger.info(f"‚è≠Ô∏è TP1 #{signal_id} —É–∂–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ä–∞–Ω–µ–µ")
                return

            # ========== ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–ó–†–ê–°–¢–ê –°–ò–ì–ù–ê–õ–ê ==========
            created_at_str = signal.get("created_at")
            if created_at_str:
                try:
                    created_at = datetime.fromisoformat(
                        created_at_str.replace("Z", "+00:00")
                    )
                    age_hours = (datetime.now() - created_at).total_seconds() / 3600

                    if age_hours > 24:
                        logger.info(
                            f"‚è≠Ô∏è TP1 #{signal_id} –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)"
                        )
                        return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è #{signal_id}: {e}")
            # ==================================================

            if direction == "LONG":
                roi = (
                    ((current_price - entry_price) / entry_price)
                    * 100
                    * self.tp1_percentage
                )
            else:
                roi = (
                    ((entry_price - current_price) / entry_price)
                    * 100
                    * self.tp1_percentage
                )

            signal["realized_roi"] += roi

            if hasattr(self.bot, "signal_recorder"):
                self.bot.signal_recorder.update_signal_tp_reached(
                    signal_id=signal_id, tp_level=1, realized_roi=signal["realized_roi"]
                )

            if signal_id in self.active_signals:
                self.active_signals[signal_id]["tp1_reached"] = True

            signal["stop_loss"] = entry_price
            signal["breakeven_moved"] = True

            if hasattr(self.bot, "telegram_bot") and self.bot.telegram_bot:
                await self.bot.telegram_bot.notify_tp1_reached(
                    {**signal, "profit_percent": roi}
                )

            logger.info(f"üéØ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è #{signal_id}, ROI: +{roi:.2f}%")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_tp1 #{signal_id}: {e}")

    async def _handle_tp2_reached(
        self, signal_id: int, signal: Dict, current_price: float
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP2"""
        try:
            entry_price = signal.get("entry_price")
            tp2 = signal.get("tp2")
            direction = signal.get("direction")

            if not tp2 or tp2 == 0 or tp2 == entry_price:
                logger.info(
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ TP2 #{signal_id}: TP2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω entry"
                )
                return

            # ========== ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–ó–†–ê–°–¢–ê –°–ò–ì–ù–ê–õ–ê ==========
            created_at_str = signal.get("created_at")
            if created_at_str:
                try:
                    created_at = datetime.fromisoformat(
                        created_at_str.replace("Z", "+00:00")
                    )
                    age_hours = (datetime.now() - created_at).total_seconds() / 3600

                    if age_hours > 24:
                        logger.info(
                            f"‚è≠Ô∏è TP2 #{signal_id} –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)"
                        )
                        return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è #{signal_id}: {e}")
            # ==================================================

            if direction == "LONG":
                roi = (
                    ((current_price - entry_price) / entry_price)
                    * 100
                    * self.tp2_percentage
                )
            else:
                roi = (
                    ((entry_price - current_price) / entry_price)
                    * 100
                    * self.tp2_percentage
                )

            signal["realized_roi"] += roi

            if hasattr(self.bot, "signal_recorder"):
                self.bot.signal_recorder.update_signal_tp_reached(
                    signal_id=signal_id, tp_level=2, realized_roi=signal["realized_roi"]
                )

            if signal_id in self.active_signals:
                self.active_signals[signal_id]["tp2_reached"] = True

            if hasattr(self.bot, "telegram_bot") and self.bot.telegram_bot:
                await self.bot.telegram_bot.notify_tp2_reached(
                    {**signal, "profit_percent": roi}
                )

            logger.info(f"üéØüéØ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è #{signal_id}, ROI: +{roi:.2f}%")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_tp2 #{signal_id}: {e}")

    async def _handle_tp3_reached(
        self, signal_id: int, signal: Dict, current_price: float
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP3"""
        try:
            entry_price = signal.get("entry_price")
            tp3 = signal.get("tp3")
            direction = signal.get("direction")

            if not tp3 or tp3 == 0 or tp3 == entry_price:
                logger.info(
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ TP3 #{signal_id}: TP3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω entry"
                )
                return

            # ========== ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–ó–†–ê–°–¢–ê –°–ò–ì–ù–ê–õ–ê ==========
            created_at_str = signal.get("created_at")
            if created_at_str:
                try:
                    created_at = datetime.fromisoformat(
                        created_at_str.replace("Z", "+00:00")
                    )
                    age_hours = (datetime.now() - created_at).total_seconds() / 3600

                    if age_hours > 24:
                        logger.info(
                            f"‚è≠Ô∏è TP3 #{signal_id} –ø—Ä–æ–ø—É—â–µ–Ω (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á)"
                        )
                        return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è #{signal_id}: {e}")
            # ==================================================

            if direction == "LONG":
                roi = (
                    ((current_price - entry_price) / entry_price)
                    * 100
                    * self.tp3_percentage
                )
            else:
                roi = (
                    ((entry_price - current_price) / entry_price)
                    * 100
                    * self.tp3_percentage
                )

            signal["realized_roi"] += roi

            if hasattr(self.bot, "signal_recorder"):
                self.bot.signal_recorder.close_signal(
                    signal_id=signal_id,
                    exit_price=current_price,
                    realized_roi=signal["realized_roi"],
                    status="completed",
                )

            if signal_id in self.active_signals:
                self.active_signals[signal_id]["tp3_reached"] = True

            if hasattr(self.bot, "telegram_bot") and self.bot.telegram_bot:
                await self.bot.telegram_bot.notify_tp3_reached(
                    {**signal, "profit_percent": roi}
                )

            logger.info(
                f"üéØüéØüéØ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è #{signal_id}, –ò—Ç–æ–≥–æ ROI: +{signal['realized_roi']:.2f}%"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_tp3 #{signal_id}: {e}")

    async def _handle_stop_loss(
        self, signal_id: int, signal: Dict, current_price: float
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Stop Loss"""
        try:
            entry_price = signal.get("entry_price")
            direction = signal.get("direction")

            if direction == "LONG":
                loss = ((current_price - entry_price) / entry_price) * 100
            else:
                loss = ((entry_price - current_price) / entry_price) * 100

            total_roi = signal.get("realized_roi", 0) + loss * (
                1.0 - self.tp1_percentage - self.tp2_percentage
            )

            if hasattr(self.bot, "signal_recorder"):
                self.bot.signal_recorder.close_signal(
                    signal_id=signal_id,
                    exit_price=current_price,
                    realized_roi=total_roi,
                    status="stopped",
                )

            if hasattr(self.bot, "telegram_bot") and self.bot.telegram_bot:
                await self.bot.telegram_bot.notify_stop_loss_hit(
                    {**signal, "profit_percent": total_roi}
                )

            if signal_id in self.active_signals:
                del self.active_signals[signal_id]

            logger.info(f"üõë Stop Loss –¥–ª—è #{signal_id}, –ò—Ç–æ–≥–æ ROI: {total_roi:.2f}%")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_stop_loss #{signal_id}: {e}")
