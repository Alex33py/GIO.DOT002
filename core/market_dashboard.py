#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Market Dashboard - –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä—ã–Ω–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Coinglass)
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –≤ –æ–¥–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
"""

from typing import Dict, Optional
from datetime import datetime
import requests
import pandas as pd
from config.settings import logger
from telegram_bot.dashboard_helpers import DashboardFormatter
from ai.gemini_interpreter import GeminiInterpreter



class MarketDashboard:
    """
    –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä—ã–Ω–∫–∞

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –æ–¥–Ω–æ–º —ç–∫—Ä–∞–Ω–µ:
    - –¶–µ–Ω—É –∏ 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    - –§–∞–∑—É —Ä—ã–Ω–∫–∞ (Accumulation/Distribution/Markup)
    - –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ú–ú —Å confidence
    - Volume Analysis (24h vol, spike, CVD, VP)
    - Sentiment & Pressure (Funding, OI, L/S Ratio, Orderbook)
    - Multi-Timeframe —Ç—Ä–µ–Ω–¥—ã (1h/4h/1d)
    - Key Levels (Support/Resistance)
    """

    def __init__(self, bot_instance):
        """
        Args:
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        """
        self.bot = bot_instance
        self.formatter = DashboardFormatter()

        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini 2.0 Flash
        import os
        gemini_key = os.getenv("GEMINI_API_KEY", "")
        self.gemini = GeminiInterpreter(gemini_key) if gemini_key else None

        if self.gemini:
            logger.info("‚úÖ MarketDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Gemini 2.0 Flash")
        else:
            logger.warning("‚ö†Ô∏è MarketDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ AI (no GEMINI_API_KEY)")

    async def generate_dashboard(self, symbol: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ Market Dashboard
        """
        logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è dashboard –¥–ª—è {symbol}...")

        # 1. Price & 24h Change
        ticker = await self._get_ticker(symbol)

        # 2. Market Regime
        regime = await self._get_market_regime(symbol, ticker)

        # 3. Strategy Pattern (MM Scenario)
        mm_scenario = await self._get_mm_scenario(symbol, ticker)

        # 4. Wyckoff Phase
        wyckoff_phase = await self._get_wyckoff_phase(symbol)

        # 5. ‚úÖ MATCHED SCENARIOS
        matched_scenarios = await self._get_matched_scenarios(symbol)

        # 6. ‚úÖ Volume Analysis (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω ticker)
        volume_analysis = await self._get_volume_analysis(symbol, ticker)

        # 7. Sentiment & Pressure
        sentiment_pressure = await self._get_sentiment_pressure(symbol)

        # 8. Multi-Timeframe Trends
        mtf_trends = await self._get_mtf_trends(symbol)

        # 9. ‚úÖ Key Levels (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω volume_analysis)
        key_levels = await self._get_key_levels(symbol, volume_analysis)

        # 10. Whale Activity
        whale_activity = await self._get_whale_activity(symbol)

        # 11. ‚úÖ Liquidation Levels (–î–û–ë–ê–í–õ–ï–ù–û!)
        liquidation_levels = await self._get_liquidation_levels(symbol, ticker)

        # 12. ‚úÖ Format Dashboard (–ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã)
        dashboard_text = await self._format_dashboard(
            symbol=symbol,
            ticker=ticker,
            regime=regime,
            mm_scenario=mm_scenario,
            wyckoff_phase=wyckoff_phase,
            matched_scenarios=matched_scenarios,
            volume_data=volume_analysis,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø!
            sentiment_data=sentiment_pressure,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø!
            mtf_trends=mtf_trends,
            levels=key_levels,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø!
            whale_activity=whale_activity,
            liquidation_levels=liquidation_levels,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
        )

        logger.info(f"‚úÖ Dashboard –¥–ª—è {symbol} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        return dashboard_text

    async def _get_ticker(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞"""
        try:
            ticker_raw = await self.bot.bybit_connector.get_ticker(symbol)

            if not ticker_raw:
                logger.warning(f"‚ö†Ô∏è Ticker data unavailable for {symbol}")
                return {
                    "price": 0.0,
                    "change_24h": 0.0,
                    "high_24h": 0.0,
                    "low_24h": 0.0,
                    "volume_24h": 0.0,
                }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ Bybit
            price = float(
                ticker_raw.get("lastPrice")
                or ticker_raw.get("last_price")
                or ticker_raw.get("last")
                or 0
            )

            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
            change_str = (
                ticker_raw.get("price24hPcnt")
                or ticker_raw.get("price_24h_pcnt")
                or "0"
            )
            change_24h = float(change_str) * 100 if change_str else 0.0

            # High/Low/Volume
            high_24h = float(
                ticker_raw.get("highPrice24h")
                or ticker_raw.get("high_24h")
                or ticker_raw.get("high")
                or 0
            )
            low_24h = float(
                ticker_raw.get("lowPrice24h")
                or ticker_raw.get("low_24h")
                or ticker_raw.get("low")
                or 0
            )
            volume_24h = float(
                ticker_raw.get("volume24h")
                or ticker_raw.get("volume_24h")
                or ticker_raw.get("volume")
                or 0
            )

            logger.debug(
                f"‚úÖ Ticker {symbol}: Price=${price:,.2f}, Change={change_24h:+.2f}%"
            )

            return {
                "price": price,
                "change_24h": change_24h,
                "high_24h": high_24h,
                "low_24h": low_24h,
                "volume_24h": volume_24h,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ticker {symbol}: {e}")
            return {
                "price": 0.0,
                "change_24h": 0.0,
                "high_24h": 0.0,
                "low_24h": 0.0,
                "volume_24h": 0.0,
            }

    async def _get_market_regime(self, symbol: str, ticker: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å Market Regime (—Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º) - –ö–†–ò–¢–ï–†–ò–ô 2"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarketRegimeDetector
            if hasattr(self.bot, "market_regime_detector"):
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º market_data
                market_data = {
                    "symbol": symbol,
                    "price": ticker["price"],
                    "volume": ticker["volume_24h"],
                    "high_24h": ticker["high_24h"],
                    "low_24h": ticker["low_24h"],
                }

                regime_result = self.bot.market_regime_detector.detect_regime(
                    market_data
                )
                return {
                    "regime": regime_result.get("regime", "NEUTRAL"),  # ‚Üê UPPERCASE
                    "confidence": regime_result.get("confidence", 0.5),
                    "description": regime_result.get("description", ""),
                }

            # Fallback
            return {
                "regime": "RANGING",
                "confidence": 0.5,
                "description": "–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_market_regime: {e}", exc_info=True)
            return {
                "regime": "NEUTRAL",
                "confidence": 0.5,
                "description": "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
            }

    async def _get_mm_scenario(self, symbol: str, ticker: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ú–ú —Å —É–º–Ω—ã–º fallback"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º MTF —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ matching
            mtf_trends = await self._get_mtf_trends(symbol)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º EnhancedScenarioMatcher
            if hasattr(self.bot, "enhanced_scenario_matcher"):
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è match_scenario
                market_data = {
                    "symbol": symbol,
                    "price": ticker["price"],
                    "volume": ticker["volume_24h"],
                    "change_24h": ticker["change_24h"],
                }

                scenario = self.bot.enhanced_scenario_matcher.match_scenario(
                    symbol=symbol,
                    market_data=market_data,
                    indicators={},
                    mtf_trends=mtf_trends,
                    volume_profile={},
                    news_sentiment={},
                    veto_checks={},
                )

                if (
                    scenario and scenario.get("score", 0) > 30
                ):  # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å 50% –¥–æ 30%
                    return {
                        "scenario_id": scenario.get("scenario_id", "unknown"),
                        "scenario_name": scenario.get("scenario_name", "Unknown"),
                        "confidence": scenario.get("score", 0) / 100,
                        "description": scenario.get("description", ""),
                    }

            # –£–ú–ù–´–ô FALLBACK: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ MTF
            return self._generate_fallback_scenario(ticker, mtf_trends)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_mm_scenario: {e}")
            return {
                "scenario_id": "error",
                "scenario_name": "Market Analysis",
                "confidence": 0.5,
                "description": "Basic market analysis",
            }

    def _generate_fallback_scenario(self, ticker: Dict, mtf_trends: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏ MTF"""
        change_24h = ticker["change_24h"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        trend_1h = mtf_trends.get("1h", "NEUTRAL")
        trend_4h = mtf_trends.get("4h", "NEUTRAL")
        trend_1d = mtf_trends.get("1d", "NEUTRAL")

        # –õ–æ–≥–∏–∫–∞ fallback —Å—Ü–µ–Ω–∞—Ä–∏—è
        if abs(change_24h) < 1:
            # –†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ
            scenario_name = "Range Trading"
            scenario_id = "range_consolidation"
            confidence = 0.65
        elif change_24h > 3:
            # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
            if trend_1h == "UP" and trend_4h == "UP":
                scenario_name = "Strong Uptrend"
                scenario_id = "uptrend_momentum"
                confidence = 0.75
            else:
                scenario_name = "Recovery Rally"
                scenario_id = "bullish_recovery"
                confidence = 0.60
        elif change_24h < -3:
            # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            if trend_1h == "DOWN" and trend_4h == "DOWN":
                scenario_name = "Strong Downtrend"
                scenario_id = "downtrend_momentum"
                confidence = 0.75
            else:
                scenario_name = "Correction Phase"
                scenario_id = "bearish_correction"
                confidence = 0.60
        else:
            # –°–ª–∞–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            scenario_name = "Consolidation"
            scenario_id = "neutral_consolidation"
            confidence = 0.55

        return {
            "scenario_id": scenario_id,
            "scenario_name": scenario_name,
            "confidence": confidence,
            "description": f"Market showing {scenario_name.lower()} pattern",
        }

    def _generate_top3_scenarios(
        self,
        ticker: Dict,
        mtf_trends: Dict,
        volume_data: Dict = None,
        sentiment_data: Dict = None,
    ) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–û–ü-3 —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        change_24h = ticker["change_24h"]
        price = ticker["price"]

        # –ü–æ–ª—É—á–∞–µ–º MTF —Ç—Ä–µ–Ω–¥—ã
        trend_1h = mtf_trends.get("1h", "NEUTRAL")
        trend_4h = mtf_trends.get("4h", "NEUTRAL")
        trend_1d = mtf_trends.get("1d", "NEUTRAL")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cvd = volume_data.get("cvd", 0) if volume_data else 0
        ls_ratio = (
            sentiment_data.get("long_short_ratio", 1.0) if sentiment_data else 1.0
        )

        scenarios = []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ price action –∏ MTF
        if change_24h > 3 and trend_4h in ["UP", "BULLISH"]:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Strong Uptrend
            conf = 70 + min(10, int(abs(change_24h)))
            if cvd > 10:
                conf += 5
            if ls_ratio > 1.5:
                conf += 5
            scenarios.append(
                {"name": "üöÄ Strong Uptrend", "probability": min(conf, 85)}
            )

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: Overbought Risk
            scenarios.append({"name": "‚ö†Ô∏è Overbought Risk", "probability": 15})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: Continuation
            scenarios.append({"name": "üìà Bullish Continuation", "probability": 10})

        elif change_24h < -3 and trend_4h in ["DOWN", "BEARISH"]:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Strong Downtrend
            conf = 70 + min(10, int(abs(change_24h)))
            if cvd < -10:
                conf += 5
            if ls_ratio < 0.7:
                conf += 5
            scenarios.append(
                {"name": "üìâ Strong Downtrend", "probability": min(conf, 85)}
            )

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: Oversold Bounce
            scenarios.append({"name": "üîÑ Oversold Bounce", "probability": 15})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: Continuation
            scenarios.append({"name": "üî¥ Bearish Continuation", "probability": 10})

        elif abs(change_24h) < 2:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Range Trading
            conf = 60
            if trend_1h == "NEUTRAL" and trend_4h == "NEUTRAL":
                conf += 15
            scenarios.append({"name": "‚ÜîÔ∏è Range Trading", "probability": conf})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
            if cvd > 5 and ls_ratio > 1.2:
                scenarios.append({"name": "üìä Accumulation Phase", "probability": 25})
            else:
                scenarios.append({"name": "‚è∏Ô∏è Consolidation", "probability": 20})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: Breakout preparation
            scenarios.append({"name": "‚ö° Breakout Incoming", "probability": 15})

        else:
            # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Correction Phase
            conf = 60
            if trend_4h != trend_1h:
                conf += 10
            scenarios.append({"name": "üîÑ Correction Phase", "probability": conf})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: MTF Divergence
            scenarios.append({"name": "üîÄ MTF Divergence", "probability": 25})

            # –°—Ü–µ–Ω–∞—Ä–∏–π 3: Neutral Consolidation
            scenarios.append({"name": "‚ö™ Neutral Drift", "probability": 15})

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ 100%
        total_prob = sum(s["probability"] for s in scenarios)
        if total_prob != 100:
            factor = 100 / total_prob
            for s in scenarios:
                s["probability"] = int(s["probability"] * factor)

        return scenarios[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¢–û–ü-3

    async def _get_wyckoff_phase(self, symbol: str) -> str:
        try:
            if hasattr(self.bot, "wyckoff_detector"):
                phase = self.bot.wyckoff_detector.get_phase(symbol)
                return phase or "Unknown"
            return "Unknown"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_wyckoff_phase: {e}")
            return "Unknown"

    async def _get_matched_scenarios(self, symbol: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ú–ú –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            ticker = await self._get_ticker(symbol)
            if not ticker:
                return [{"name": "‚ö™ No Data", "probability": 100}]

            # –ü–æ–ª—É—á–∞–µ–º MTF —Ç—Ä–µ–Ω–¥—ã
            mtf_data = await self._get_mtf_trends(symbol)

            # –ü–æ–ª—É—á–∞–µ–º volume –¥–∞–Ω–Ω—ã–µ
            volume_data = await self._get_volume_analysis(symbol, ticker)

            # –ü–æ–ª—É—á–∞–µ–º sentiment –¥–∞–Ω–Ω—ã–µ
            sentiment_data = await self._get_sentiment_pressure(symbol)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¢–û–ü-3 —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenarios = self._generate_top3_scenarios(
                ticker, mtf_data, volume_data, sentiment_data
            )

            logger.info(f"‚úÖ Generated {len(scenarios)} scenarios for {symbol}")
            return scenarios

        except Exception as e:
            logger.error(f"‚ùå Error getting scenarios: {e}")
            return [{"name": "‚ö†Ô∏è Analysis Error", "probability": 100}]

    async def _collect_market_data(self, symbol: str) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è scenario matching"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ticker
            ticker = await self._get_ticker(symbol)

            # –ü–æ–ª—É—á–∞–µ–º volume analysis
            volume_data = await self._get_volume_analysis(symbol, ticker)

            # –ü–æ–ª—É—á–∞–µ–º sentiment
            sentiment_data = await self._get_sentiment_pressure(symbol)

            # –ü–æ–ª—É—á–∞–µ–º MTF —Ç—Ä–µ–Ω–¥—ã
            mtf_trends = await self._get_mtf_trends(symbol)

            # –§–æ—Ä–º–∏—Ä—É–µ–º market_data –¥–ª—è scenario matcher
            market_data = {
                "symbol": symbol,
                "price": ticker["price"],
                "volume": ticker["volume_24h"],
                "change_24h": ticker["change_24h"],
                "cvd": volume_data.get("cvd", 0),
                "funding_rate": sentiment_data.get("funding_rate", 0),
                "open_interest": sentiment_data.get("open_interest", 0),
                "ls_ratio": sentiment_data.get("long_short_ratio", 1.0),
                "mtf_trends": mtf_trends,
            }

            return market_data

        except Exception as e:
            logger.error(f"_collect_market_data: {e}", exc_info=True)
            return {}

    async def _get_volume_analysis(self, symbol: str, ticker: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤"""
        try:
            volume_24h = ticker["volume_24h"]

            # CVD - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (L2 imbalance + Binance orderbook)
            cvd_value = 0.0
            cvd_label = "‚ö™ Neutral"

            try:
                # –ú–µ—Ç–æ–¥ 1: L2 imbalance –∏–∑ market_data
                if hasattr(self.bot, "market_data") and symbol in self.bot.market_data:
                    l2_data = self.bot.market_data[symbol].get("l2_imbalance", {})
                    if l2_data:
                        cvd_value = l2_data.get("imbalance_percent", 0.0)

                # –ú–µ—Ç–æ–¥ 2: Fallback –Ω–∞ Bybit orderbook –µ—Å–ª–∏ L2 = 0
                if cvd_value == 0.0:
                    try:
                        ob = await self.bot.bybit_connector.get_orderbook(
                            symbol, limit=50
                        )

                        if ob and "bids" in ob and "asks" in ob:
                            # –°—É–º–º–∏—Ä—É–µ–º —Ç–æ–ø-20 —É—Ä–æ–≤–Ω–µ–π
                            bids_volume = sum([float(b[1]) for b in ob["bids"][:20]])
                            asks_volume = sum([float(a[1]) for a in ob["asks"][:20]])

                            total_volume = bids_volume + asks_volume
                            if total_volume > 0:
                                cvd_value = (
                                    (bids_volume - asks_volume) / total_volume
                                ) * 100
                                logger.debug(
                                    f"‚úÖ CVD {symbol} (Bybit OB): {cvd_value:+.2f}%"
                                )
                            else:
                                logger.warning(f"‚ö†Ô∏è CVD {symbol}: total_volume = 0")
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è CVD {symbol}: Order Book –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                            )

                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è Bybit orderbook fallback failed: {e}")

                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è CVD
                if cvd_value > 10:
                    cvd_label = "üî• Extreme BUY"
                elif cvd_value > 5:
                    cvd_label = "üü¢ Strong BUY"
                elif cvd_value > 1:
                    cvd_label = "üü¢ BUY"
                elif cvd_value < -10:
                    cvd_label = "‚ùÑÔ∏è Extreme SELL"
                elif cvd_value < -5:
                    cvd_label = "üî¥ Strong SELL"
                elif cvd_value < -1:
                    cvd_label = "üî¥ SELL"
                else:
                    cvd_label = "‚ö™ Neutral"

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ CVD –¥–ª—è {symbol}: {e}")

            # Volume Profile
            vp_poc = 0
            vp_vah = 0
            vp_val = 0

            try:
                if hasattr(self.bot, "get_volume_profile"):
                    vp = await self.bot.get_volume_profile(symbol)
                    if vp:
                        vp_poc = vp.get("poc", 0)
                        vp_vah = vp.get("vah", 0)
                        vp_val = vp.get("val", 0)
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Volume Profile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            # Fallback –¥–ª—è VP - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if vp_poc == 0:
                current_price = ticker["price"]
                vp_poc = current_price
                vp_vah = current_price * 1.02
                vp_val = current_price * 0.98

            return {
                "volume_24h": volume_24h,
                "cvd": cvd_value,
                "cvd_label": cvd_label,
                "volume_profile": {"poc": vp_poc, "vah": vp_vah, "val": vp_val},
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_volume_analysis: {e}")
            return {
                "volume_24h": 0,
                "cvd": 0,
                "cvd_label": "‚ö™ Neutral",
                "volume_profile": {"poc": 0, "vah": 0, "val": 0},
            }

    # ‚úÖ PUBLIC API –¥–ª—è unified_dashboard
    async def get_volume_analysis(self, symbol: str) -> Dict:
        """
        PUBLIC –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CVD –¥–∞–Ω–Ω—ã—Ö
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è unified_dashboard
        """
        try:
            ticker = await self._get_ticker(symbol)
            return await self._get_volume_analysis(symbol, ticker)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ get_volume_analysis: {e}")
            return {
                "volume_24h": 0,
                "cvd": 0,
                "cvd_label": "‚ö™ Neutral",
                "volume_profile": {"poc": 0, "vah": 0, "val": 0},
            }

    async def get_sentiment_pressure(self, symbol: str) -> Dict:
        """
        PUBLIC –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sentiment –¥–∞–Ω–Ω—ã—Ö
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è unified_dashboard
        """
        try:
            return await self._get_sentiment_pressure(symbol)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ get_sentiment_pressure: {e}")
            return {
                "funding_rate": 0,
                "funding_label": "‚ö™ Neutral",
                "open_interest": 0,
                "long_short_ratio": 0,
                "ls_label": "‚ö™ Neutral",
                "news_sentiment": "neutral",
                "news_label": "‚ö™ Neutral",
            }


    async def _get_sentiment_pressure(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å sentiment –∏ –¥–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
        try:
            # Funding Rate - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π REST API
            funding_rate = 0.0
            funding_label = "‚ö™ Neutral"

            try:
                response = requests.get(
                    f"https://api.bybit.com/v5/market/funding/history",
                    params={"category": "linear", "symbol": symbol, "limit": 1},
                    timeout=3,
                )

                if response.status_code == 200:
                    data = response.json()
                    if data.get("retCode") == 0:
                        result = data.get("result", {}).get("list", [])
                        if result:
                            funding_rate = float(result[0].get("fundingRate", 0)) * 100

                            if funding_rate > 0.03:
                                funding_label = "üî• Very Bullish"
                            elif funding_rate > 0.01:
                                funding_label = "üü¢ Bullish"
                            elif funding_rate < -0.03:
                                funding_label = "‚ùÑÔ∏è Very Bearish"
                            elif funding_rate < -0.01:
                                funding_label = "üî¥ Bearish"
                            else:
                                funding_label = "‚ö™ Neutral"
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Funding –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            # Open Interest —Å Delta —Ä–∞—Å—á—ë—Ç–æ–º
            open_interest = 0
            oi_label = ""
            oi_delta_pct = 0.0
            oi_trend_emoji = ""

            try:
                response = requests.get(
                    "https://api.bybit.com/v5/market/open-interest",
                    params={
                        "category": "linear",
                        "symbol": symbol,
                        "intervalTime": "5min",
                        "limit": 1,
                    },
                    timeout=3,
                )

                if response.status_code == 200:
                    data = response.json()
                    if data.get("retCode") == 0:
                        result = data.get("result", {}).get("list", [])
                        if result:
                            open_interest = float(result[0].get("openInterest", 0))

                            # OI DELTA –†–ê–°–ß–Å–¢
                            try:
                                if not hasattr(self, "oi_cache"):
                                    self.oi_cache = {}
                                    logger.info("‚úÖ OI cache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                                cache_key = f"oi_{symbol}"
                                current_time = datetime.now()

                                if cache_key in self.oi_cache:
                                    prev_oi = self.oi_cache[cache_key]["value"]
                                    prev_time = self.oi_cache[cache_key]["time"]
                                    time_diff_seconds = (
                                        current_time - prev_time
                                    ).total_seconds()

                                    if time_diff_seconds > 3000:
                                        if prev_oi > 0:
                                            oi_delta_pct = (
                                                (open_interest - prev_oi) / prev_oi
                                            ) * 100

                                            if oi_delta_pct > 5:
                                                oi_trend_emoji = "üìà"
                                                oi_label = "üî• Rising"
                                            elif oi_delta_pct > 2:
                                                oi_trend_emoji = "‚¨ÜÔ∏è"
                                                oi_label = "üü¢ Growing"
                                            elif oi_delta_pct < -5:
                                                oi_trend_emoji = "üìâ"
                                                oi_label = "‚ùÑÔ∏è Falling"
                                            elif oi_delta_pct < -2:
                                                oi_trend_emoji = "‚¨áÔ∏è"
                                                oi_label = "üî¥ Declining"
                                            else:
                                                oi_trend_emoji = "‚û°Ô∏è"
                                                oi_label = "‚ö™ Stable"

                                            logger.info(
                                                f"üìä OI Delta {symbol}: {oi_delta_pct:+.2f}% "
                                                f"({prev_oi:,.0f} ‚Üí {open_interest:,.0f})"
                                            )
                                    else:
                                        minutes_left = int(
                                            (3000 - time_diff_seconds) / 60
                                        )
                                        logger.debug(
                                            f"‚è≥ OI Delta {symbol}: –∂–¥—ë–º {minutes_left} –º–∏–Ω"
                                        )
                                else:
                                    logger.info(f"üîÑ OI {symbol}: –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∫—ç—à")

                                self.oi_cache[cache_key] = {
                                    "value": open_interest,
                                    "time": current_time,
                                }

                            except Exception as delta_e:
                                logger.error(
                                    f"‚ùå OI Delta calculation failed: {delta_e}"
                                )

                            logger.debug(f"‚úÖ OI {symbol}: ${open_interest:,.0f}")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è OI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            # Long/Short Ratio
            long_short_ratio = 0.0
            ls_label = "‚ö™ Neutral"

            try:
                ls_ratio_data = await self.bot.bybit_connector.get_long_short_ratio(
                    symbol
                )
                if ls_ratio_data and isinstance(ls_ratio_data, dict):
                    long_short_ratio = ls_ratio_data.get("ratio", 0.0)

                    if long_short_ratio > 3:
                        ls_label = "üî• Very Bullish"
                    elif long_short_ratio > 1.5:
                        ls_label = "üü¢ Bullish"
                    elif long_short_ratio < 0.5:
                        ls_label = "‚ùÑÔ∏è Very Bearish"
                    elif long_short_ratio < 0.8:
                        ls_label = "üî¥ Bearish"
                    else:
                        ls_label = "‚ö™ Neutral"
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Long/Short Ratio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ FALLBACK –ë–õ–û–ö
            if long_short_ratio == 0.0:
                try:
                    logger.info(
                        f"üîÑ Fallback: —Ä–∞—Å—á—ë—Ç L/S Ratio –∏–∑ Order Book –¥–ª—è {symbol}"
                    )
                    ob = await self.bot.bybit_connector.get_orderbook(symbol, limit=50)
                    if ob and "bids" in ob and "asks" in ob:
                        bids_volume = sum([float(b[1]) for b in ob["bids"][:20]])
                        asks_volume = sum([float(a[1]) for a in ob["asks"][:20]])

                        if asks_volume > 0:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                            long_short_ratio = (
                                bids_volume / asks_volume
                            )  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û

                            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ OB imbalance
                            if long_short_ratio > 1.5:
                                ls_label = "üü¢ Bullish (OB)"
                            elif long_short_ratio < 0.7:
                                ls_label = "üî¥ Bearish (OB)"
                            else:
                                ls_label = "‚ö™ Neutral (OB)"

                            logger.info(
                                f"‚úÖ L/S Ratio (fallback): {long_short_ratio:.2f}"
                            )
                        else:
                            logger.warning(f"‚ö†Ô∏è Order Book: asks_volume = 0")
                    else:
                        logger.warning(f"‚ö†Ô∏è Order Book –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

                except Exception as fb_e:
                    logger.error(f"‚ùå L/S Ratio fallback failed: {fb_e}")

            # News Sentiment
            news_sentiment = "neutral"
            news_label = "‚ö™ Neutral"

            if hasattr(self.bot, "enhanced_sentiment"):
                try:
                    news_data = self.bot.enhanced_sentiment.get_symbol_sentiment(symbol)
                    if news_data:
                        news_sentiment = news_data.get("sentiment", "neutral")
                        if news_sentiment.lower() == "positive":
                            news_label = "üü¢ Bullish"
                        elif news_sentiment.lower() == "negative":
                            news_label = "üî¥ Bearish"
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è News sentiment –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

            return {
                "funding_rate": funding_rate,
                "funding_label": funding_label,
                "open_interest": open_interest,
                "oi_delta_pct": oi_delta_pct,
                "oi_trend_emoji": oi_trend_emoji,
                "oi_label": oi_label,
                "long_short_ratio": long_short_ratio,
                "ls_label": ls_label,
                "news_sentiment": news_sentiment,
                "news_label": news_label,
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_sentiment_pressure: {e}")
            return {
                "funding_rate": 0,
                "funding_label": "‚ö™ Neutral",
                "open_interest": 0,
                "long_short_ratio": 0,
                "ls_label": "‚ö™ Neutral",
                "news_sentiment": "neutral",
                "news_label": "‚ö™ Neutral",
            }

    async def _get_whale_activity(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"""
        try:
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º WhaleActivityTracker!
            if hasattr(self.bot, "whale_tracker"):
                whale_data = self.bot.whale_tracker.get_whale_activity(
                    symbol=symbol, timeframe_seconds=300  # 5 –º–∏–Ω—É—Ç
                )

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è dashboard
                count = whale_data.get("trades", 0)
                buy_volume = whale_data.get("buy_volume", 0.0)
                sell_volume = whale_data.get("sell_volume", 0.0)
                net_volume = whale_data.get("net", 0.0)
                dominant_side = whale_data.get("dominant_side", "neutral")

                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                if dominant_side == "bullish":
                    label = (
                        "üêã Strong BUY" if net_volume > buy_volume * 0.5 else "üêã BUY"
                    )
                elif dominant_side == "bearish":
                    label = (
                        "ü¶à Strong SELL"
                        if abs(net_volume) > sell_volume * 0.5
                        else "ü¶à SELL"
                    )
                else:
                    label = "‚ö™ Neutral"

                logger.debug(
                    f"‚úÖ Whale activity {symbol}: {count} trades, net=${net_volume:,.0f}"
                )

                return {
                    "count": count,
                    "buy_volume": buy_volume,
                    "sell_volume": sell_volume,
                    "net_volume": net_volume,
                    "largest_trade": 0.0,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ dashboard
                    "label": label,
                }

            # Fallback
            logger.warning(f"‚ö†Ô∏è whale_tracker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {
                "count": 0,
                "buy_volume": 0.0,
                "sell_volume": 0.0,
                "net_volume": 0.0,
                "largest_trade": 0.0,
                "label": "‚ö™ Neutral",
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ whale activity: {e}", exc_info=True)
            return {
                "count": 0,
                "buy_volume": 0.0,
                "sell_volume": 0.0,
                "net_volume": 0.0,
                "largest_trade": 0.0,
                "label": "‚ö™ Neutral",
            }

    async def _get_liquidation_levels(self, symbol: str, ticker: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å —Ä–∞—Å—á—ë—Ç–æ–º –∏–∑ Order Book"""
        try:
            current_price = ticker["price"]

            # –ü–æ–ª—É—á–∞–µ–º ATR –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
            atr = ticker.get("atr", current_price * 0.02)  # Fallback 2% –æ—Ç —Ü–µ–Ω—ã

            # –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω–µ–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
            # Long liquidation: —Ü–µ–Ω–∞ - (ATR * 5) ‚âà -5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø—Ä–∏ leverage 10x
            # Short liquidation: —Ü–µ–Ω–∞ + (ATR * 5) ‚âà +5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø—Ä–∏ leverage 10x
            long_liq_level = current_price - (atr * 5)
            short_liq_level = current_price + (atr * 5)

            # –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–æ–≤ –∏–∑ Order Book
            long_liq_volume = 0.0
            short_liq_volume = 0.0

            try:
                ob = await self.bot.bybit_connector.get_orderbook(symbol, limit=100)

                if ob and "bids" in ob and "asks" in ob:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º Order Book –æ–∫–æ–ª–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    # Long liquidations = –æ–±—ä—ë–º bids (–ø–æ–¥–¥–µ—Ä–∂–∫–∞)
                    # Short liquidations = –æ–±—ä—ë–º asks (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)

                    for bid in ob["bids"][:50]:
                        price = float(bid[0])
                        size = float(bid[1])
                        long_liq_volume += size * price

                    for ask in ob["asks"][:50]:
                        price = float(ask[0])
                        size = float(ask[1])
                        short_liq_volume += size * price

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (30% –æ–±—ä—ë–º–∞)
                    # –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π leverage (10x)
                    long_liq_volume = long_liq_volume * 0.3 * 10
                    short_liq_volume = short_liq_volume * 0.3 * 10

                    logger.debug(
                        f"‚úÖ Liquidation zones {symbol}: "
                        f"Long ${long_liq_volume:,.0f} @ ${long_liq_level:,.0f}, "
                        f"Short ${short_liq_volume:,.0f} @ ${short_liq_level:,.0f}"
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è Order Book –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π {symbol}"
                    )

            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Order Book fallback –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π failed: {e}")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            total_liq = long_liq_volume + short_liq_volume

            if total_liq > 100_000_000:  # >$100M
                risk_level = "üî¥ High"
            elif total_liq > 50_000_000:  # >$50M
                risk_level = "üü° Medium"
            else:
                risk_level = "‚ö™ Low"

            return {
                "long_liq_level": long_liq_level,
                "short_liq_level": short_liq_level,
                "long_liq_volume": long_liq_volume,
                "short_liq_volume": short_liq_volume,
                "risk_level": risk_level,
            }

        except Exception as e:
            logger.error(f"‚ùå Liquidation levels error: {e}")
            return {
                "long_liq_level": 0,
                "short_liq_level": 0,
                "long_liq_volume": 0,
                "short_liq_volume": 0,
                "risk_level": "‚ö™ Low",
            }

    async def _get_mtf_trends(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å multi-timeframe —Ç—Ä–µ–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        try:
            trends = {}

            for tf, interval in [("1h", "60"), ("4h", "240"), ("1d", "D")]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
                    klines = await self.bot.bybit_connector.get_klines(
                        symbol, interval, 100
                    )

                    if not klines or len(klines) < 20:
                        trends[tf] = "‚ö™ NEUTRAL"
                        continue

                    # get_klines –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[Dict], –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ pandas
                    import pandas as pd

                    df = pd.DataFrame(klines)

                    close = df["close"].values
                    high = df["high"].values
                    low = df["low"].values

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # 1. –ë–ê–ó–û–í–´–ô –¢–†–ï–ù–î (EMA 20)
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    ema20 = pd.Series(close).ewm(span=20, adjust=False).mean().iloc[-1]
                    current_price = close[-1]

                    if current_price > ema20 * 1.005:  # +0.5% –≤—ã—à–µ EMA
                        base_trend = "üü¢ UP"
                    elif current_price < ema20 * 0.995:  # -0.5% –Ω–∏–∂–µ EMA
                        base_trend = "üî¥ DOWN"
                    else:
                        base_trend = "‚ö™ NEUTRAL"

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # 2. RSI –ö–û–ù–¢–ï–ö–°–¢
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    context_labels = []

                    try:
                        delta = pd.Series(close).diff()
                        gain = delta.where(delta > 0, 0).rolling(window=14).mean()
                        loss = -delta.where(delta < 0, 0).rolling(window=14).mean()

                        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                        rs = gain / loss.replace(0, 0.0001)
                        rsi = 100 - (100 / (1 + rs))
                        current_rsi = rsi.iloc[-1]

                        if not pd.isna(current_rsi):
                            if current_rsi < 30:
                                context_labels.append("oversold")
                                context_labels.append(f"RSI {current_rsi:.0f}")
                            elif current_rsi > 70:
                                context_labels.append("overbought")
                                context_labels.append(f"RSI {current_rsi:.0f}")
                            elif current_rsi < 40 and base_trend == "üî¥ DOWN":
                                context_labels.append(f"RSI {current_rsi:.0f}")
                            elif current_rsi > 60 and base_trend == "üü¢ UP":
                                context_labels.append(f"RSI {current_rsi:.0f}")

                    except Exception as rsi_e:
                        logger.debug(f"‚ö†Ô∏è RSI calculation error for {tf}: {rsi_e}")

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # 3. MACD MOMENTUM
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    try:
                        ema12 = pd.Series(close).ewm(span=12, adjust=False).mean()
                        ema26 = pd.Series(close).ewm(span=26, adjust=False).mean()
                        macd = ema12 - ema26
                        macd_signal = macd.ewm(span=9, adjust=False).mean()
                        macd_hist = macd - macd_signal

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ momentum
                        if len(macd_hist) >= 3:
                            current_hist = abs(macd_hist.iloc[-1])
                            prev_hist = abs(macd_hist.iloc[-2])
                            prev_prev_hist = abs(macd_hist.iloc[-3])

                            # Momentum weakening –µ—Å–ª–∏ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–∞—Ä–∞ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
                            if current_hist < prev_hist < prev_prev_hist:
                                context_labels.append("momentum weakening")

                    except Exception as macd_e:
                        logger.debug(f"‚ö†Ô∏è MACD calculation error for {tf}: {macd_e}")

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # 4. SUPPORT/RESISTANCE TESTING
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    try:
                        recent_high = max(high[-20:])
                        recent_low = min(low[-20:])

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1%)
                        distance_to_high = (
                            abs(current_price - recent_high) / current_price
                        )
                        distance_to_low = (
                            abs(current_price - recent_low) / current_price
                        )

                        if distance_to_high < 0.01:
                            context_labels.append("testing resistance")
                        elif distance_to_low < 0.01:
                            context_labels.append("testing support")

                    except Exception as sr_e:
                        logger.debug(f"‚ö†Ô∏è S/R testing error for {tf}: {sr_e}")

                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # 5. –§–ò–ù–ê–õ–¨–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    if context_labels:
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –º–µ—Ç–æ–∫
                        final_context = ", ".join(context_labels[:2])
                        trends[tf] = f"{base_trend} ({final_context})"
                    else:
                        trends[tf] = base_trend

                    logger.debug(f"‚úÖ MTF {tf}: {trends[tf]}")

                except Exception as tf_e:
                    logger.error(f"‚ùå MTF error for {tf}: {tf_e}")
                    trends[tf] = "‚ö™ NEUTRAL"

            return trends

        except Exception as e:
            logger.error(f"‚ùå _get_mtf_trends critical error: {e}", exc_info=True)
            return {"1h": "‚ö™ NEUTRAL", "4h": "‚ö™ NEUTRAL", "1d": "‚ö™ NEUTRAL"}

    async def _get_key_levels(self, symbol: str, volume_data: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            vp = volume_data.get("volume_profile", {})
            poc = vp.get("poc", 0)
            vah = vp.get("vah", 0)
            val = vp.get("val", 0)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VP –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
            if poc > 0:
                return {
                    "resistance": [vah, vah * 1.02],
                    "support": [val, val * 0.98],
                    "invalidation": val * 0.95,
                    "pivot": poc,
                }

            # Fallback
            return {
                "resistance": [0, 0],
                "support": [0, 0],
                "invalidation": 0,
                "pivot": 0,
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_key_levels: {e}")
            return {
                "resistance": [0, 0],
                "support": [0, 0],
                "invalidation": 0,
                "pivot": 0,
            }

    async def _format_dashboard(
        self,
        symbol: str,
        ticker: Dict,
        regime: Dict,
        mm_scenario: Dict,
        volume_data: Dict,
        sentiment_data: Dict,
        mtf_trends: Dict,
        levels: Dict,
        whale_activity: Dict,
        liquidation_levels: Dict,
        matched_scenarios: Optional[list] = None,
        wyckoff_phase: Optional[str] = None,
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ –≤ —Ç–µ–∫—Å—Ç –¥–ª—è Telegram"""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        price = ticker["price"]
        price_change_24h = ticker["change_24h"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        f = self.formatter

        text = f"""üìä **{symbol} MARKET INTELLIGENCE**

üí∞ **Price:** {f.format_price(price)} ({f.format_percentage(price_change_24h)})
üìà **Market Regime:** {f.get_regime_emoji(regime['regime'])} {regime['regime']} (Conf: {regime['confidence']:.0%})
üéØ **Strategy Pattern:** {mm_scenario['scenario_name']} (Conf: {mm_scenario['confidence']:.0%})

"""
        if wyckoff_phase:
            text += f"\nüìä **Wyckoff Phase:** {wyckoff_phase}"

        if matched_scenarios:
            text += "\n\nüß† **MARKET SCENARIOS**"
            for i, sc in enumerate(matched_scenarios, start=1):
                name = sc.get("name", "Unknown")
                prob = sc.get("probability", 0)
                text += f"\n‚îú‚îÄ {i}Ô∏è‚É£ {name} ‚Üí {prob:.0f}%"
            logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(matched_scenarios)}—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ –¥–∞—à–±–æ—Ä–¥–µ")

        text += f"""

üìä **VOLUME ANALYSIS**
‚îú‚îÄ 24h Vol: {f.format_volume(volume_data['volume_24h'])}
‚îú‚îÄ CVD: {f.format_percentage(volume_data['cvd'])} {volume_data['cvd_label']}
‚îî‚îÄ VP: POC {f.format_price(volume_data['volume_profile']['poc'], 0)} | VAH {f.format_price(volume_data['volume_profile']['vah'], 0)} | VAL {f.format_price(volume_data['volume_profile']['val'], 0)}

üî• **SENTIMENT & PRESSURE**
‚îú‚îÄ Funding: {f.format_percentage(sentiment_data['funding_rate'], 3)} {sentiment_data['funding_label']}
‚îú‚îÄ OI: {f.format_volume(sentiment_data['open_interest'])} ({sentiment_data['oi_delta_pct']:+.1f}% –∑–∞ 1—á) {sentiment_data['oi_trend_emoji']}
‚îú‚îÄ L/S Ratio: {sentiment_data['long_short_ratio']:.2f} {sentiment_data['ls_label']}
‚îî‚îÄ News: {sentiment_data['news_label']}

üêã **WHALE ACTIVITY (5min)**
‚îú‚îÄ Trades: {whale_activity['count']}
‚îú‚îÄ Buy Vol: {f.format_volume(whale_activity['buy_volume'])}
‚îú‚îÄ Sell Vol: {f.format_volume(whale_activity['sell_volume'])}
‚îî‚îÄ Net: {f.format_volume(whale_activity['net_volume'])} {whale_activity['label']}

‚ö†Ô∏è **LIQUIDATION ZONES**
‚îú‚îÄ Long Liq: {f.format_price(liquidation_levels['long_liq_level'], 0)} ({f.format_volume(liquidation_levels['long_liq_volume'])})
‚îú‚îÄ Short Liq: {f.format_price(liquidation_levels['short_liq_level'], 0)} ({f.format_volume(liquidation_levels['short_liq_volume'])})
‚îî‚îÄ Risk: {liquidation_levels['risk_level']}


üéØ **MULTI-TIMEFRAME**
‚îú‚îÄ 1H: {f.get_trend_emoji(mtf_trends['1h'])} {mtf_trends['1h']}
‚îú‚îÄ 4H: {f.get_trend_emoji(mtf_trends['4h'])} {mtf_trends['4h']}
‚îî‚îÄ 1D: {f.get_trend_emoji(mtf_trends['1d'])} {mtf_trends['1d']}

üìå **KEY LEVELS**
‚îú‚îÄ Pivot: {f.format_price(levels['pivot'], 0)}
‚îú‚îÄ Resistance: {', '.join([f.format_price(r, 0) for r in levels['resistance'][:3]])}
‚îî‚îÄ Support: {', '.join([f.format_price(s, 0) for s in levels['support'][:3]])}


‚è±Ô∏è Updated: {f.format_timestamp()}"""

        # ü§ñ AI INTERPRETATION (Gemini 2.0)
        if self.gemini:
            try:
                gemini_metrics = {
                    "symbol": symbol,
                    "cvd": volume_data.get("cvd", 0),
                    "funding_rate": sentiment_data.get("funding_rate", 0),
                    "open_interest": sentiment_data.get("open_interest", 0),
                    "ls_ratio": sentiment_data.get("long_short_ratio", 1.0),
                    "orderbook_pressure": 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    "whale_activity": [{"volume": whale_activity.get("net_volume", 0)}]
                }

                ai_interpretation = await self.gemini.interpret_metrics(gemini_metrics)

                if ai_interpretation:
                    text += f"\n\n AI INTERPRETATION \n{ai_interpretation}"

            except Exception as e:
                logger.error(f"‚ùå Gemini interpretation failed: {e}")

        text += f"\n\n‚è±Ô∏è Updated: {f.format_timestamp()}"
        return text.strip()

    async def _calculate_support_resistance(self, symbol: str, ticker: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Support/Resistance —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –∏–∑ –ë–î
            import sqlite3

            conn = sqlite3.connect("data/gio_crypto_bot.db")
            cursor = conn.cursor()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–≤–µ—á–µ–π (5m timeframe)
            cursor.execute(
                """
                SELECT high, low, close
                FROM market_data
                WHERE symbol = ?
                ORDER BY timestamp DESC
                LIMIT 1000
            """,
                (symbol,),
            )

            candles = cursor.fetchall()
            conn.close()

            if len(candles) < 100:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è S/R: {len(candles)} —Å–≤–µ—á–µ–π")
                return {"support": [], "resistance": [], "pivot": 0}

            # –ú–µ—Ç–æ–¥ 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ Pivot Points
            recent = candles[:20]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
            high = max([c[0] for c in recent])
            low = min([c[1] for c in recent])
            close = recent[0][2]

            pivot = (high + low + close) / 3
            r1 = (2 * pivot) - low
            r2 = pivot + (high - low)
            s1 = (2 * pivot) - high
            s2 = pivot - (high - low)

            # –ú–µ—Ç–æ–¥ 2: Fractal-based S/R (–Ω–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ max/min)
            highs = [c[0] for c in candles]
            lows = [c[1] for c in candles]

            resistance_levels = []
            support_levels = []

            # –ù–∞—Ö–æ–¥–∏–º —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã (resistance)
            for i in range(2, len(highs) - 2):
                if (
                    highs[i] > highs[i - 1]
                    and highs[i] > highs[i - 2]
                    and highs[i] > highs[i + 1]
                    and highs[i] > highs[i + 2]
                ):
                    resistance_levels.append(highs[i])

            # –ù–∞—Ö–æ–¥–∏–º —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (support)
            for i in range(2, len(lows) - 2):
                if (
                    lows[i] < lows[i - 1]
                    and lows[i] < lows[i - 2]
                    and lows[i] < lows[i + 1]
                    and lows[i] < lows[i + 2]
                ):
                    support_levels.append(lows[i])

            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º —É—Ä–æ–≤–Ω–∏ (—É–±–∏—Ä–∞–µ–º –±–ª–∏–∑–∫–∏–µ)
            current_price = ticker["price"]
            tolerance = current_price * 0.01  # 1% –∑–æ–Ω–∞

            def cluster_levels(levels):
                if not levels:
                    return []
                levels = sorted(set(levels))
                clustered = [levels[0]]
                for level in levels[1:]:
                    if abs(level - clustered[-1]) > tolerance:
                        clustered.append(level)
                return clustered[:5]  # –¢–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π

            resistance_final = cluster_levels(
                [l for l in resistance_levels if l > current_price]
            )
            support_final = cluster_levels(
                [l for l in support_levels if l < current_price]
            )

            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ pivot points
            all_resistance = sorted(set(resistance_final + [r1, r2]))[:3]
            all_support = sorted(set(support_final + [s1, s2]), reverse=True)[:3]

            logger.debug(
                f"‚úÖ S/R –¥–ª—è {symbol}: Support={all_support}, Resistance={all_resistance}"
            )

            return {
                "support": all_support,
                "resistance": all_resistance,
                "pivot": pivot,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ S/R: {e}", exc_info=True)
            return {"support": [], "resistance": [], "pivot": 0}


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["MarketDashboard"]
