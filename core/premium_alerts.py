#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π, –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–æ–≤ –∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤
"""

import asyncio
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from collections import deque
from config.settings import logger


class PremiumAlertSystem:
    """
    –ü—Ä–µ–º–∏—É–º —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:
    - –õ–∏–∫–≤–∏–¥–∞—Ü–∏–π (–∫—Ä—É–ø–Ω—ã—Ö)
    - –í—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–æ–≤
    - –î–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ orderbook
    - Sentiment –Ω–æ–≤–æ—Å—Ç–µ–π
    """

    def __init__(self):
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.liquidation_threshold_usd = 1_000_000  # $1M+
        self.volume_spike_multiplier = 3.0  # 3x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
        self.imbalance_threshold = 2.0  # ratio 2:1

        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö
        self.volume_history = {}  # symbol -> deque of volumes
        self.history_window = 20  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–µ—Ä–∏–æ–¥–æ–≤

        # –ö—ç—à –∞–ª–µ—Ä—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
        self.recent_alerts = deque(maxlen=100)

        logger.info("‚úÖ PremiumAlertSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def check_liquidations(
        self,
        symbol: str,
        liquidations: List[Dict]
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π

        Args:
            symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            liquidations: —Å–ø–∏—Å–æ–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —Å –ø–æ–ª—è–º–∏ side, price, quantity

        Returns:
            Dict —Å –∞–ª–µ—Ä—Ç–æ–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫—Ä—É–ø–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è
        """
        try:
            if not liquidations:
                return None

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            large_liquidations = []

            for liq in liquidations:
                value_usd = float(liq.get('price', 0)) * float(liq.get('quantity', 0))

                if value_usd >= self.liquidation_threshold_usd:
                    large_liquidations.append({
                        'side': liq.get('side', 'unknown'),
                        'price': float(liq.get('price', 0)),
                        'quantity': float(liq.get('quantity', 0)),
                        'value_usd': value_usd,
                        'timestamp': liq.get('timestamp', datetime.now().isoformat())
                    })

            if not large_liquidations:
                return None

            # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º
            long_liq_total = sum(
                liq['value_usd'] for liq in large_liquidations
                if liq['side'] == 'long'
            )
            short_liq_total = sum(
                liq['value_usd'] for liq in large_liquidations
                if liq['side'] == 'short'
            )

            total_liquidated = long_liq_total + short_liq_total

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω—ã
            if long_liq_total > short_liq_total * 1.5:
                dominant_side = 'long'
                implication = 'bearish'
            elif short_liq_total > long_liq_total * 1.5:
                dominant_side = 'short'
                implication = 'bullish'
            else:
                dominant_side = 'mixed'
                implication = 'neutral'

            alert = {
                'type': 'LIQUIDATION',
                'symbol': symbol,
                'severity': 'HIGH' if total_liquidated > 5_000_000 else 'MEDIUM',
                'total_liquidated_usd': total_liquidated,
                'long_liquidations': long_liq_total,
                'short_liquidations': short_liq_total,
                'dominant_side': dominant_side,
                'market_implication': implication,
                'count': len(large_liquidations),
                'timestamp': datetime.now().isoformat()
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if not self._is_duplicate_alert(alert):
                self.recent_alerts.append(alert)

                logger.warning(
                    f"üö® LIQUIDATION ALERT {symbol}: "
                    f"${total_liquidated:,.0f} liquidated "
                    f"({dominant_side} dominant ‚Üí {implication})"
                )

                return alert

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π {symbol}: {e}")
            return None

    async def check_volume_spike(
        self,
        symbol: str,
        current_volume: float
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞

        Args:
            symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            current_volume: —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥

        Returns:
            Dict —Å –∞–ª–µ—Ä—Ç–æ–º –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Å–ø–ª–µ—Å–∫
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            if symbol not in self.volume_history:
                self.volume_history[symbol] = deque(maxlen=self.history_window)

            history = self.volume_history[symbol]

            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if len(history) < 5:
                history.append(current_volume)
                return None

            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            avg_volume = sum(history) / len(history)
            std_dev = (
                sum((v - avg_volume) ** 2 for v in history) / len(history)
            ) ** 0.5

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–ø–ª–µ—Å–∫
            spike_multiplier = current_volume / avg_volume if avg_volume > 0 else 0

            if spike_multiplier >= self.volume_spike_multiplier:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã –≤—Å–ø–ª–µ—Å–∫–∞
                z_score = (current_volume - avg_volume) / std_dev if std_dev > 0 else 0

                if z_score >= 3:
                    severity = 'EXTREME'
                elif z_score >= 2:
                    severity = 'HIGH'
                else:
                    severity = 'MEDIUM'

                alert = {
                    'type': 'VOLUME_SPIKE',
                    'symbol': symbol,
                    'severity': severity,
                    'current_volume': current_volume,
                    'average_volume': avg_volume,
                    'spike_multiplier': round(spike_multiplier, 2),
                    'z_score': round(z_score, 2),
                    'timestamp': datetime.now().isoformat()
                }

                if not self._is_duplicate_alert(alert):
                    self.recent_alerts.append(alert)

                    logger.warning(
                        f"üö® VOLUME SPIKE {symbol}: "
                        f"{spike_multiplier:.2f}x average "
                        f"({severity})"
                    )

                    history.append(current_volume)
                    return alert

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            history.append(current_volume)
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ volume spike {symbol}: {e}")
            return None

    async def check_orderbook_imbalance(
        self,
        symbol: str,
        imbalance_data: Dict
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—å–Ω—ã—Ö –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤ –≤ orderbook

        Args:
            symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            imbalance_data: –¥–∞–Ω–Ω—ã–µ –∏–∑ ExoChartsVolumeProfileL2

        Returns:
            Dict —Å –∞–ª–µ—Ä—Ç–æ–º –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å
        """
        try:
            ratio = imbalance_data.get('ratio', 1.0)
            imbalance_type = imbalance_data.get('type', 'balanced')
            strength = imbalance_data.get('strength', 0)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å
            if ratio >= self.imbalance_threshold or ratio <= 1 / self.imbalance_threshold:

                if ratio >= 3.0 or ratio <= 0.33:
                    severity = 'EXTREME'
                elif ratio >= 2.5 or ratio <= 0.4:
                    severity = 'HIGH'
                else:
                    severity = 'MEDIUM'

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if imbalance_type == 'strong_bid':
                    direction = 'BULLISH'
                    side_ratio = f"{ratio:.2f}:1 (bid dominance)"
                elif imbalance_type == 'strong_ask':
                    direction = 'BEARISH'
                    side_ratio = f"1:{1/ratio:.2f} (ask dominance)"
                else:
                    direction = 'NEUTRAL'
                    side_ratio = "balanced"

                alert = {
                    'type': 'ORDERBOOK_IMBALANCE',
                    'symbol': symbol,
                    'severity': severity,
                    'direction': direction,
                    'bid_ask_ratio': ratio,
                    'side_ratio': side_ratio,
                    'strength': strength,
                    'timestamp': datetime.now().isoformat()
                }

                if not self._is_duplicate_alert(alert):
                    self.recent_alerts.append(alert)

                    logger.warning(
                        f"üö® ORDERBOOK IMBALANCE {symbol}: "
                        f"{side_ratio} ‚Üí {direction} ({severity})"
                    )

                    return alert

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ imbalance {symbol}: {e}")
            return None

    async def check_sentiment_alert(
        self,
        sentiment_data: Dict
    ) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π sentiment

        Args:
            sentiment_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç PremiumSentimentAnalyzer

        Returns:
            Dict —Å –∞–ª–µ—Ä—Ç–æ–º –µ—Å–ª–∏ sentiment —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π
        """
        try:
            score = sentiment_data.get('overall_score', 0)
            sentiment = sentiment_data.get('sentiment', 'neutral')

            # –ê–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if abs(score) >= 60:

                if abs(score) >= 80:
                    severity = 'EXTREME'
                else:
                    severity = 'HIGH'

                key_events = sentiment_data.get('key_events', [])[:3]

                alert = {
                    'type': 'SENTIMENT_EXTREME',
                    'severity': severity,
                    'sentiment': sentiment,
                    'score': score,
                    'key_events': key_events,
                    'total_news': sentiment_data.get('total_news', 0),
                    'timestamp': datetime.now().isoformat()
                }

                if not self._is_duplicate_alert(alert):
                    self.recent_alerts.append(alert)

                    logger.warning(
                        f"üö® SENTIMENT ALERT: {sentiment.upper()} "
                        f"(score: {score:.1f}) - {severity}"
                    )

                    return alert

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sentiment alert: {e}")
            return None

    def _is_duplicate_alert(self, alert: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)"""
        alert_signature = f"{alert['type']}_{alert.get('symbol', 'global')}"
        cutoff_time = datetime.now() - timedelta(minutes=5)

        for recent_alert in self.recent_alerts:
            if recent_alert.get('type') == alert['type'] and \
               recent_alert.get('symbol') == alert.get('symbol'):
                alert_time = datetime.fromisoformat(recent_alert['timestamp'])
                if alert_time > cutoff_time:
                    return True

        return False

    def get_recent_alerts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return list(self.recent_alerts)[-limit:]
