# -*- coding: utf-8 -*-
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GIO Crypto Bot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Railway deployment
"""

import os
import sys
import json
import logging
from pathlib import Path
from typing import List
from dotenv import load_dotenv


# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–í–´–ß–ï–ö ===
def get_env(key, default=None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, —É–¥–∞–ª—è—è –∫–∞–≤—ã—á–∫–∏"""
    value = os.getenv(key, default)
    if value and isinstance(value, str):
        value = value.strip().strip('"').strip("'")
    return value


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent.parent


# ============================================================================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø (–î–û load_dotenv!)
# ============================================================================
IS_RAILWAY = os.environ.get('RAILWAY_ENVIRONMENT') is not None
ENVIRONMENT = "PRODUCTION" if IS_RAILWAY else os.getenv("BOT_MODE", "development").upper()
PRODUCTION_MODE = ENVIRONMENT == "PRODUCTION"
DEVELOPMENT_MODE = not PRODUCTION_MODE


# === –ë–ê–ó–ê –î–ê–ù–ù–´–• (–°–ù–ê–ß–ê–õ–ê RAILWAY!) ===
DATABASE_URL = os.environ.get("DATABASE_URL")  # Railway –ø–µ—Ä–µ–¥–∞—ë—Ç —á–µ—Ä–µ–∑ environ



# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if not IS_RAILWAY:
    load_dotenv()
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not DATABASE_URL:
        DATABASE_URL = f"sqlite:///{str(BASE_DIR / 'data' / 'gio_crypto_bot.db')}"

# Railway Postgres –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç postgres://, –Ω—É–∂–Ω–æ postgresql://
if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = BASE_DIR / "data"
LOGS_DIR = DATA_DIR / "logs"
SCENARIOS_DIR = DATA_DIR / "scenarios"
CACHE_DIR = DATA_DIR / "cache"

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
DATABASE_PATH = str(DATA_DIR / "gio_crypto_bot.db")



# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for directory in [DATA_DIR, LOGS_DIR, SCENARIOS_DIR, CACHE_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

# ============================================================================
# API –ö–õ–Æ–ß–ò
# ============================================================================
BYBIT_API_KEY = get_env("BYBIT_API_KEY")
BYBIT_SECRET_KEY = get_env("BYBIT_SECRET_KEY")
CRYPTOPANIC_API_KEY = get_env("CRYPTOPANIC_API_KEY")
CRYPTOCOMPARE_API_KEY = get_env("CRYPTOCOMPARE_API_KEY")
BINANCE_API_KEY = get_env("BINANCE_API_KEY")
BINANCE_API_SECRET = get_env("BINANCE_API_SECRET")
GEMINI_API_KEY = get_env("GEMINI_API_KEY")

# ============================================================================
# TELEGRAM BOT CONFIGURATION
# ============================================================================
TELEGRAM_BOT_TOKEN = get_env("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = get_env("TELEGRAM_CHAT_ID")

# üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if DEVELOPMENT_MODE:
    print("=" * 70)
    print("üîç DEBUG TELEGRAM CONFIG:")
    print(
        f"   TELEGRAM_BOT_TOKEN = {TELEGRAM_BOT_TOKEN[:20] + '...' if TELEGRAM_BOT_TOKEN else '‚ùå –ü–£–°–¢–û'}"
    )
    print(
        f"   TELEGRAM_CHAT_ID = {TELEGRAM_CHAT_ID if TELEGRAM_CHAT_ID else '‚ùå –ü–£–°–¢–û'}"
    )
    print("=" * 70)

TELEGRAM_CONFIG = {
    "enabled": bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID),
    "token": TELEGRAM_BOT_TOKEN,
    "chat_id": TELEGRAM_CHAT_ID,
    "auto_signals": True,
    "auto_alerts": True,
    "commands_enabled": True,
}

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –î–õ–Ø RAILWAY)
# ============================================================================
if PRODUCTION_MODE:
    LOG_LEVEL = logging.WARNING  # –ú–µ–Ω—å—à–µ –ª–æ–≥–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    LOG_TO_FILE = False  # –ù–µ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª (Railway —Ö—Ä–∞–Ω–∏—Ç –ª–æ–≥–∏)
    LOG_TO_CONSOLE = True
else:
    LOG_LEVEL = logging.INFO  # –ë–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    LOG_TO_FILE = True
    LOG_TO_CONSOLE = True

LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
handlers = [logging.StreamHandler(sys.stdout)] if LOG_TO_CONSOLE else []

if LOG_TO_FILE and DEVELOPMENT_MODE:
    handlers.append(
        logging.FileHandler(
            LOGS_DIR / f"gio_bot_{'production' if PRODUCTION_MODE else 'dev'}.log",
            encoding="utf-8",
        )
    )

logging.basicConfig(
    level=LOG_LEVEL,
    format=LOG_FORMAT,
    datefmt=LOG_DATE_FORMAT,
    handlers=handlers,
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.ERROR)
logging.getLogger("urllib3").setLevel(logging.ERROR)
logging.getLogger("websockets").setLevel(logging.ERROR)
logging.getLogger("asyncio").setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
logging.getLogger("gio_bot").setLevel(LOG_LEVEL)
logging.getLogger("trading").setLevel(logging.WARNING)
logging.getLogger("connectors").setLevel(logging.WARNING)
logging.getLogger("filters").setLevel(
    logging.INFO if DEVELOPMENT_MODE else logging.WARNING
)
logging.getLogger("database").setLevel(logging.ERROR)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("gio_bot")

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
logger.info(f"üöÄ ENVIRONMENT: {ENVIRONMENT}")
logger.info(f"üóÑÔ∏è Database: {'PostgreSQL (Railway)' if DATABASE_URL.startswith('postgresql://') else 'SQLite (local)'}")
if PRODUCTION_MODE:
    logger.info("üöÄ PRODUCTION MODE: –ó–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
else:
    logger.info("üß™ DEVELOPMENT MODE: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram bot
logger.info(
    f"üì± Telegram bot: {'‚úÖ Enabled' if TELEGRAM_CONFIG['enabled'] else '‚ùå Disabled'}"
)

# ============================================================================
# –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• –í –ü–†–û–î–ê–ö–®–ï–ù–ï (DEBUG MODE)
# ============================================================================
if PRODUCTION_MODE:
    # DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç Railway
    logger.warning("=" * 70)
    logger.warning("üîç DEBUG: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway:")
    logger.warning(f"   TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:30]+'...' if TELEGRAM_BOT_TOKEN else '‚ùå –ü–£–°–¢–û'}")
    logger.warning(f"   TELEGRAM_CHAT_ID: {TELEGRAM_CHAT_ID if TELEGRAM_CHAT_ID else '‚ùå –ü–£–°–¢–û'}")
    logger.warning(f"   BYBIT_API_KEY: {BYBIT_API_KEY[:15]+'...' if BYBIT_API_KEY else '‚ùå –ü–£–°–¢–û'}")
    logger.warning(f"   BYBIT_SECRET_KEY: {BYBIT_SECRET_KEY[:15]+'...' if BYBIT_SECRET_KEY else '‚ùå –ü–£–°–¢–û'}")
    logger.warning("=" * 70)
    logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ")

    # –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û:
    # required_vars = {
    #     "TELEGRAM_BOT_TOKEN": TELEGRAM_BOT_TOKEN,
    #     "TELEGRAM_CHAT_ID": TELEGRAM_CHAT_ID,
    #     "BYBIT_API_KEY": BYBIT_API_KEY,
    #     "BYBIT_SECRET_KEY": BYBIT_SECRET_KEY,
    # }
    # missing_vars = [name for name, value in required_vars.items() if not value]
    # if missing_vars:
    #     error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    #     logger.error(error_msg)
    #     raise ValueError(error_msg)
    # logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –¢–û–†–ì–û–í–õ–ò
# ============================================================================
TRADING_CONFIG = {
    "max_position_size": float(os.getenv("MAX_POSITION_SIZE", "1000")),
    "risk_per_trade": float(os.getenv("RISK_PER_TRADE", "2.0")),
    "max_open_positions": int(os.getenv("MAX_OPEN_POSITIONS", "5")),
    "min_rr_ratio": float(os.getenv("MIN_RR_RATIO", "1.5")),
}

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ú–Ø–¢–ò (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –î–õ–Ø RAILWAY 512MB RAM)
# ============================================================================
MEMORY_CONFIG = {
    "max_memory_mb": int(
        os.getenv("MAX_MEMORY_MB", "400" if PRODUCTION_MODE else "1024")
    ),
    "cleanup_interval": int(
        os.getenv("CLEANUP_INTERVAL", "180" if PRODUCTION_MODE else "300")
    ),
}

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò WEBSOCKET
# ============================================================================
WEBSOCKET_CONFIG = {
    "ping_interval": int(os.getenv("WS_PING_INTERVAL", "30")),
    "ping_timeout": int(os.getenv("WS_PING_TIMEOUT", "10")),
    "reconnect_delay": int(os.getenv("WS_RECONNECT_DELAY", "5")),
}

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================
SCANNER_CONFIG = {
    "scan_interval_minutes": int(os.getenv("SCAN_INTERVAL", "5")),
    "deal_threshold": float(os.getenv("DEAL_THRESHOLD", "0.75")),
    "risky_threshold": float(os.getenv("RISKY_THRESHOLD", "0.55")),
    "observation_threshold": float(os.getenv("OBSERVATION_THRESHOLD", "0.35")),
}

# ============================================================================
# BINANCE CONFIGURATION
# ============================================================================
BINANCE_CONFIG = {
    "api_key": BINANCE_API_KEY,
    "api_secret": BINANCE_API_SECRET,
    "testnet": DEVELOPMENT_MODE,
    "rate_limit": 1200,
}

# ============================================================================
# TRIGGER SYSTEM CONFIGURATION
# ============================================================================
TRIGGER_CONFIG = {
    "t1_sensitivity": 0.7,
    "t2_sensitivity": 1.5,
    "t3_sensitivity": 0.6,
    "require_all_triggers": False,
}

# MULTI-TIMEFRAME FILTER CONFIGURATION
MULTI_TF_FILTER_CONFIG = {
    "enabled": True,
    "require_all_aligned": False,
    "min_aligned_count": 2,
    "higher_tf_weight": 2.0,
}

# ============================================================================
# PERFORMANCE OPTIMIZATION
# ============================================================================
PERFORMANCE_CONFIG = {
    "process_pool_workers": 2 if PRODUCTION_MODE else 4,  # –ú–µ–Ω—å—à–µ workers –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    "thread_pool_workers": 5 if PRODUCTION_MODE else 10,
    "batch_size": 100,
    "batch_flush_interval": 5.0,
}

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================
TESTING_CONFIG = {
    "enable_tests": DEVELOPMENT_MODE,
    "test_mode": False,
    "mock_api_responses": False,
}

# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
MAX_MEMORY_MB = MEMORY_CONFIG["max_memory_mb"]
DB_FILE = str(DATA_DIR / "gio_crypto_bot.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Volume Profile
VOLUME_PROFILE_LEVELS_COUNT = 50
VOLUME_PROFILE_LOOKBACK = 100
INSTITUTIONAL_VOLUME_THRESHOLD = 1000000
ICEBERG_DETECTION_THRESHOLD = 5

# –ü–æ—Ä–æ–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
DEAL_THRESHOLD = SCANNER_CONFIG["deal_threshold"]
RISKY_THRESHOLD = SCANNER_CONFIG["risky_threshold"]
OBSERVATION_THRESHOLD = SCANNER_CONFIG["observation_threshold"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL
DEFAULT_ATR_SL_MULTIPLIER = 1.5
DEFAULT_TP1_PERCENT = 1.5
DEFAULT_TP2_PERCENT = 3.0
DEFAULT_TP3_PERCENT = 5.0
DEFAULT_TP1_PCT = DEFAULT_TP1_PERCENT
DEFAULT_TP2_PCT = DEFAULT_TP2_PERCENT
DEFAULT_TP3_PCT = DEFAULT_TP3_PERCENT
MIN_RR_RATIO = TRADING_CONFIG["min_rr_ratio"]

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è Veto —Å–∏—Å—Ç–µ–º—ã
FUNDING_RATE_VETO_THRESHOLD = 0.01
LIQUIDITY_VETO_THRESHOLD = 100000
VOLATILITY_VETO_THRESHOLD = 5.0
VOLUME_ANOMALY_VETO_THRESHOLD = 3.0
SPREAD_VETO_THRESHOLD = 0.5
NEWS_SENTIMENT_VETO_THRESHOLD = -0.7
CORRELATION_VETO_THRESHOLD = 0.3
ATR_VETO_MULTIPLIER = 3.0
RSI_OVERBOUGHT_THRESHOLD = 80
RSI_OVERSOLD_THRESHOLD = 20

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
LIQUIDATION_CASCADE_VETO_COUNT = 5
LIQUIDATION_VOLUME_THRESHOLD = 1000000

# –ê–ª–∏–∞—Å—ã –∏–∑ TRADING_CONFIG
MAX_POSITION_SIZE = TRADING_CONFIG["max_position_size"]
RISK_PER_TRADE = TRADING_CONFIG["risk_per_trade"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
MARKET_STABILITY_THRESHOLD = 0.8
ORDER_BOOK_IMBALANCE_THRESHOLD = 0.7
BID_ASK_RATIO_THRESHOLD = 0.3
PRICE_IMPACT_THRESHOLD = 0.02

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
CANDLE_LOOKBACK_PERIOD = 100
INDICATOR_CALCULATION_PERIOD = 14
TREND_CONFIRMATION_CANDLES = 3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_EXPIRY_SECONDS = 300
NEWS_CACHE_EXPIRY = 600
ORDERBOOK_CACHE_EXPIRY = 10

# –õ–∏–º–∏—Ç—ã API
BINANCE_API_RATE_LIMIT = 1200
BYBIT_API_RATE_LIMIT = 600
NEWS_API_RATE_LIMIT = 100

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ENABLE_TELEGRAM_NOTIFICATIONS = TELEGRAM_CONFIG["enabled"]
NOTIFICATION_PRIORITY_THRESHOLD = 0.7

logger.info("‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def load_trading_pairs() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        TRADING_PAIRS_CONFIG = Path(__file__).parent / "trading_pairs.json"

        if TRADING_PAIRS_CONFIG.exists():
            with open(TRADING_PAIRS_CONFIG, "r", encoding="utf-8") as f:
                config = json.load(f)

            active_pairs = [
                pair["symbol"]
                for pair in config.get("tracked_symbols", [])
                if pair.get("enabled", False)
            ]

            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –∏–∑ JSON")
            return active_pairs
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª trading_pairs.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ trading_pairs.json: {e}")

    # Fallback: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    default_pairs = ["BTCUSDT"] if PRODUCTION_MODE else ["BTCUSDT", "ETHUSDT"]
    logger.info(f"üìã Fallback: {default_pairs}")
    return default_pairs


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
TRACKED_SYMBOLS = load_trading_pairs()
logger.info(f"üéØ TRACKED_SYMBOLS: {len(TRACKED_SYMBOLS)} –ø–∞—Ä")
