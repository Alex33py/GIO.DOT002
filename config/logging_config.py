# config/logging_config.py
import logging
import os
from logging.handlers import RotatingFileHandler
from pathlib import Path
from datetime import datetime


class LogConfig:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é dev/prod —Ä–µ–∂–∏–º—ñ–≤
    """

    # –î–û–ë–ê–í–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ –ü–ï–†–ï–î ENV:
    @staticmethod
    def _get_env(key, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–µ–∑ –∫–∞–≤—ã—á–µ–∫"""
        value = os.getenv(key, default)
        if value and isinstance(value, str):
            value = value.strip().strip('"').strip("'")
        return value

    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∑ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è –∞–±–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    ENV = _get_env.__func__('ENVIRONMENT', 'development')

    # –†—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
    LOG_LEVELS = {
        'development': logging.DEBUG,   # –ü–æ–≤–Ω—ñ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        'production': logging.WARNING   # –¢—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    }

    # –§–æ—Ä–º–∞—Ç–∏ –ª–æ–≥—ñ–≤
    FORMATS = {
        'detailed': '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(funcName)s() - %(message)s',
        'simple': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        'minimal': '%(asctime)s - %(levelname)s - %(message)s'
    }

    @classmethod
    def setup_logger(cls, name='gio_bot', environment=None):
        """
        –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ logger –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

        Args:
            name: –Ü–º'—è logger (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'gio_bot')
            environment: 'development' –∞–±–æ 'production' (—è–∫—â–æ None - –∑ ENV)

        Returns:
            –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π logger
        """

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
        env = environment or cls.ENV
        log_level = cls.LOG_LEVELS.get(env, logging.DEBUG)

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
        log_dir = Path('data/logs')
        log_dir.mkdir(parents=True, exist_ok=True)

        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ logger
        logger = logging.getLogger(name)
        logger.handlers.clear()  # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ handlers
        logger.setLevel(logging.DEBUG)  # Logger –ø—Ä–∏–π–º–∞—î –≤—Å—ñ —Ä—ñ–≤–Ω—ñ

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if env == 'development':
            console_format = cls.FORMATS['detailed']
            file_format = cls.FORMATS['detailed']
            console_level = logging.DEBUG
        else:
            console_format = cls.FORMATS['simple']
            file_format = cls.FORMATS['simple']
            console_level = logging.WARNING

        # === HANDLER 1: –ö–æ–Ω—Å–æ–ª—å (–∑ –∫–æ–ª—å–æ—Ä–∞–º–∏) ===
        console_handler = logging.StreamHandler()
        console_handler.setLevel(console_level)
        console_formatter = ColoredFormatter(console_format)
        console_handler.setFormatter(console_formatter)
        logger.addHandler(console_handler)

        # === HANDLER 2: –§–∞–π–ª DEBUG (—Ç—ñ–ª—å–∫–∏ –¥–ª—è development) ===
        if env == 'development':
            debug_file = log_dir / 'gio_bot_debug.log'
            debug_handler = RotatingFileHandler(
                debug_file,
                maxBytes=10*1024*1024,  # 10 MB
                backupCount=5,
                encoding='utf-8'
            )
            debug_handler.setLevel(logging.DEBUG)
            debug_formatter = logging.Formatter(cls.FORMATS['detailed'])
            debug_handler.setFormatter(debug_formatter)
            logger.addHandler(debug_handler)

            print(f"üìÅ Debug log: {debug_file}")

        # === HANDLER 3: –§–∞–π–ª WARNING+ (–∑–∞–≤–∂–¥–∏) ===
        error_file = log_dir / f'gio_bot_{env}_errors.log'
        error_handler = RotatingFileHandler(
            error_file,
            maxBytes=5*1024*1024,  # 5 MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.WARNING)
        error_formatter = logging.Formatter(cls.FORMATS['detailed'])
        error_handler.setFormatter(error_formatter)
        logger.addHandler(error_handler)

        # === HANDLER 4: –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª (–≤—Å—ñ –ø–æ–¥—ñ—ó) ===
        main_file = log_dir / f'gio_bot_{env}.log'
        main_handler = RotatingFileHandler(
            main_file,
            maxBytes=10*1024*1024,  # 10 MB
            backupCount=3,
            encoding='utf-8'
        )
        main_handler.setLevel(log_level)
        main_formatter = logging.Formatter(file_format)
        main_handler.setFormatter(main_formatter)
        logger.addHandler(main_handler)

        # –í–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        print("=" * 70)
        print(f"üöÄ GIO Bot Logging: {env.upper()} MODE")
        print(f"üìä Log Level: {logging.getLevelName(log_level)}")
        print(f"üìÅ Main log: {main_file}")
        print(f"üìÅ Error log: {error_file}")
        print("=" * 70)

        # –õ–æ–≥—É–≤–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ —Å–µ—Å—ñ—ó
        logger.info("="*70)
        logger.info(f"üöÄ Logging initialized: {env.upper()} mode at {datetime.now()}")
        logger.info(f"üìä Log level: {logging.getLevelName(log_level)}")
        logger.info("="*70)

        return logger


class ColoredFormatter(logging.Formatter):
    """
    Formatter –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ANSI)
    """

    # ANSI –∫–æ–¥–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[35m',   # Magenta
        'RESET': '\033[0m'        # Reset
    }

    def format(self, record):
        # –î–æ–¥–∞—Ç–∏ –∫–æ–ª—ñ—Ä –¥–æ levelname
        levelname = record.levelname
        if levelname in self.COLORS:
            colored_levelname = f"{self.COLORS[levelname]}{levelname}{self.COLORS['RESET']}"
            record.levelname = colored_levelname

        return super().format(record)


class ModuleLoggerAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –º–æ–¥—É–ª—ñ–≤
    """

    @staticmethod
    def set_module_level(module_name: str, level: int):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è

        Args:
            module_name: –ù–∞–∑–≤–∞ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 'analytics.mtf_analyzer')
            level: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è (logging.DEBUG, logging.INFO, —Ç–æ—â–æ)
        """
        module_logger = logging.getLogger(module_name)
        module_logger.setLevel(level)

        level_name = logging.getLevelName(level)
        print(f"‚úÖ {module_name} ‚Üí {level_name}")

    @staticmethod
    def silence_module(module_name: str):
        """
        –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–¥—É–ª—è
        """
        module_logger = logging.getLogger(module_name)
        module_logger.disabled = True
        print(f"üîá {module_name} DISABLED")

    @staticmethod
    def enable_debug_for(*modules):
        """
        –®–≤–∏–¥–∫–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ DEBUG –¥–ª—è —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª—ñ–≤

        Args:
            *modules: –ù–∞–∑–≤–∏ –º–æ–¥—É–ª—ñ–≤ (–±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É 'gio_bot.')
        """
        print("\nüîß ENABLING DEBUG MODE FOR:")
        print("-" * 60)
        for module in modules:
            full_name = f"gio_bot.{module}" if not module.startswith('gio_bot') else module
            ModuleLoggerAdapter.set_module_level(full_name, logging.DEBUG)
        print("-" * 60)

    @staticmethod
    def disable_noisy_modules():
        """
        –í–∏–º–∫–Ω—É—Ç–∏ —à—É–º–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ –º–æ–¥—É–ª—ñ
        """
        noisy_modules = [
            'urllib3.connectionpool',
            'asyncio',
            'websocket',
            'httpx',
            'httpcore'
        ]

        print("\nüîá SILENCING NOISY MODULES:")
        print("-" * 60)
        for module in noisy_modules:
            try:
                logging.getLogger(module).setLevel(logging.WARNING)
                print(f"   {module} ‚Üí WARNING")
            except:
                pass
        print("-" * 60)

    @staticmethod
    def show_all_loggers():
        """
        –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ loggers —Ç–∞ —ó—Ö —Ä—ñ–≤–Ω—ñ
        """
        loggers = [
            logging.getLogger(name)
            for name in logging.root.manager.loggerDict
        ]

        print("\nüìä ACTIVE LOGGERS:")
        print("-" * 70)
        print(f"{'Logger Name':<45} | {'Level':<10} | Status")
        print("-" * 70)

        for logger in sorted(loggers, key=lambda x: x.name):
            if not isinstance(logger, logging.PlaceHolder):
                level = logging.getLevelName(logger.level)
                disabled = "üîá DISABLED" if logger.disabled else "‚úÖ ACTIVE"
                print(f"{logger.name:<45} | {level:<10} | {disabled}")

        print("-" * 70)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è logger
def get_logger(name='gio_bot'):
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π logger

    Args:
        name: –Ü–º'—è logger

    Returns:
        Logger instance
    """
    return logging.getLogger(name)
