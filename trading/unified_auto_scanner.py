#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Unified Auto Scanner - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UnifiedScenarioMatcher + –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
"""

import asyncio
import time
from typing import Optional, List, Dict
from datetime import datetime
from config.settings import logger, TRACKED_SYMBOLS, SCANNER_CONFIG
from utils.data_validator import DataValidator  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!


class UnifiedAutoScanner:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""

    def __init__(
        self,
        bot_instance,
        bybit_connector,
        binance_connector,
        indicator_calculator,
        signal_generator,
        telegram_handler,
        signal_recorder=None,
        scenario_matcher=None,
        sentiment_analyzer=None,
        veto_system=None,
        interval: int = 300,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä–∞

        Args:
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            bybit_connector: Bybit API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            binance_connector: Binance API –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            indicator_calculator: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            signal_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
            telegram_handler: Telegram –±–æ—Ç handler
            signal_recorder: –†–µ–∫–æ—Ä–¥–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            scenario_matcher: UnifiedScenarioMatcher (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            sentiment_analyzer: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            veto_system: –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω)
        """
        self.bot = bot_instance
        self.bybit_connector = bybit_connector
        self.binance_connector = binance_connector
        self.indicator_calculator = indicator_calculator
        self.signal_generator = signal_generator
        self.telegram_handler = telegram_handler
        self.signal_recorder = signal_recorder
        self.scenario_matcher = scenario_matcher
        self.sentiment_analyzer = sentiment_analyzer
        self.veto_system = veto_system

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.interval_minutes = interval // 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
        self.symbols = TRACKED_SYMBOLS
        self.is_running = False
        self.scan_task = None

        # ‚úÖ –ê–ù–¢–ò-–°–ü–ê–ú –ù–ê–°–¢–†–û–ô–ö–ò
        self.last_signal_time = {}  # {"BTCUSDT": timestamp}
        self.signal_cooldown = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        self.signals_per_hour = []  # [timestamp1, timestamp2, ...]
        self.max_signals_per_hour = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
        self.max_active_positions_per_symbol = 2  # –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É

        logger.info(
            f"‚úÖ UnifiedAutoScanner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω)"
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è AutoScanner —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ AutoScanner (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω)")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_task = asyncio.create_task(self._scan_loop())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoScanner...")
        self.is_running = False

        if self.scan_task:
            self.scan_task.cancel()
            try:
                await self.scan_task
            except asyncio.CancelledError:
                pass

        logger.info("‚úÖ AutoScanner –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _scan_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            while self.is_running:
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    await self.scan_market()
                    await asyncio.sleep(self.interval_minutes * 60)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        except asyncio.CancelledError:
            logger.info("üõë –¶–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω")

    async def scan_market(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö"""
        try:
            now = time.time()
            hour_ago = now - 3600
            self.signals_per_hour = [t for t in self.signals_per_hour if t > hour_ago]

            if len(self.signals_per_hour) >= self.max_signals_per_hour:
                logger.warning(
                    f"‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {self.max_signals_per_hour}/—á–∞—Å"
                )
                return
            logger.info(f"üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ ({len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤)")

            signals_found = 0

            for symbol in self.symbols:
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                    result = await self.analyze_symbol(symbol)

                    if result and result.get("signal"):
                        signals_found += 1
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª: {symbol} {result['direction']}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å recorder
                        if self.signal_recorder:
                            signal_id = self.signal_recorder.record_signal(
                                symbol=symbol,
                                direction=result["direction"],
                                entry_price=result["entry_price"],
                                sl=result["stop_loss"],
                                tp1=result["tp1"],
                                tp2=result["tp2"],
                                tp3=result["tp3"],
                                scenario_id=result.get("scenario_id", "auto_scanner"),
                                status="active",
                                quality_score=result.get("quality_score", 0),
                                risk_reward=result.get("risk_reward", 0),
                            )

                            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª #{signal_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
                            # ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –°–ò–ì–ù–ê–õ –í –õ–ò–ú–ò–¢–ï
                            self.signals_per_hour.append(now)

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ market_data –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /scenario
                            try:
                                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú result –ù–ê–ü–†–Ø–ú–£–Æ (–±–µ–∑ market_data)
                                self.bot.market_data[symbol] = {
                                    "price": result["entry_price"],
                                    "cvd": result.get(
                                        "cvd", 0
                                    ),  # ‚Üê –ù–ê–ü–†–Ø–ú–£–Æ –ò–ó result!
                                    "volume_ratio": result.get(
                                        "volume_ratio", 0
                                    ),  # ‚Üê –ù–ê–ü–†–Ø–ú–£–Æ –ò–ó result!
                                    "funding_rate": result.get("funding_rate", 0),
                                    "long_short_ratio": result.get(
                                        "long_short_ratio", 0
                                    ),
                                    "market_regime": result.get(
                                        "market_regime", "Unknown"
                                    ),
                                    "wyckoff_phase": result.get(
                                        "wyckoff_phase", "Unknown"
                                    ),
                                    "pattern": result.get("scenario_name", "Unknown"),
                                    "strategy": result.get("strategy", "Unknown"),
                                    "score": result.get("quality_score", 0),
                                    "trend_1h": result.get("trend_1h", "UNKNOWN"),
                                    "trend_4h": result.get("trend_4h", "UNKNOWN"),
                                    "trend_1d": result.get("trend_1d", "UNKNOWN"),
                                    "mtf_aligned": result.get("mtf_aligned", 0),
                                    "mtf_agreement": result.get("mtf_agreement", 0),
                                    "timestamp": datetime.now().isoformat(),
                                }
                                logger.info(
                                    f"üíæ {symbol}: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ market_data –¥–ª—è /scenario"
                                )
                                logger.debug(
                                    f"üîç DEBUG: bot.market_data[{symbol}] CVD={self.bot.market_data.get(symbol, {}).get('cvd', 'N/A')}"
                                )
                                logger.debug(
                                    f"üîç DEBUG: –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ market_data: {len(self.bot.market_data)}"
                                )
                            except Exception as e:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}"
                                )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                            if (
                                hasattr(self.bot, "telegram_handler")
                                and self.bot.telegram_handler
                            ):
                                try:
                                    await self.bot.telegram_handler.notify_new_signal(
                                        {
                                            "id": signal_id,
                                            "symbol": symbol,
                                            "direction": result["direction"],
                                            "entry_price": result["entry_price"],
                                            "tp1": result["tp1"],
                                            "tp2": result["tp2"],
                                            "tp3": result["tp3"],
                                            "stop_loss": result["stop_loss"],
                                            "quality_score": result.get(
                                                "quality_score", 0
                                            ),
                                            "risk_reward": result.get("risk_reward", 0),
                                            "timestamp": datetime.now(),
                                        }
                                    )
                                    logger.info(
                                        f"üì® –°–∏–≥–Ω–∞–ª #{signal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
                                    )
                                except Exception as e:
                                    logger.error(
                                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"
                                    )

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                    await asyncio.sleep(0.5)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    continue

            logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {signals_found} —Å–∏–≥–Ω–∞–ª–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ scan_market: {e}")

    # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ú–ï–¢–û–î –ó–î–ï–°–¨:
    async def scan_symbol(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

        Returns:
            Dict —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∞—á–µ None
        """
        try:
            logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ analyze_symbol
            result = await self.analyze_symbol(symbol)

            if not result or not result.get("signal"):
                logger.debug(f"‚ÑπÔ∏è {symbol}: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å recorder
            if self.signal_recorder:
                signal_id = self.signal_recorder.record_signal(
                    symbol=symbol,
                    direction=result["direction"],
                    entry_price=result["entry_price"],
                    sl=result["stop_loss"],
                    tp1=result["tp1"],
                    tp2=result["tp2"],
                    tp3=result["tp3"],
                    scenario_id=result.get("scenario_id", "auto_scanner"),
                    status="active",
                    quality_score=result.get("quality_score", 0),
                    risk_reward=result.get("risk_reward", 0),
                )

                logger.info(f"‚úÖ {symbol}: –°–∏–≥–Ω–∞–ª #{signal_id} —Å–æ–∑–¥–∞–Ω")

                # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –í market_data –î–õ–Ø –ö–û–ú–ê–ù–î–´ /scenario
                try:
                    self.bot.market_data[symbol] = {
                        "price": result["entry_price"],
                        "cvd": result.get("cvd", 0),
                        "volume_ratio": result.get("volume_ratio", 0),
                        "funding_rate": result.get("funding_rate", 0),
                        "long_short_ratio": result.get("long_short_ratio", 0),
                        "market_regime": result.get("market_regime", "Unknown"),
                        "wyckoff_phase": result.get("wyckoff_phase", "Unknown"),
                        "pattern": result.get("scenario_name", "Unknown"),
                        "strategy": result.get("strategy", "Unknown"),
                        "score": result.get("quality_score", 0),
                        "trend_1h": result.get("trend_1h", "UNKNOWN"),
                        "trend_4h": result.get("trend_4h", "UNKNOWN"),
                        "trend_1d": result.get("trend_1d", "UNKNOWN"),
                        "mtf_aligned": result.get("mtf_aligned", 0),
                        "mtf_agreement": result.get("mtf_agreement", 0),
                        "timestamp": datetime.now().isoformat(),
                    }
                    logger.info(
                        f"üíæ {symbol}: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ market_data –¥–ª—è /scenario"
                    )
                    logger.debug(
                        f"üîç DEBUG: bot.market_data[{symbol}] CVD={self.bot.market_data.get(symbol, {}).get('cvd', 'N/A')}"
                    )
                    logger.debug(
                        f"üîç DEBUG: –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ market_data: {len(self.bot.market_data)}"
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è market_data –¥–ª—è {symbol}: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                if hasattr(self.bot, "telegram_handler") and self.bot.telegram_handler:
                    try:
                        await self.bot.telegram_handler.notify_new_signal(
                            {
                                "id": signal_id,
                                "symbol": symbol,
                                "direction": result["direction"],
                                "entry_price": result["entry_price"],
                                "tp1": result["tp1"],
                                "tp2": result["tp2"],
                                "tp3": result["tp3"],
                                "stop_loss": result["stop_loss"],
                                "quality_score": result.get("quality_score", 0),
                                "risk_reward": result.get("risk_reward", 0),
                                "status": result.get("status", "active"),
                            }
                        )
                        logger.info(f"üì® –°–∏–≥–Ω–∞–ª #{signal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                # ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –í–ï–°–¨ –û–ë–™–ï–ö–¢ –° –î–ï–¢–ê–õ–Ø–ú–ò!
                return {
                    "signal_id": signal_id,
                    "symbol": symbol,
                    "direction": result["direction"],
                    "entry_price": result["entry_price"],
                    "stop_loss": result["stop_loss"],
                    "tp1": result["tp1"],
                    "tp2": result["tp2"],
                    "tp3": result["tp3"],
                    "quality_score": result.get("quality_score", 0),
                    "risk_reward": result.get("risk_reward", 0),
                    "status": result.get("status", "active"),
                }

            return None

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ scan_symbol {symbol}: {e}")
            return None

    async def scan_multiple_symbols(self, symbols: List[str]) -> List[Dict]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            tasks = [self.scan_symbol(symbol) for symbol in symbols]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            signal_data = [
                result
                for result in results
                if isinstance(result, dict) and result is not None
            ]

            if signal_data:
                logger.info(
                    f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(signal_data)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
                )

            return signal_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ scan_multiple_symbols: {e}")
            return []

    async def analyze_symbol(self, symbol: str) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        try:
            # ‚úÖ 1. –ü–†–û–í–ï–†–ö–ê COOLDOWN
            now = time.time()
            last_time = self.last_signal_time.get(symbol, 0)

            if now - last_time < self.signal_cooldown:
                remaining_min = int((self.signal_cooldown - (now - last_time)) / 60)
                logger.debug(f"‚è∏Ô∏è {symbol}: cooldown ({remaining_min} –º–∏–Ω –æ—Å—Ç–∞–ª–æ—Å—å)")
                return None

            # ‚úÖ 2. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–û–ó–ò–¶–ò–ô
            if hasattr(self.bot, "roi_tracker"):
                active_signals = self.bot.roi_tracker.get_active_signals_by_symbol(
                    symbol
                )
                if len(active_signals) >= self.max_active_positions_per_symbol:
                    logger.debug(
                        f"‚è∏Ô∏è {symbol}: {len(active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–ª–∏–º–∏—Ç)"
                    )
                    return None

            # ========== 3. –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –†–´–ù–ö–ê ==========

            market_data = await self._get_market_data(symbol)
            if not market_data:
                return None

            # ========== 4. –í–ê–õ–ò–î–ê–¶–ò–Ø MARKET DATA ==========
            current_price = market_data.get("close", 0)
            if not DataValidator.validate_price(current_price, symbol):
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None

            # ========== 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô ==========
            candles = market_data.get("candles", [])
            if not DataValidator.validate_candles_list(candles, min_length=20):
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–≤–µ—á–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None

            # ========== 6. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ==========
            indicators = {}
            mtf_trends = {}
            volume_profile = await self.bot.get_volume_profile(symbol)

            # –í–ê–õ–ò–î–ê–¶–ò–Ø VOLUME PROFILE
            if volume_profile:
                poc = volume_profile.get("poc")
                vah = volume_profile.get("vah")
                val = volume_profile.get("val")

                if not all(
                    [
                        DataValidator.validate_price(poc, f"{symbol}.poc"),
                        DataValidator.validate_price(vah, f"{symbol}.vah"),
                        DataValidator.validate_price(val, f"{symbol}.val"),
                    ]
                ):
                    logger.warning(
                        f"‚ö†Ô∏è {symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Volume Profile, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback"
                    )
                    volume_profile = {}
            else:
                logger.debug(f"‚ö†Ô∏è {symbol}: Volume Profile –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                volume_profile = {}

            news_sentiment = {}
            veto_checks = {}

            # –ï—Å–ª–∏ –µ—Å—Ç—å MTF analyzer - –ø–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã
            if hasattr(self.bot, "mtf_analyzer") and self.bot.mtf_analyzer:
                try:
                    mtf_trends = {"1h": "neutral", "4h": "neutral", "1d": "neutral"}
                except:
                    pass

            # –ï—Å–ª–∏ –µ—Å—Ç—å sentiment analyzer - –ø–æ–ª—É—á–∞–µ–º sentiment
            if hasattr(self.bot, "enhanced_sentiment") and self.bot.enhanced_sentiment:
                try:
                    news_sentiment = {"overall": "neutral", "score": 0.5}
                except:
                    pass

            # ========== 7. –ò–©–ï–ú –°–û–í–ü–ê–î–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ==========
            match_result = self.scenario_matcher.match_scenario(
                symbol=symbol,
                market_data=market_data,
                indicators=indicators,
                mtf_trends=mtf_trends,
                volume_profile=volume_profile,
                news_sentiment=news_sentiment,
                veto_checks=veto_checks,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å match
            if not match_result:
                return None

            # ========== 8. –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–´ ==========
            direction = match_result.get("direction", "LONG")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            cvd_value = 0
            volume_ratio_value = 0
            trend_1h = "UNKNOWN"
            trend_4h = "UNKNOWN"
            trend_1d = "UNKNOWN"
            mtf_aligned = 0
            mtf_agreement = 0

            # 8.1 CONFIRM FILTER
            if hasattr(self.bot, "confirm_filter") and self.bot.confirm_filter:
                logger.info(f"üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Confirm Filter –¥–ª—è {symbol}...")

                # ‚úÖ –°–û–ó–î–ê–Å–ú signal_data –° –†–ï–ê–õ–¨–ù–´–ú –°–¶–ï–ù–ê–†–ò–ï–ú!
                signal_data = {
                    "pattern": match_result.get("scenario_name", "Unknown"),
                    "direction": direction,
                }

                filters_passed = await self.bot.confirm_filter.validate(
                    symbol,
                    direction,
                    market_data,
                    signal_data,  # ‚Üê –ü–ï–†–ï–î–ê–Å–ú signal_data!
                )

                # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú CVD **–°–†–ê–ó–£** –ü–û–°–õ–ï validate() (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!)
                try:
                    cvd_value = self.bot.confirm_filter.last_cvd or 0
                    volume_ratio_value = self.bot.confirm_filter.last_volume_ratio or 0
                    logger.debug(
                        f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∏–∑ confirm_filter: CVD={cvd_value}, Volume={volume_ratio_value}"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CVD –∏–∑ confirm_filter: {e}")

                if not filters_passed:
                    logger.warning(
                        f"‚ùå {symbol} {direction}: –°–∏–≥–Ω–∞–ª –û–¢–ö–õ–û–ù–Å–ù Confirm Filter"
                    )
                    return None

                logger.info(f"‚úÖ {symbol}: Confirm Filter –ø—Ä–æ–π–¥–µ–Ω")

            # 8.2 MULTI-TF FILTER + –ü–û–õ–£–ß–ï–ù–ò–ï MTF –î–ê–ù–ù–´–•
            if hasattr(self.bot, "multi_tf_filter") and self.bot.multi_tf_filter:
                logger.info(f"üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Multi-TF Filter –¥–ª—è {symbol}...")

                is_valid, trends, mtf_reason = await self.bot.multi_tf_filter.validate(
                    symbol=symbol,
                    direction=direction,
                    scenario_name=match_result.get("scenario_name"),
                )

                if not is_valid:
                    logger.warning(
                        f"‚ùå {symbol} {direction}: –°–∏–≥–Ω–∞–ª –û–¢–ö–õ–û–ù–Å–ù Multi-TF Filter: {mtf_reason}"
                    )
                    return None

                logger.info(f"‚úÖ {symbol}: Multi-TF Filter –ø—Ä–æ–π–¥–µ–Ω: {mtf_reason}")
                logger.info(f"   –¢—Ä–µ–Ω–¥—ã: {trends}")

                # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú MTF –î–ê–ù–ù–´–ï –°–†–ê–ó–£!
                if trends:
                    trend_1h = trends.get("1h", "UNKNOWN")
                    trend_4h = trends.get("4h", "UNKNOWN")
                    trend_1d = trends.get("1d", "UNKNOWN")
                    mtf_aligned = trends.get("aligned_count", 0)

                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–Å–¢ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò
                    total_trends = 3

                    if direction.upper() == "LONG":
                        target_trend = "UP"
                    elif direction.upper() == "SHORT":
                        target_trend = "DOWN"
                    else:
                        target_trend = direction.upper()

                    aligned_trends = sum(
                        [
                            1 if trend_1h.upper() == target_trend else 0,
                            1 if trend_4h.upper() == target_trend else 0,
                            1 if trend_1d.upper() == target_trend else 0,
                        ]
                    )
                    mtf_agreement = int((aligned_trends / total_trends) * 100)

                    logger.debug(
                        f"   üìä {symbol} MTF: {trend_1h}/{trend_4h}/{trend_1d} ({mtf_agreement}%)"
                    )

            # ========== 9. –ü–†–û–í–ï–†–Ø–ï–ú STATUS ==========
            if match_result.get("status") == "observation":
                logger.debug(f"‚è≠Ô∏è {symbol}: observation —Ä–µ–∂–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None

            # ========== 10. –í–ê–õ–ò–î–ê–¶–ò–Ø TP/SL ==========
            entry_price = match_result.get("entry_price", 0)
            stop_loss = match_result.get("stop_loss", 0)
            tp1 = match_result.get("tp1", 0)
            tp2 = match_result.get("tp2", 0)
            tp3 = match_result.get("tp3", 0)

            if not all(
                [
                    DataValidator.validate_price(entry_price, f"{symbol}.entry"),
                    DataValidator.validate_price(stop_loss, f"{symbol}.sl"),
                    DataValidator.validate_price(tp1, f"{symbol}.tp1"),
                    DataValidator.validate_price(tp2, f"{symbol}.tp2"),
                    DataValidator.validate_price(tp3, f"{symbol}.tp3"),
                ]
            ):
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ TP/SL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª")
                return None

            # ========== 11. –ü–û–õ–£–ß–ê–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ==========
            # Funding Rate
            funding_rate = 0.0
            try:
                if hasattr(self.bot, "bybit_connector") and self.bot.bybit_connector:
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    if ticker:
                        funding_rate = float(ticker.get("fundingRate", 0))
                        logger.debug(f"   üìä {symbol} Funding Rate: {funding_rate:.4%}")
            except Exception as e:
                logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Funding Rate –¥–ª—è {symbol}: {e}")

            # Long/Short Ratio
            long_short_ratio = 0.0
            try:
                if hasattr(self.bot, "bybit_connector") and self.bot.bybit_connector:
                    ls_ratio = self.bot.bybit_connector.get_long_short_ratio(
                        symbol
                    )

                    if ls_ratio:
                        long_short_ratio = float(ls_ratio.get("ratio", 0))
                        logger.debug(
                            f"   üìä {symbol} L/S Ratio: {long_short_ratio:.2f}"
                        )
            except Exception as e:
                logger.debug(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å L/S Ratio –¥–ª—è {symbol}: {e}")

            # ========== 12. –§–û–†–ú–ò–†–£–ï–ú –°–ò–ì–ù–ê–õ ==========
            signal = {
                "signal": True,
                "symbol": symbol,
                "direction": match_result.get("direction", "LONG"),
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "tp1": tp1,
                "tp2": tp2,
                "tp3": tp3,
                "scenario_id": match_result.get("scenario_id", "unknown"),
                "scenario_name": match_result.get("scenario_name", "Unknown"),
                "status": match_result.get("status", "active"),
                "quality_score": match_result.get("score", 0),
                "risk_reward": match_result.get("risk_reward", 2.0),
                "cvd": cvd_value,
                "volume_ratio": volume_ratio_value,
                "funding_rate": funding_rate,
                "long_short_ratio": long_short_ratio,
                "market_regime": match_result.get("market_regime", "Unknown"),
                "wyckoff_phase": match_result.get("wyckoff_phase", "Unknown"),
                "strategy": match_result.get("strategy", "Unknown"),
                "trend_1h": trend_1h,
                "trend_4h": trend_4h,
                "trend_1d": trend_1d,
                "mtf_aligned": mtf_aligned,
                "mtf_agreement": mtf_agreement,
            }
            self.last_signal_time[symbol] = now
            logger.info(f"‚úÖ {symbol}: —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, cooldown –∞–∫—Ç–∏–≤–µ–Ω")
            return signal

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ analyze_symbol –¥–ª—è {symbol}: {e}")
            return None

    async def _get_market_data(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –±–æ—Ç–∞
            if not hasattr(self.bot, "bybit_connector"):
                logger.error("‚ùå bybit_connector –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot_instance")
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä
            ticker = await self.bot.bybit_connector.get_ticker(symbol)
            if not ticker:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ticker")
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1h)
            candles = await self.bot.bybit_connector.get_klines(
                symbol=symbol, interval="60", limit=100  # 1h
            )

            if not candles or len(candles) == 0:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç —Å–≤–µ—á–µ–π")
                return None

            # ========== –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–ù–´ –ò–ó –¢–ò–ö–ï–†–ê ==========
            last_price = float(
                ticker.get("lastPrice", 0) or ticker.get("last_price", 0)
            )

            if not DataValidator.validate_price(last_price, f"{symbol}.ticker"):
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞ –≤ ticker")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            market_data = {
                "symbol": symbol,
                "close": last_price,
                "price": last_price,  # Alias
                "volume": float(
                    ticker.get("volume24h", 0) or ticker.get("volume_24h", 0)
                ),
                "candles": candles,
                "timestamp": datetime.now(),
            }

            return market_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _get_market_data –¥–ª—è {symbol}: {e}")
            return None


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["UnifiedAutoScanner"]
