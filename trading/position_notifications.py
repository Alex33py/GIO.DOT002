#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GIO Crypto Bot - Position Notifications Module
Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
"""

import asyncio
from datetime import datetime
from typing import Optional, Dict, List
from config.settings import logger


class PositionNotifications:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏:
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP1/TP2/TP3
    - Risky Entry
    - –î–æ—Å—Ä–æ—á–Ω–æ–º –≤—ã—Ö–æ–¥–µ
    - –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø–∞
    """

    def __init__(self, telegram_handler):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        Args:
            telegram_handler: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramBotHandler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.telegram = telegram_handler
        self.notified_signals = {
            'tp1': set(),  # ID —Å–∏–≥–Ω–∞–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP1
            'tp2': set(),  # ID —Å–∏–≥–Ω–∞–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP2
            'tp3': set(),  # ID —Å–∏–≥–Ω–∞–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP3
            'stop': set(), # ID —Å–∏–≥–Ω–∞–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ STOP
            'early_exit': set()  # ID —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–æ—Å—Ä–æ—á–Ω—ã–º –≤—ã—Ö–æ–¥–æ–º
        }
        logger.info("‚úÖ PositionNotifications –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def check_tp_levels(self, signal: Dict) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π TP1/TP2/TP3 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            signal_id = signal.get('id')
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            tp1 = signal.get('tp1', 0)
            tp2 = signal.get('tp2', 0)
            tp3 = signal.get('tp3', 0)
            stop_loss = signal.get('stop_loss', 0)
            quality_score = signal.get('quality_score', 0)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ risky entry (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ < 50%)
            is_risky = quality_score < 50

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP1
            if self._check_tp_reached(current_price, tp1, direction) and signal_id not in self.notified_signals['tp1']:
                await self._send_tp1_notification(signal, is_risky)
                self.notified_signals['tp1'].add(signal_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP2
            elif self._check_tp_reached(current_price, tp2, direction) and signal_id not in self.notified_signals['tp2']:
                await self._send_tp2_notification(signal)
                self.notified_signals['tp2'].add(signal_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP3
            elif self._check_tp_reached(current_price, tp3, direction) and signal_id not in self.notified_signals['tp3']:
                await self._send_tp3_notification(signal)
                self.notified_signals['tp3'].add(signal_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø–∞
            elif self._check_stop_hit(current_price, stop_loss, direction) and signal_id not in self.notified_signals['stop']:
                await self._send_stop_notification(signal)
                self.notified_signals['stop'].add(signal_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_tp_levels: {e}")

    def _check_tp_reached(self, current_price: float, tp_level: float, direction: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è TP

        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            tp_level: –£—Ä–æ–≤–µ–Ω—å TP
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (LONG/SHORT)

        Returns:
            True –µ—Å–ª–∏ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∏–Ω–∞—á–µ False
        """
        if direction == "LONG":
            return current_price >= tp_level
        elif direction == "SHORT":
            return current_price <= tp_level
        return False

    def _check_stop_hit(self, current_price: float, stop_loss: float, direction: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å—Ç–æ–ø–∞

        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (LONG/SHORT)

        Returns:
            True –µ—Å–ª–∏ —Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False
        """
        if direction == "LONG":
            return current_price <= stop_loss
        elif direction == "SHORT":
            return current_price >= stop_loss
        return False

    async def _send_tp1_notification(self, signal: Dict, is_risky: bool = False) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP1

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
            is_risky: –§–ª–∞–≥ risky entry
        """
        try:
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            tp1 = signal.get('tp1', 0)
            profit_percent = ((current_price - entry_price) / entry_price * 100) if direction == "LONG" else ((entry_price - current_price) / entry_price * 100)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_risky:
                message = (
                    f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ (RISKY ENTRY) üéØ\n\n"
                    f"‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!\n\n"
                    f"üìä {symbol} {direction}\n"
                    f"üí∞ Entry: ${entry_price:.2f}\n"
                    f"üìà Current: ${current_price:.2f}\n"
                    f"üéØ TP1: ${tp1:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                    f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                    f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                )
            else:
                message = (
                    f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                    f"üìä {symbol} {direction}\n"
                    f"üí∞ Entry: ${entry_price:.2f}\n"
                    f"üìà Current: ${current_price:.2f}\n"
                    f"üéØ TP1: ${tp1:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                    f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                    f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP1 –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_tp1_notification: {e}")

    async def _send_tp2_notification(self, signal: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP2

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            tp2 = signal.get('tp2', 0)
            profit_percent = ((current_price - entry_price) / entry_price * 100) if direction == "LONG" else ((entry_price - current_price) / entry_price * 100)

            message = (
                f"üéØ TP2 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                f"üìä {symbol} {direction}\n"
                f"üí∞ Entry: ${entry_price:.2f}\n"
                f"üìà Current: ${current_price:.2f}\n"
                f"üéØ TP2: ${tp2:.2f}\n"
                f"üíµ Profit: {profit_percent:.2f}%\n\n"
                f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP3\n"
                f"   ‚Ä¢ –°—Ç–æ–ø —É–∂–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP2 –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_tp2_notification: {e}")

    async def _send_tp3_notification(self, signal: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP3

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            tp3 = signal.get('tp3', 0)
            profit_percent = ((current_price - entry_price) / entry_price * 100) if direction == "LONG" else ((entry_price - current_price) / entry_price * 100)

            message = (
                f"üéØ TP3 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                f"üìä {symbol} {direction}\n"
                f"üí∞ Entry: ${entry_price:.2f}\n"
                f"üìà Current: ${current_price:.2f}\n"
                f"üéØ TP3: ${tp3:.2f}\n"
                f"üíµ Profit: {profit_percent:.2f}%\n\n"
                f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                f"   ‚Ä¢ –¢—Ä–µ–π–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ (trailing stop)\n"
                f"   ‚Ä¢ –ò–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                f"   ‚Ä¢ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞! üéâ"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP3 –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_tp3_notification: {e}")

    async def _send_stop_notification(self, signal: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø–∞

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            stop_loss = signal.get('stop_loss', 0)
            loss_percent = ((entry_price - current_price) / entry_price * 100) if direction == "LONG" else ((current_price - entry_price) / entry_price * 100)

            message = (
                f"üõë –°–¢–û–ü –ê–ö–¢–ò–í–ò–†–û–í–ê–ù üõë\n\n"
                f"üìä {symbol} {direction}\n"
                f"üí∞ Entry: ${entry_price:.2f}\n"
                f"üìâ Current: ${current_price:.2f}\n"
                f"üõë Stop Loss: ${stop_loss:.2f}\n"
                f"üí∏ Loss: -{loss_percent:.2f}%\n\n"
                f"‚ùå –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"   ‚Ä¢ –£–±—ã—Ç–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
                f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã\n"
                f"   ‚Ä¢ –ñ–¥—ë–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ STOP –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_stop_notification: {e}")

    async def check_early_exit(self, signal: Dict, volume_data: Dict) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ (–ø–∞–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–≤)

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
            volume_data: –î–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—ë–º–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        try:
            signal_id = signal.get('id')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±—ä—ë–º—ã –ø–∞–¥–∞—é—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ—Ç
            if signal_id not in self.notified_signals['early_exit']:
                volume_declining = volume_data.get('declining', False)
                no_confirmation = volume_data.get('no_confirmation', False)

                if volume_declining and no_confirmation:
                    await self._send_early_exit_notification(signal)
                    self.notified_signals['early_exit'].add(signal_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_early_exit: {e}")

    async def _send_early_exit_notification(self, signal: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –≤—ã—Ö–æ–¥–µ

        Args:
            signal: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            symbol = signal.get('symbol', 'N/A')
            direction = signal.get('direction', 'N/A')
            entry_price = signal.get('entry_price', 0)
            current_price = signal.get('current_price', 0)
            tp2 = signal.get('tp2', 0)

            message = (
                f"‚ö†Ô∏è –î–û–°–†–û–ß–ù–´–ô –í–´–•–û–î ‚ö†Ô∏è\n\n"
                f"üìä {symbol} {direction}\n"
                f"üí∞ Entry: ${entry_price:.2f}\n"
                f"üìà Current: ${current_price:.2f}\n"
                f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤—ã—Ö–æ–¥: ${tp2:.2f}\n\n"
                f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞:\n"
                f"   ‚Ä¢ –û–±—ä—ë–º—ã –ø–∞–¥–∞—é—Ç\n"
                f"   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ—Ç\n"
                f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–π—Ç–∏ –Ω–∞ TP2"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ EARLY EXIT –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _send_early_exit_notification: {e}")

    def reset_notifications(self, signal_id: int) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏)

        Args:
            signal_id: ID —Å–∏–≥–Ω–∞–ª–∞
        """
        for key in self.notified_signals:
            self.notified_signals[key].discard(signal_id)
        logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ #{signal_id}")
