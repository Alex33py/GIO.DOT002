# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è GIO Crypto Bot
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import hashlib
import asyncio
import aiosqlite
import json
from typing import Dict, List, Optional, Any
from pathlib import Path

from config.settings import logger, DB_FILE, SCENARIOS_DIR
from config.constants import EnhancedTradingSignal, SignalStatusEnum
from utils.helpers import current_epoch_ms, save_json_file, load_json_file
from utils.validators import validate_scenario_data, validate_json_data


class ScenarioManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        self.scenarios_cache: Dict[str, Dict] = {}
        self.scenarios_metadata: Dict[str, Dict] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.scenario_stats = {
            "total_scenarios": 0,
            "active_scenarios": 0,
            "successful_scenarios": 0,
            "scenario_usage": {},
            "last_load_time": 0,
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.manager_settings = {
            "auto_reload": True,
            "cache_timeout_ms": 3600000,  # 1 —á–∞—Å
            "validate_on_load": True,
            "backup_on_change": True,
        }

        logger.info("‚úÖ ScenarioManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(DB_FILE) as db:
                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS trading_scenarios (
                        scenario_id TEXT PRIMARY KEY,
                        name TEXT NOT NULL,
                        signal_type TEXT NOT NULL,
                        conditions TEXT NOT NULL,
                        risk_management TEXT,
                        metadata TEXT,
                        is_active BOOLEAN DEFAULT 1,
                        success_rate REAL DEFAULT 0.0,
                        usage_count INTEGER DEFAULT 0,
                        created_timestamp INTEGER NOT NULL,
                        updated_timestamp INTEGER NOT NULL,
                        file_hash TEXT
                    )
                """)

                # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS trading_signals (
                        signal_id TEXT PRIMARY KEY,
                        symbol TEXT NOT NULL,
                        side TEXT NOT NULL,
                        scenario_id TEXT NOT NULL,
                        status TEXT NOT NULL,
                        price_entry REAL NOT NULL,
                        sl REAL NOT NULL,
                        tp1 REAL NOT NULL,
                        tp2 REAL,
                        tp3 REAL,
                        rr1 REAL NOT NULL,
                        rr2 REAL,
                        rr3 REAL,
                        confidence_score REAL NOT NULL,
                        reason TEXT,
                        indicators TEXT,
                        market_conditions TEXT,
                        news_impact TEXT,
                        timestamp INTEGER NOT NULL,
                        FOREIGN KEY (scenario_id) REFERENCES trading_scenarios (scenario_id)
                    )
                """)

                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await db.execute("""
                    CREATE INDEX IF NOT EXISTS idx_signals_symbol_timestamp
                    ON trading_signals (symbol, timestamp)
                """)

                await db.execute("""
                    CREATE INDEX IF NOT EXISTS idx_signals_scenario_id
                    ON trading_signals (scenario_id)
                """)

                await db.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

            await self.migrate_scenarios_table()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

    async def migrate_scenarios_table(self):
            """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã scenarios –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
            try:
                async with aiosqlite.connect(DB_FILE) as db:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ scenario_data
                    async with db.execute("PRAGMA table_info(scenarios)") as cursor:
                        columns = await cursor.fetchall()
                        column_names = [col[1] for col in columns]

                    if "scenario_data" not in column_names:
                        logger.info("üîß –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã scenarios...")

                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                        await db.execute("ALTER TABLE scenarios RENAME TO scenarios_old")

                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                        await db.execute("""
                            CREATE TABLE IF NOT EXISTS scenarios (
                                scenario_id TEXT PRIMARY KEY,
                                scenario_data TEXT NOT NULL,
                                is_active BOOLEAN DEFAULT 1,
                                created_at INTEGER NOT NULL,
                                updated_at INTEGER NOT NULL
                            )
                        """)

                        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                        try:
                            await db.execute("""
                                INSERT INTO scenarios (scenario_id, scenario_data, is_active, created_at, updated_at)
                                SELECT scenario_id, '{}', is_active, created_at, updated_at
                                FROM scenarios_old
                            """)
                        except:
                            pass

                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                        await db.execute("DROP TABLE IF EXISTS scenarios_old")

                        await db.commit()
                        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã scenarios –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    async def load_all_scenarios(self) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON —Ñ–∞–π–ª–∞, –ø–æ—Ç–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            scenarios = []

            # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON —Ñ–∞–π–ª–∞ gio_scenarios_100_with_features_v3.json
            json_file_path = SCENARIOS_DIR / "gio_scenarios_100_with_features_v3.json"

            if json_file_path.exists():
                logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {json_file_path.name}")

                try:
                    with open(json_file_path, 'r', encoding='utf-8') as f:
                        json_data = json.load(f)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                    if isinstance(json_data, dict):
                        # –§–æ—Ä–º–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (version, count, scenarios)
                        if "scenarios" in json_data:
                            scenarios_list = json_data["scenarios"]
                            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenarios_list)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ JSON (—Ñ–æ—Ä–º–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏)")

                            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
                            valid_count = 0
                            for idx, scenario in enumerate(scenarios_list):
                                if self._validate_scenario_structure(scenario):
                                    scenarios.append(scenario)
                                    valid_count += 1
                                else:
                                    # –î–æ–±–∞–≤–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
                                    if idx < 3:
                                        logger.warning(
                                            f"‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π #{idx} –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: "
                                            f"name={scenario.get('name', 'MISSING')}, "
                                            f"keys={list(scenario.keys())[:5]}"
                                        )

                            logger.info(f"‚úÖ –ü—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {valid_count}/{len(scenarios_list)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

                        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –∫–æ—Ä–Ω–µ
                        elif "name" in json_data and "conditions" in json_data:
                            if self._validate_scenario_structure(json_data):
                                scenarios.append(json_data)
                                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω 1 —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ JSON")

                    elif isinstance(json_data, list):
                        # –§–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                        scenarios_list = json_data
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenarios_list)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ JSON (—Ñ–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞)")

                        if scenarios_list:
                            first_scenario = scenarios_list[0]
                            logger.info(f"üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:")
                            logger.info(f"   name={first_scenario.get('name', 'MISSING')}")
                            logger.info(f"   keys={list(first_scenario.keys())[:10]}")

                        valid_count = 0
                        for idx, scenario in enumerate(scenarios_list):
                            if self._validate_scenario_structure(scenario):
                                scenarios.append(scenario)
                                valid_count += 1
                            else:
                                if idx < 3:
                                    logger.warning(
                                        f"‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π #{idx} –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: "
                                        f"name={scenario.get('name', 'MISSING')}, "
                                        f"keys={list(scenario.keys())[:5]}"
                                    )

                        logger.info(f"‚úÖ –ü—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {valid_count}/{len(scenarios_list)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenarios)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ JSON")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    if scenarios:
                        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                        saved_count = 0
                        for scenario in scenarios:
                            if await self._save_scenario_to_db(scenario):
                                saved_count += 1
                        logger.info(f"‚úÖ {saved_count} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

                    return scenarios

                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞: {e}")

            # 2. FALLBACK: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìÇ JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            async with aiosqlite.connect(DB_FILE) as db:
                async with db.execute("""
                    SELECT scenario_data FROM scenarios
                    WHERE is_active = 1
                    ORDER BY created_at DESC
                """) as cursor:
                    rows = await cursor.fetchall()

                    for row in rows:
                        try:
                            scenario = json.loads(row[0])
                            if self._validate_scenario_structure(scenario):
                                scenarios.append(scenario)
                        except json.JSONDecodeError:
                            continue

            if not scenarios:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
                return []

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(scenarios)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ –ë–î")
            return scenarios

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            return []

    def _validate_scenario_structure(self, scenario: Dict[str, Any]) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–∑ gio_scenarios_100_with_features_v3.json
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_name = scenario.get("name", "")

            # –ï—Å–ª–∏ name –ø—É—Å—Ç–æ–µ, –∏—â–µ–º –¥—Ä—É–≥–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            if not scenario_name:
                scenario_name = scenario.get("scenario_name", "")

            if not scenario_name:
                scenario_name = scenario.get("id", "")

            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç –∏–º–µ–Ω–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if not scenario_name:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                if "description" in scenario:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
                    desc_words = scenario["description"].split()[:3]
                    scenario_name = "_".join(desc_words).lower()
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à
                    scenario_json = json.dumps(scenario, sort_keys=True)
                    scenario_name = f"scenario_{hashlib.md5(scenario_json.encode()).hexdigest()[:8]}"

            # –û–±–Ω–æ–≤–ª—è–µ–º name –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            scenario["name"] = scenario_name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
            invalid_names = [
                "version", "count", "meta", "params_default", "params_overrides",
                "mtf_policy", "news_policy", "decision_policy", "tactics_policy",
                "sizing_policy", "scenarios", "trigger_policy_percent"
            ]

            if scenario_name.lower() in invalid_names:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ: {scenario_name}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            has_required_fields = any([
                "conditions" in scenario,
                "entry_conditions" in scenario,
                "indicators" in scenario,
                "features" in scenario,
                "rules" in scenario
            ])

            if not has_required_fields:
                logger.debug(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_name} –Ω–µ –∏–º–µ–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
                return False

            logger.debug(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_name} –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return False

    async def _save_scenario_to_db(self, scenario: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            scenario_id = scenario.get("name", "").lower().replace(" ", "_")

            if not scenario_id:
                logger.warning("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –∏–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False

            async with aiosqlite.connect(DB_FILE) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                async with db.execute(
                    "SELECT scenario_id FROM scenarios WHERE scenario_id = ?",
                    (scenario_id,)
                ) as cursor:
                    existing = await cursor.fetchone()

                scenario_json = json.dumps(scenario, ensure_ascii=False)
                current_time = current_epoch_ms()

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    await db.execute("""
                        UPDATE scenarios
                        SET scenario_data = ?, updated_at = ?
                        WHERE scenario_id = ?
                    """, (scenario_json, current_time, scenario_id))
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                    await db.execute("""
                        INSERT INTO scenarios
                        (scenario_id, scenario_data, is_active, created_at, updated_at)
                        VALUES (?, ?, 1, ?, ?)
                    """, (scenario_id, scenario_json, current_time, current_time))

                await db.commit()
                logger.debug(f"üíæ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –ë–î: {e}")
            return False

    async def save_signal_to_database(self, signal: EnhancedTradingSignal) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            signal_id = f"{signal.symbol}_{signal.scenario_id}_{signal.timestamp}"

            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO trading_signals (
                        signal_id, symbol, side, scenario_id, status, price_entry,
                        sl, tp1, tp2, tp3, rr1, rr2, rr3, confidence_score,
                        reason, indicators, market_conditions, news_impact, timestamp
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    signal_id,
                    signal.symbol,
                    signal.side,
                    signal.scenario_id,
                    signal.status.value,
                    signal.price_entry,
                    signal.sl,
                    signal.tp1,
                    signal.tp2,
                    signal.tp3,
                    signal.rr1,
                    signal.rr2,
                    signal.rr3,
                    signal.confidence_score,
                    signal.reason,
                    json.dumps(signal.indicators),
                    json.dumps(signal.market_conditions),
                    json.dumps(signal.news_impact),
                    signal.timestamp
                ))

                await db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            await self._update_scenario_usage(signal.scenario_id)

            logger.debug(f"üíæ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: {signal_id}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")
            return False

    async def _update_scenario_usage(self, scenario_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute("""
                    UPDATE trading_scenarios
                    SET usage_count = usage_count + 1, updated_timestamp = ?
                    WHERE scenario_id = ?
                """, (current_epoch_ms(), scenario_id))

                await db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if scenario_id not in self.scenario_stats["scenario_usage"]:
                self.scenario_stats["scenario_usage"][scenario_id] = 0
            self.scenario_stats["scenario_usage"][scenario_id] += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")

    def get_scenario(self, scenario_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            return self.scenarios_cache.get(scenario_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
            return None

    def get_scenarios_by_signal_type(self, signal_type: str) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            filtered_scenarios = {}

            for scenario_id, scenario_data in self.scenarios_cache.items():
                if scenario_data.get("signal_type", "").upper() == signal_type.upper():
                    filtered_scenarios[scenario_id] = scenario_data

            return filtered_scenarios

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ —Ç–∏–ø—É {signal_type}: {e}")
            return {}


# –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
__all__ = [
    'ScenarioManager',
]
