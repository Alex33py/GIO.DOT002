# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import asyncio
from typing import Dict, List
from datetime import datetime

from config.settings import logger
from trading.signal_recorder import SignalRecorder
from utils.helpers import safe_float


class PositionTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    def __init__(self, signal_recorder: SignalRecorder):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tracker

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            signal_recorder: –≠–∫–∑–µ–º–ø–ª—è—Ä SignalRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ fills
        """
        self.recorder = signal_recorder
        self.tracked_positions = {}  # {signal_id: position_data}

        logger.info("‚úÖ PositionTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def update_positions(self, current_prices: Dict[str, float]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            current_prices: –°–ª–æ–≤–∞—Ä—å {symbol: current_price}
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            active_signals = self.recorder.get_active_signals()

            if not active_signals:
                return

            logger.debug(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(active_signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

            for signal in active_signals:
                try:
                    symbol = signal['symbol']
                    current_price = current_prices.get(symbol)

                    if not current_price:
                        continue

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    self.recorder.update_signal_price(signal['id'], current_price)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
                    await self._check_levels(signal, current_price)

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ #{signal['id']}: {e}")
                    continue

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ update_positions: {e}")

    async def _check_levels(self, signal: Dict, current_price: float):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL —É—Ä–æ–≤–Ω–µ–π

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            signal: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –ë–î
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        try:
            signal_id = signal['id']
            side = signal['side']
            entry_price = safe_float(signal['price_entry'])

            # –£—Ä–æ–≤–Ω–∏
            sl = safe_float(signal['stop_loss'])
            tp1 = safe_float(signal['take_profit_1'])
            tp2 = safe_float(signal['take_profit_2'])
            tp3 = safe_float(signal['take_profit_3'])

            # –§–ª–∞–≥–∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            tp1_hit = signal['tp1_hit'] == 1
            tp2_hit = signal['tp2_hit'] == 1
            tp3_hit = signal['tp3_hit'] == 1
            sl_hit = signal['sl_hit'] == 1

            if side == "LONG":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                if current_price <= sl and not sl_hit:
                    pnl = ((current_price - entry_price) / entry_price) * 100
                    self.recorder.record_fill(signal_id, "SL", current_price, 100.0, pnl)
                    logger.warning(f"üõë SL –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {current_price} (P&L: {pnl:+.2f}%)")
                    return  # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP1 (25% –ø–æ–∑–∏—Ü–∏–∏)
                if current_price >= tp1 and not tp1_hit:
                    pnl = ((tp1 - entry_price) / entry_price) * 100 * 0.25
                    self.recorder.record_fill(signal_id, "TP1", tp1, 25.0, pnl)
                    logger.info(f"üéØ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp1} (P&L: {pnl:+.2f}%)")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP2 (50% –ø–æ–∑–∏—Ü–∏–∏)
                if current_price >= tp2 and not tp2_hit and tp1_hit:
                    pnl = ((tp2 - entry_price) / entry_price) * 100 * 0.50
                    self.recorder.record_fill(signal_id, "TP2", tp2, 50.0, pnl)
                    logger.info(f"üéØ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp2} (P&L: {pnl:+.2f}%)")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP3 (25% –ø–æ–∑–∏—Ü–∏–∏)
                if current_price >= tp3 and not tp3_hit and tp2_hit:
                    pnl = ((tp3 - entry_price) / entry_price) * 100 * 0.25
                    self.recorder.record_fill(signal_id, "TP3", tp3, 25.0, pnl)
                    logger.info(f"üéØ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp3} (P&L: {pnl:+.2f}%)")

            else:  # SHORT
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
                if current_price >= sl and not sl_hit:
                    pnl = ((entry_price - current_price) / entry_price) * 100
                    self.recorder.record_fill(signal_id, "SL", current_price, 100.0, pnl)
                    logger.warning(f"üõë SL –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {current_price} (P&L: {pnl:+.2f}%)")
                    return

                # TP1
                if current_price <= tp1 and not tp1_hit:
                    pnl = ((entry_price - tp1) / entry_price) * 100 * 0.25
                    self.recorder.record_fill(signal_id, "TP1", tp1, 25.0, pnl)
                    logger.info(f"üéØ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp1} (P&L: {pnl:+.2f}%)")

                # TP2
                if current_price <= tp2 and not tp2_hit and tp1_hit:
                    pnl = ((entry_price - tp2) / entry_price) * 100 * 0.50
                    self.recorder.record_fill(signal_id, "TP2", tp2, 50.0, pnl)
                    logger.info(f"üéØ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp2} (P&L: {pnl:+.2f}%)")

                # TP3
                if current_price <= tp3 and not tp3_hit and tp2_hit:
                    pnl = ((entry_price - tp3) / entry_price) * 100 * 0.25
                    self.recorder.record_fill(signal_id, "TP3", tp3, 25.0, pnl)
                    logger.info(f"üéØ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –°–∏–≥–Ω–∞–ª #{signal_id} @ {tp3} (P&L: {pnl:+.2f}%)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π: {e}")

    def get_position_summary(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–∑–∏—Ü–∏–π
        """
        try:
            active_signals = self.recorder.get_active_signals()

            summary = {
                "total_active": len(active_signals),
                "long_count": sum(1 for s in active_signals if s['side'] == 'LONG'),
                "short_count": sum(1 for s in active_signals if s['side'] == 'SHORT'),
                "total_unrealized_pnl": 0.0,
                "positions": []
            }

            for signal in active_signals:
                current_price = signal.get('price_current', signal['price_entry'])
                entry_price = signal['price_entry']

                if signal['side'] == 'LONG':
                    unrealized_pnl = ((current_price - entry_price) / entry_price) * 100
                else:
                    unrealized_pnl = ((entry_price - current_price) / entry_price) * 100

                summary["total_unrealized_pnl"] += unrealized_pnl

                summary["positions"].append({
                    "id": signal['id'],
                    "symbol": signal['symbol'],
                    "side": signal['side'],
                    "entry": entry_price,
                    "current": current_price,
                    "unrealized_pnl": round(unrealized_pnl, 2)
                })

            return summary

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è position summary: {e}")
            return {"total_active": 0}


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['PositionTracker']
