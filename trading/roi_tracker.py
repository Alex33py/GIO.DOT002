#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ROI Tracker v3.0 - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TP/SL —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω –∏ —É–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

Features:
- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω (—Å–Ω–∏–∂–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 99%)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TP1/TP2/TP3/SL
- Trailing Stop –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
- –î–µ—Ç–∞–ª—å–Ω—ã–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

GIO Crypto Bot v3.0
–î–∞—Ç–∞: 2025-10-12
"""

import asyncio
import aiosqlite
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, field

logger = logging.getLogger(__name__)


@dataclass
class Signal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""

    signal_id: str
    symbol: str
    direction: str  # LONG/SHORT
    entry_price: float
    stop_loss: float
    tp1: float
    tp2: float
    tp3: float

    # –°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    tp1_hit: bool = False
    tp2_hit: bool = False
    tp3_hit: bool = False
    sl_hit: bool = False

    # –ú–µ—Ç—Ä–∏–∫–∏
    current_price: float = 0.0
    current_roi: float = 0.0
    is_active: bool = True

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    entry_time: str = field(default_factory=lambda: datetime.now().isoformat())
    close_time: Optional[str] = None

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    quality_score: float = 0.0
    fills: List[Dict] = field(default_factory=list)
    status: str = "active"

    def calculate_pnl(self, current_price: float = None) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π P&L –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        price = current_price if current_price else self.current_price

        if self.direction.upper() == "LONG":
            return ((price / self.entry_price) - 1) * 100
        else:  # SHORT
            return ((self.entry_price / price) - 1) * 100


class ROITracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º

    Features:
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω (—Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API –≤ 50 —Ä–∞–∑!)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Stop-Loss
    - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TP1/TP2/TP3
    - Trailing Stop –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
    - –£–º–Ω—ã–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    - SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ –ù–ï –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç!
    - –ù–ï —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–∞—Ö
    - –ù–ï —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    - –¢–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """

    def __init__(self, bot, telegram_handler=None, db_path: str = "gio_bot.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ROI Tracker

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω–∞–º)
            telegram_handler: Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.bot = bot
        self.telegram_handler = telegram_handler
        self.db_path = db_path

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.active_signals: Dict[str, Signal] = {}
        self.completed_signals: List[Signal] = []

        # === –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ö–†–´–¢–ò–Ø ===
        self.tp1_percentage = 0.25  # 25% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP1
        self.tp2_percentage = 0.25  # 25% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP2 (50% –≤—Å–µ–≥–æ)
        self.tp3_percentage = 0.50  # 50% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP3 (100% –≤—Å–µ–≥–æ)

        # === TRAILING STOP ===
        self.trailing_stop_enabled = True
        self.trailing_stop_trigger = 0.5  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ +0.5%
        self.trailing_stop_distance = 0.3  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ 0.3% –æ—Ç —Ü–µ–Ω—ã

        # === –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù ===
        self.price_cache: Dict[str, Dict] = {}  # {symbol: {price, timestamp}}
        self.cache_ttl = 2  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞: 2 —Å–µ–∫—É–Ω–¥—ã

        # === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
        self.check_interval = 5  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.is_running = False
        self.is_shutting_down = False

        # –ó–∞–¥–∞—á–∏
        self.monitor_tasks: Dict[str, asyncio.Task] = {}
        self.price_updater_task: Optional[asyncio.Task] = None

        # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        self.stats = {
            "sl_triggered": 0,
            "tp1_triggered": 0,
            "tp2_triggered": 0,
            "tp3_triggered": 0,
            "trailing_activated": 0,
            "total_closures": 0,
        }

        logger.info("‚úÖ ROITracker v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval}s")
        logger.info(f"   ‚Ä¢ –ö–µ—à —Ü–µ–Ω: {self.cache_ttl}s TTL")
        logger.info(
            f"   ‚Ä¢ Trailing Stop: {'ON' if self.trailing_stop_enabled else 'OFF'}"
        )
        logger.info(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ ROI Tracker —Å —Ñ–æ–Ω–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è ROITracker —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        self.is_shutting_down = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self._init_database()

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –æ–±–Ω–æ–≤–ª—è—Ç–µ–ª—å —Ü–µ–Ω
        self.price_updater_task = asyncio.create_task(self._price_updater())

        logger.info("üöÄ ROITracker –∑–∞–ø—É—â–µ–Ω —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω")

    async def stop(self):
        """Graceful shutdown ROI Tracker"""
        logger.info("üõë Stopping ROI Tracker...")

        self.is_shutting_down = True
        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å price updater
        if self.price_updater_task and not self.price_updater_task.done():
            self.price_updater_task.cancel()
            try:
                await self.price_updater_task
            except asyncio.CancelledError:
                pass

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
        for signal_id, task in self.monitor_tasks.items():
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        self.monitor_tasks.clear()
        self.price_cache.clear()

        logger.info("‚úÖ ROITracker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ========== PRICE CACHING (99% —Å–Ω–∏–∂–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤) ==========

    async def _price_updater(self):
        """
        –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ—Ç–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        """
        logger.info("üîÑ Price updater started")

        while self.is_running and not self.is_shutting_down:
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                symbols = list(
                    set(signal.symbol for signal in self.active_signals.values())
                )

                if not symbols:
                    await asyncio.sleep(5)
                    continue

                # –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                update_count = 0
                for symbol in symbols:
                    price = await self._fetch_price(symbol)
                    if price > 0:
                        self.price_cache[symbol] = {
                            "price": price,
                            "timestamp": datetime.now(),
                        }
                        update_count += 1

                if update_count > 0:
                    logger.debug(
                        f"üí∞ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_count}/{len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤"
                    )

                # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)

            except asyncio.CancelledError:
                break
            except Exception as e:
                if not self.is_shutting_down:
                    logger.error(f"‚ùå Price updater error: {e}")
                await asyncio.sleep(5)

        logger.info("üõë Price updater stopped")

    async def _fetch_price(self, symbol: str) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ price_updater)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ 0.0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ bot.market_data (WebSocket)
            if hasattr(self.bot, "market_data") and symbol in self.bot.market_data:
                return float(self.bot.market_data[symbol].get("price", 0))

            # Fallback: –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ
            if hasattr(self.bot, "bybit") and self.bot.bybit:
                ticker = await self.bot.bybit.get_ticker(symbol)
                if ticker and "last" in ticker:
                    return float(ticker["last"])

            if hasattr(self.bot, "binance") and self.bot.binance:
                ticker = await self.bot.binance.get_ticker(symbol)
                if ticker and "last" in ticker:
                    return float(ticker["last"])

            return 0.0

        except Exception as e:
            if not self.is_shutting_down:
                logger.debug(f"‚ö†Ô∏è Fetch price error {symbol}: {e}")
            return 0.0

    async def _get_current_price(self, symbol: str) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –∫–µ—à–∞ (–ë–ï–ó API –∑–∞–ø—Ä–æ—Å–∞!)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–∑ –∫–µ—à–∞ –∏–ª–∏ 0.0
        """
        if self.is_shutting_down:
            return 0.0

        # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        cached = self.price_cache.get(symbol)

        if cached:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞
            age = (datetime.now() - cached["timestamp"]).total_seconds()

            if age < self.cache_ttl:
                return cached["price"]

        # –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - price_updater –æ–±–Ω–æ–≤–∏—Ç
        logger.debug(f"‚ö†Ô∏è {symbol}: —Ü–µ–Ω–∞ –Ω–µ –≤ –∫–µ—à–µ, –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        return 0.0

    # ========== SIGNAL REGISTRATION ==========

    async def register_signal(self, signal_data: Dict) -> str:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (entry, TP, SL, direction)

        Returns:
            signal_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–∏–≥–Ω–∞–ª–∞

        Note:
            –ù–ï —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞! –¢–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã.
        """
        signal_id = f"{signal_data['symbol']}_{int(datetime.now().timestamp())}"

        signal = Signal(
            signal_id=signal_id,
            symbol=signal_data["symbol"],
            direction=signal_data["direction"],
            entry_price=signal_data["entry_price"],
            stop_loss=signal_data["stop_loss"],
            tp1=signal_data.get("tp1", 0),
            tp2=signal_data.get("tp2", 0),
            tp3=signal_data.get("tp3", 0),
            quality_score=signal_data.get("quality_score", 0.0),
        )

        # –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        self.active_signals[signal_id] = signal

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        await self._save_signal_to_db(signal)

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.is_running:
            task = asyncio.create_task(self._monitor_signal(signal_id))
            self.monitor_tasks[signal_id] = task

        logger.info(
            f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª {signal_id} –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ "
            f"({signal.direction} {signal.symbol})"
        )

        return signal_id

    # ========== SIGNAL MONITORING ==========

    async def _monitor_signal(self, signal_id: str):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–ë–ï–ó –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)

        Args:
            signal_id: ID —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        try:
            while self.is_running and not self.is_shutting_down:
                if signal_id not in self.active_signals:
                    # –°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
                    break

                signal = self.active_signals[signal_id]

                # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –∫–µ—à–∞ (–ë–ï–ó API –∑–∞–ø—Ä–æ—Å–∞!)
                current_price = await self._get_current_price(signal.symbol)

                if current_price == 0.0:
                    # –ñ–¥—ë–º –ø–æ–∫–∞ price_updater –æ–±–Ω–æ–≤–∏—Ç –∫–µ—à
                    await asyncio.sleep(5)
                    continue

                # –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —Å–∏–≥–Ω–∞–ª–µ
                signal.current_price = current_price

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TP/SL
                event = await self._check_tp_sl(signal)

                # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ
                if event:
                    if event["type"] == "tp_hit":
                        logger.info(
                            f"üéØ {event['level'].upper()} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: "
                            f"{signal_id} @ ${event['price']:,.2f} "
                            f"(+{event['profit']:.2f}%)"
                        )
                    elif event["type"] == "sl_hit":
                        logger.warning(
                            f"üö® STOP LOSS —Å—Ä–∞–±–æ—Ç–∞–ª: {signal_id} "
                            f"@ ${event['price']:,.2f} ({event['loss']:.2f}%)"
                        )

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Trailing Stop
                if self.trailing_stop_enabled and not signal.sl_hit:
                    await self._update_trailing_stop(signal)

                # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(self.check_interval)

        except asyncio.CancelledError:
            logger.debug(f"Monitor task cancelled: {signal_id}")
        except Exception as e:
            if not self.is_shutting_down:
                logger.error(f"‚ùå Monitor error {signal_id}: {e}", exc_info=True)

    async def _check_tp_sl(self, signal: Signal) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL

        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            –°–æ–±—ã—Ç–∏–µ (dict) –µ—Å–ª–∏ TP/SL –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, None –∏–Ω–∞—á–µ
        """
        current_price = signal.current_price
        event = None

        if signal.direction.upper() == "LONG":
            # === LONG –ü–û–ó–ò–¶–ò–Ø ===

            # TP3 (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–ª—å)
            if not signal.tp3_hit and current_price >= signal.tp3:
                signal.tp3_hit = True
                event = await self._handle_tp_hit(signal, "TP3", current_price)

            # TP2
            elif not signal.tp2_hit and current_price >= signal.tp2:
                signal.tp2_hit = True
                event = await self._handle_tp_hit(signal, "TP2", current_price)

            # TP1
            elif not signal.tp1_hit and current_price >= signal.tp1:
                signal.tp1_hit = True
                event = await self._handle_tp_hit(signal, "TP1", current_price)

            # Stop Loss
            elif not signal.sl_hit and current_price <= signal.stop_loss:
                signal.sl_hit = True
                event = await self._handle_sl_hit(signal, current_price)

        elif signal.direction.upper() == "SHORT":
            # === SHORT –ü–û–ó–ò–¶–ò–Ø ===

            # TP3 (—Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–ª—å)
            if not signal.tp3_hit and current_price <= signal.tp3:
                signal.tp3_hit = True
                event = await self._handle_tp_hit(signal, "TP3", current_price)

            # TP2
            elif not signal.tp2_hit and current_price <= signal.tp2:
                signal.tp2_hit = True
                event = await self._handle_tp_hit(signal, "TP2", current_price)

            # TP1
            elif not signal.tp1_hit and current_price <= signal.tp1:
                signal.tp1_hit = True
                event = await self._handle_tp_hit(signal, "TP1", current_price)

            # Stop Loss
            elif not signal.sl_hit and current_price >= signal.stop_loss:
                signal.sl_hit = True
                event = await self._handle_sl_hit(signal, current_price)

        # –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π ROI
        signal.current_roi = self._calculate_current_roi(signal)

        # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î –µ—Å–ª–∏ –±—ã–ª–æ —Å–æ–±—ã—Ç–∏–µ
        if event:
            await self._update_signal_in_db(signal)

        return event

    # ========== TP/SL HANDLERS ==========

    async def _handle_tp_hit(self, signal: Signal, tp_level: str, price: float) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º

        Args:
            signal: –°–∏–≥–Ω–∞–ª
            tp_level: –£—Ä–æ–≤–µ–Ω—å TP (TP1/TP2/TP3)
            price: –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        Returns:
            –°–æ–±—ã—Ç–∏–µ (dict) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
        if tp_level == "TP1":
            close_percent = self.tp1_percentage
        elif tp_level == "TP2":
            close_percent = self.tp2_percentage
        else:  # TP3
            close_percent = self.tp3_percentage

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å
        profit_percent = signal.calculate_pnl(price)
        weighted_profit = profit_percent * close_percent

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é
        fill = {
            "level": tp_level,
            "price": price,
            "percentage": close_percent,
            "profit_percent": profit_percent,
            "weighted_profit": weighted_profit,
            "timestamp": datetime.now().isoformat(),
        }

        signal.fills.append(fill)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if tp_level == "TP1":
            self.stats["tp1_triggered"] += 1
        elif tp_level == "TP2":
            self.stats["tp2_triggered"] += 1
        elif tp_level == "TP3":
            self.stats["tp3_triggered"] += 1

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self._send_tp_notification(signal, tp_level, price, profit_percent)

        # –ï—Å–ª–∏ —ç—Ç–æ TP3 –∏–ª–∏ –≤—Å–µ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã, –∑–∞–∫—Ä—ã—Ç—å —Å–∏–≥–Ω–∞–ª
        if tp_level == "TP3" or (signal.tp1_hit and signal.tp2_hit and signal.tp3_hit):
            await self._close_signal(signal, "completed")

        return {
            "type": "tp_hit",
            "signal_id": signal.signal_id,
            "level": tp_level,
            "price": price,
            "profit": weighted_profit,
        }

    async def _handle_sl_hit(self, signal: Signal, price: float) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Stop Loss —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º

        Args:
            signal: –°–∏–≥–Ω–∞–ª
            price: –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è SL

        Returns:
            –°–æ–±—ã—Ç–∏–µ (dict) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        """
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–±—ã—Ç–æ–∫
        loss_percent = signal.calculate_pnl(price)

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏
        closed_percent = sum(
            [
                self.tp1_percentage if signal.tp1_hit else 0,
                self.tp2_percentage if signal.tp2_hit else 0,
                self.tp3_percentage if signal.tp3_hit else 0,
            ]
        )

        remaining_percent = 1.0 - closed_percent
        weighted_loss = loss_percent * remaining_percent

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é
        fill = {
            "level": "stop_loss",
            "price": price,
            "percentage": remaining_percent,
            "profit_percent": loss_percent,
            "weighted_profit": weighted_loss,
            "timestamp": datetime.now().isoformat(),
        }

        signal.fills.append(fill)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["sl_triggered"] += 1

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self._send_sl_notification(signal, price, weighted_loss)

        # –ó–∞–∫—Ä—ã—Ç—å —Å–∏–≥–Ω–∞–ª
        await self._close_signal(signal, "stopped")

        return {
            "type": "sl_hit",
            "signal_id": signal.signal_id,
            "price": price,
            "loss": weighted_loss,
        }

    # ========== TRAILING STOP ==========

    async def _update_trailing_stop(self, signal: Signal):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Trailing Stop –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –≤ –ø—Ä–∏–±—ã–ª–∏

        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π P&L
            pnl = signal.calculate_pnl()

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if pnl >= self.trailing_stop_trigger:
                # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—ã–π SL
                if signal.direction.upper() == "LONG":
                    # LONG: SL = —Ü–µ–Ω–∞ - distance%
                    new_sl = signal.current_price * (
                        1 - self.trailing_stop_distance / 100
                    )

                    # –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π SL –≤—ã—à–µ —Å—Ç–∞—Ä–æ–≥–æ
                    if new_sl > signal.stop_loss:
                        old_sl = signal.stop_loss
                        signal.stop_loss = new_sl

                        self.stats["trailing_activated"] += 1

                        logger.info(
                            f"üìà TRAILING STOP: {signal.symbol} "
                            f"#{signal.signal_id} "
                            f"SL: ${old_sl:,.2f} ‚Üí ${new_sl:,.2f} "
                            f"(P&L: +{pnl:.2f}%)"
                        )

                        # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                        await self._update_signal_in_db(signal)

                elif signal.direction.upper() == "SHORT":
                    # SHORT: SL = —Ü–µ–Ω–∞ + distance%
                    new_sl = signal.current_price * (
                        1 + self.trailing_stop_distance / 100
                    )

                    # –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π SL –Ω–∏–∂–µ —Å—Ç–∞—Ä–æ–≥–æ
                    if new_sl < signal.stop_loss:
                        old_sl = signal.stop_loss
                        signal.stop_loss = new_sl

                        self.stats["trailing_activated"] += 1

                        logger.info(
                            f"üìâ TRAILING STOP: {signal.symbol} "
                            f"#{signal.signal_id} "
                            f"SL: ${old_sl:,.2f} ‚Üí ${new_sl:,.2f} "
                            f"(P&L: +{pnl:.2f}%)"
                        )

                        # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                        await self._update_signal_in_db(signal)

        except Exception as e:
            logger.error(f"‚ùå Trailing stop error: {e}", exc_info=True)

    # ========== TELEGRAM NOTIFICATIONS ==========

    async def _send_tp_notification(
        self, signal: Signal, tp_level: str, price: float, profit_percent: float
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP

        Args:
            signal: –°–∏–≥–Ω–∞–ª
            tp_level: –£—Ä–æ–≤–µ–Ω—å TP
            price: –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            profit_percent: –ü—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if not self.telegram_handler:
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ risky entry
            is_risky = signal.quality_score < 50

            if tp_level == "TP1":
                if is_risky:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ (RISKY ENTRY) ‚ö†Ô∏è\n\n"
                        f"üìä {signal.symbol} {signal.direction.upper()}\n"
                        f"üí∞ Entry: ${signal.entry_price:,.2f}\n"
                        f"üìà Current: ${price:,.2f}\n"
                        f"üéØ TP1: ${signal.tp1:,.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!\n"
                        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω–æ–µ –¥–µ—Ä–∂–∏ –¥–æ TP2"
                    )
                else:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                        f"üìä {signal.symbol} {signal.direction.upper()}\n"
                        f"üí∞ Entry: ${signal.entry_price:,.2f}\n"
                        f"üìà Current: ${price:,.2f}\n"
                        f"üéØ TP1: ${signal.tp1:,.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                    )

            elif tp_level == "TP2":
                message = (
                    f"üéØüéØ TP2 –î–û–°–¢–ò–ì–ù–£–¢ üéØüéØ\n\n"
                    f"üìä {signal.symbol} {signal.direction.upper()}\n"
                    f"üí∞ Entry: ${signal.entry_price:,.2f}\n"
                    f"üìà Current: ${price:,.2f}\n"
                    f"üéØ TP2: ${signal.tp2:,.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                    f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP3\n"
                    f"   ‚Ä¢ –°—Ç–æ–ø —É–∂–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ"
                )

            else:  # TP3
                message = (
                    f"üéØüéØüéØ TP3 –î–û–°–¢–ò–ì–ù–£–¢ üéØüéØüéØ\n\n"
                    f"üìä {signal.symbol} {signal.direction.upper()}\n"
                    f"üí∞ Entry: ${signal.entry_price:,.2f}\n"
                    f"üìà Current: ${price:,.2f}\n"
                    f"üéØ TP3: ${signal.tp3:,.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –¢—Ä–µ–π–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ (trailing stop)\n"
                    f"   ‚Ä¢ –ò–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                    f"   ‚Ä¢ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞! üéâ"
                )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            if hasattr(self.telegram_handler, "send_alert"):
                await self.telegram_handler.send_alert(message)
            elif hasattr(self.telegram_handler, "send_message"):
                await self.telegram_handler.send_message(message)

            logger.info(
                f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {tp_level} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {signal.symbol}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _send_sl_notification(
        self, signal: Signal, price: float, loss_percent: float
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Stop Loss

        Args:
            signal: –°–∏–≥–Ω–∞–ª
            price: –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è SL
            loss_percent: –£–±—ã—Ç–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        if not self.telegram_handler:
            return

        try:
            message = (
                f"üõë –°–¢–û–ü –ê–ö–¢–ò–í–ò–†–û–í–ê–ù üõë\n\n"
                f"üìä {signal.symbol} {signal.direction.upper()}\n"
                f"üí∞ Entry: ${signal.entry_price:,.2f}\n"
                f"üìâ Current: ${price:,.2f}\n"
                f"üõë Stop Loss: ${signal.stop_loss:,.2f}\n"
                f"üí∏ Loss: {loss_percent:.2f}%\n\n"
                f"‚ùå –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω\n"
                f"   ‚Ä¢ Stop Loss –¥–æ—Å—Ç–∏–≥–Ω—É—Ç\n"
                f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã\n"
                f"   ‚Ä¢ –ñ–¥—ë–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
            )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            if hasattr(self.telegram_handler, "send_alert"):
                await self.telegram_handler.send_alert(message)
            elif hasattr(self.telegram_handler, "send_message"):
                await self.telegram_handler.send_message(message)

            logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ STOP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {signal.symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ STOP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # ========== HELPER METHODS ==========

    def _calculate_current_roi(self, signal: Signal) -> float:
        """
        –†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ ROI —Å —É—á—ë—Ç–æ–º –∑–∞–∫—Ä—ã—Ç—ã—Ö —á–∞—Å—Ç–µ–π

        Args:
            signal: –°–∏–≥–Ω–∞–ª

        Returns:
            –¢–µ–∫—É—â–∏–π ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        # ROI –æ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —á–∞—Å—Ç–µ–π
        closed_roi = sum([fill["weighted_profit"] for fill in signal.fills])

        # ROI –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —á–∞—Å—Ç–∏
        closed_percent = sum(
            [
                self.tp1_percentage if signal.tp1_hit else 0,
                self.tp2_percentage if signal.tp2_hit else 0,
                self.tp3_percentage if signal.tp3_hit else 0,
            ]
        )

        remaining_percent = 1.0 - closed_percent

        if remaining_percent > 0 and signal.current_price > 0:
            unrealized_profit = signal.calculate_pnl()
            unrealized_roi = unrealized_profit * remaining_percent
        else:
            unrealized_roi = 0.0

        return closed_roi + unrealized_roi

    async def _close_signal(self, signal: Signal, status: str):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å –≤ completed

        Args:
            signal: –°–∏–≥–Ω–∞–ª
            status: –°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–∏—è (completed/stopped)
        """
        signal.status = status
        signal.close_time = datetime.now().isoformat()
        signal.is_active = False

        # –§–∏–Ω–∞–ª—å–Ω—ã–π ROI
        final_roi = sum([fill["weighted_profit"] for fill in signal.fills])
        signal.current_roi = final_roi

        # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ completed
        self.completed_signals.append(signal)
        del self.active_signals[signal.signal_id]

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if signal.signal_id in self.monitor_tasks:
            task = self.monitor_tasks[signal.signal_id]
            if task and not task.done():
                task.cancel()
            del self.monitor_tasks[signal.signal_id]

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_closures"] += 1

        # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
        await self._update_signal_in_db(signal, final=True)

        logger.info(
            f"üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ {signal.signal_id} –∑–∞–≤–µ—Ä—à—ë–Ω. "
            f"–°—Ç–∞—Ç—É—Å: {status}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_roi:+.2f}%"
        )

    # ========== DATABASE METHODS ==========

    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    """
                    CREATE TABLE IF NOT EXISTS signals (
                        signal_id TEXT PRIMARY KEY,
                        symbol TEXT,
                        direction TEXT,
                        entry_price REAL,
                        stop_loss REAL,
                        tp1 REAL,
                        tp2 REAL,
                        tp3 REAL,
                        tp1_hit INTEGER DEFAULT 0,
                        tp2_hit INTEGER DEFAULT 0,
                        tp3_hit INTEGER DEFAULT 0,
                        sl_hit INTEGER DEFAULT 0,
                        current_roi REAL DEFAULT 0,
                        status TEXT DEFAULT 'active',
                        entry_time TEXT,
                        close_time TEXT,
                        quality_score REAL DEFAULT 0
                    )
                """
                )

                # ‚úÖ –ü–†–û–í–ï–†–ò–¢–¨ –ò –î–û–ë–ê–í–ò–¢–¨ close_time –ï–°–õ–ò –ï–Å –ù–ï–¢
                cursor = await db.execute("PRAGMA table_info(signals)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]

                if "close_time" not in column_names:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É close_time...")
                    await db.execute("ALTER TABLE signals ADD COLUMN close_time TEXT")
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ close_time –¥–æ–±–∞–≤–ª–µ–Ω–∞")

                await db.commit()

            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    async def _save_signal_to_db(self, signal: Signal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    """
                    INSERT INTO signals (
                        signal_id, symbol, direction, entry_price, stop_loss,
                        tp1, tp2, tp3, status, entry_time, quality_score
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        signal.signal_id,
                        signal.symbol,
                        signal.direction,
                        signal.entry_price,
                        signal.stop_loss,
                        signal.tp1,
                        signal.tp2,
                        signal.tp3,
                        signal.status,
                        signal.entry_time,
                        signal.quality_score,
                    ),
                )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")

    async def _update_signal_in_db(self, signal: Signal, final: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if final:
                    await db.execute(
                        """
                        UPDATE signals
                        SET status = ?, current_roi = ?, close_time = ?,
                            tp1_hit = ?, tp2_hit = ?, tp3_hit = ?, sl_hit = ?
                        WHERE signal_id = ?
                    """,
                        (
                            signal.status,
                            signal.current_roi,
                            signal.close_time,
                            signal.tp1_hit,
                            signal.tp2_hit,
                            signal.tp3_hit,
                            signal.sl_hit,
                            signal.signal_id,
                        ),
                    )
                else:
                    await db.execute(
                        """
                        UPDATE signals
                        SET current_roi = ?, tp1_hit = ?, tp2_hit = ?,
                            tp3_hit = ?, sl_hit = ?, stop_loss = ?
                        WHERE signal_id = ?
                    """,
                        (
                            signal.current_roi,
                            signal.tp1_hit,
                            signal.tp2_hit,
                            signal.tp3_hit,
                            signal.sl_hit,
                            signal.stop_loss,
                            signal.signal_id,
                        ),
                    )
                await db.commit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")

    # ========== STATISTICS ==========

    async def get_statistics(self, days: int = 30) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        cutoff_date = datetime.now() - timedelta(days=days)

        # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        recent_signals = [
            s
            for s in self.completed_signals
            if s.close_time and datetime.fromisoformat(s.close_time) > cutoff_date
        ]

        if not recent_signals:
            return {
                "total_signals": 0,
                "win_rate": 0.0,
                "average_roi": 0.0,
                "total_roi": 0.0,
                "wins": 0,
                "losses": 0,
                "period_days": days,
            }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(recent_signals)
        wins = len([s for s in recent_signals if s.current_roi > 0])
        losses = len([s for s in recent_signals if s.current_roi <= 0])

        win_rate = (wins / total) * 100 if total > 0 else 0
        average_roi = sum([s.current_roi for s in recent_signals]) / total
        total_roi = sum([s.current_roi for s in recent_signals])

        return {
            "total_signals": total,
            "wins": wins,
            "losses": losses,
            "win_rate": win_rate,
            "average_roi": average_roi,
            "total_roi": total_roi,
            "period_days": days,
            "sl_triggered": self.stats["sl_triggered"],
            "tp1_triggered": self.stats["tp1_triggered"],
            "tp2_triggered": self.stats["tp2_triggered"],
            "tp3_triggered": self.stats["tp3_triggered"],
            "trailing_activated": self.stats["trailing_activated"],
        }

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.stats.copy()


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
SignalPerformanceTracker = ROITracker

__all__ = ["ROITracker", "SignalPerformanceTracker", "Signal"]
