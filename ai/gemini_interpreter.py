# -*- coding: utf-8 -*-
"""
Google Gemini 2.0 Flash AI Interpreter
100% –ë–ï–°–ü–õ–ê–¢–ù–û ‚Äî 60 RPM (86,400 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)
"""

import aiohttp
import json
from typing import Dict, Optional
from config.settings import logger


class GeminiInterpreter:
    """AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ Google Gemini 2.0 Flash"""

    def __init__(self, api_key: str):
        print("üîÑ GeminiInterpreter.__init__ –í–´–ó–í–ê–ù")
        print(f"üîë API key length: {len(api_key)}")

        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent"
        self.session = None
        self.request_count = 0

        print("‚úÖ GeminiInterpreter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Gemini 2.0 Flash)")
        logger.info("‚úÖ GeminiInterpreter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Gemini 2.0 Flash)")

    # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: Context manager support
    async def __aenter__(self):
        """Context manager entry"""
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        await self.close()

    async def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(timeout=timeout)
        return self.session

    async def interpret_metrics(self, metrics: Dict) -> Optional[str]:
        """
        –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ Gemini 2.0 Flash

        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (scenario, cvd, funding_rate, oi, ls_ratio, etc)

        Returns:
            –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (2-3 —Å—Ç—Ä–æ–∫–∏) –∏–ª–∏ fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.api_key:
                logger.warning("‚ö†Ô∏è Gemini API key –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç fallback")
                return self._get_fallback_interpretation(metrics)

            # –°–æ–∑–¥–∞—ë–º prompt
            prompt = self._create_prompt(metrics)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            session = await self.get_session()
            url = f"{self.base_url}?key={self.api_key}"

            payload = {
                "contents": [{"parts": [{"text": prompt}]}],
                "generationConfig": {
                    "temperature": 0.3,  # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–∞, –±–æ–ª—å—à–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
                    "maxOutputTokens": 150,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    "topK": 40,
                    "topP": 0.95,
                },
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with session.post(url, json=payload, timeout=15) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if "candidates" in data and len(data["candidates"]) > 0:
                        text = data["candidates"][0]["content"]["parts"][0]["text"]
                        interpretation = text.strip()

                        self.request_count += 1
                        logger.debug(
                            f"‚úÖ Gemini –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–æ—Å #{self.request_count})"
                        )

                        return interpretation
                    else:
                        logger.warning("‚ö†Ô∏è Gemini: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—Ç fallback")
                        return self._get_fallback_interpretation(metrics)

                elif response.status == 429:
                    logger.warning(
                        "‚ö†Ô∏è Gemini API: Rate limit exceeded (60 RPM), –≤–æ–∑–≤—Ä–∞—Ç fallback"
                    )
                    return self._get_fallback_interpretation(metrics)

                else:
                    error_text = await response.text()
                    logger.error(
                        f"‚ùå Gemini API error {response.status}: {error_text}, –≤–æ–∑–≤—Ä–∞—Ç fallback"
                    )
                    return self._get_fallback_interpretation(metrics)

        except aiohttp.ClientError as e:
            logger.error(f"‚ùå Gemini connection error: {e}, –≤–æ–∑–≤—Ä–∞—Ç fallback")
            return self._get_fallback_interpretation(metrics)

        except Exception as e:
            logger.error(f"‚ùå Gemini interpretation error: {e}, –≤–æ–∑–≤—Ä–∞—Ç fallback")
            return self._get_fallback_interpretation(metrics)

    async def interpret_text(self, prompt: str) -> Optional[str]:
        """
        –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ prompt —á–µ—Ä–µ–∑ Gemini 2.0 Flash

        Args:
            prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π prompt –¥–ª—è AI

        Returns:
            –û—Ç–≤–µ—Ç AI (—Å—Ç—Ä–æ–∫–∞) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.api_key:
                logger.warning("‚ö†Ô∏è Gemini API key –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            session = await self.get_session()
            url = f"{self.base_url}?key={self.api_key}"

            payload = {
                "contents": [{"parts": [{"text": prompt}]}],
                "generationConfig": {
                    "temperature": 0.3,
                    "maxOutputTokens": 50,  # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è sentiment
                    "topK": 40,
                    "topP": 0.95,
                },
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with session.post(url, json=payload, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if "candidates" in data and len(data["candidates"]) > 0:
                        text = data["candidates"][0]["content"]["parts"][0]["text"]
                        result = text.strip()

                        self.request_count += 1
                        logger.debug(
                            f"‚úÖ Gemini sentiment –ø–æ–ª—É—á–µ–Ω ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–æ—Å #{self.request_count})"
                        )

                        return result
                    else:
                        logger.warning("‚ö†Ô∏è Gemini: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        return None

                elif response.status == 429:
                    logger.warning("‚ö†Ô∏è Gemini API: Rate limit exceeded (60 RPM)")
                    return None

                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Gemini API error {response.status}: {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå Gemini sentiment error: {e}")
            return None

    async def analyze_text(self, prompt: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini 2.0 Flash
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /news AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

        Args:
            prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π prompt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç Gemini AI
        """
        try:
            if not self.api_key:
                logger.warning("‚ö†Ô∏è Gemini API key –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ""

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            session = await self.get_session()
            url = f"{self.base_url}?key={self.api_key}"

            payload = {
                "contents": [{"parts": [{"text": prompt}]}],
                "generationConfig": {
                    "temperature": 0.4,
                    "maxOutputTokens": 500,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                    "topK": 40,
                    "topP": 0.95,
                },
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with session.post(url, json=payload, timeout=20) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if "candidates" in data and len(data["candidates"]) > 0:
                        text = data["candidates"][0]["content"]["parts"][0]["text"]
                        result = text.strip()

                        self.request_count += 1
                        logger.debug(
                            f"‚úÖ Gemini analyze_text –ø–æ–ª—É—á–µ–Ω ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–æ—Å #{self.request_count})"
                        )

                        return result
                    else:
                        logger.warning("‚ö†Ô∏è Gemini analyze_text: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        return ""

                elif response.status == 429:
                    logger.warning("‚ö†Ô∏è Gemini API: Rate limit exceeded (60 RPM)")
                    return ""

                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Gemini API error {response.status}: {error_text}")
                    return ""

        except Exception as e:
            logger.error(f"‚ùå Gemini analyze_text error: {e}")
            return ""


    def _create_prompt(self, metrics: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ prompt –¥–ª—è Gemini"""
        scenario = metrics.get("scenario", "UNKNOWN")
        symbol = metrics.get("symbol", "UNKNOWN")
        cvd = metrics.get("cvd", 0)
        funding_rate = metrics.get("funding_rate", 0)
        oi = metrics.get("open_interest", 0)
        ls_ratio = metrics.get("ls_ratio", 1.0)
        orderbook_pressure = metrics.get("orderbook_pressure", 0)
        whale_count = len(metrics.get("whale_activity", []))

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol} –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é (2-3 —Å—Ç—Ä–æ–∫–∏) —Å —ç–º–æ–¥–∑–∏.

üöÄ MM –°–¶–ï–ù–ê–†–ò–ô: {scenario}

üìä –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ CVD (Cumulative Volume Delta): {cvd:+.2f}%
‚Ä¢ Funding Rate: {funding_rate:+.4f}%
‚Ä¢ Open Interest: ${oi/1e9:.2f}B
‚Ä¢ Long/Short Ratio: {ls_ratio:.2f}
‚Ä¢ Orderbook Pressure: {orderbook_pressure:+.1f}% {'üìà BUY' if orderbook_pressure > 0 else 'üìâ SELL'}
‚Ä¢ Whale Activity: {whale_count} –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ 15 –º–∏–Ω—É—Ç

–ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø (2-3 —Å—Ç—Ä–æ–∫–∏):
–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –∏ —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞? –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."""

        return prompt

    def _get_fallback_interpretation(self, metrics: Dict) -> str:
        """
        –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è, –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        scenario = metrics.get("scenario", "UNKNOWN")
        cvd = metrics.get("cvd", 0)
        funding = metrics.get("funding_rate", 0)
        ls_ratio = metrics.get("ls_ratio", 1.0)
        oi = metrics.get("open_interest", 0)

        # ‚úÖ –ê–ù–ê–õ–ò–ó CVD
        if abs(cvd) > 50:
            cvd_text = f"üî• –°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {'–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π' if cvd > 0 else '–ø—Ä–æ–¥–∞–≤—Ü–æ–≤'} (CVD {cvd:+.1f}%)."
        elif cvd > 0:
            cvd_text = f"üü¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (CVD {cvd:+.1f}%)."
        elif cvd < 0:
            cvd_text = f"üî¥ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (CVD {cvd:+.1f}%)."
        else:
            cvd_text = f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (CVD {cvd:+.1f}%)."

        # ‚úÖ –ê–ù–ê–õ–ò–ó FUNDING
        funding_pct = funding * 100
        if abs(funding_pct) < 0.01:
            funding_text = (
                f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π Funding ({funding_pct:+.2f}%) ‚Äî —Ä—ã–Ω–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω."
            )
        elif funding_pct > 0:
            funding_text = (
                f"üü¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π Funding ({funding_pct:+.2f}%) ‚Äî –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ª–æ–Ω–≥–∏."
            )
        else:
            funding_text = (
                f"üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π Funding ({funding_pct:+.2f}%) ‚Äî –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —à–æ—Ä—Ç—ã."
            )

        # ‚úÖ –ê–ù–ê–õ–ò–ó L/S RATIO
        if ls_ratio > 1.2:
            ls_text = f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ª–æ–Ω–≥–∏."
        elif ls_ratio < 0.8:
            ls_text = f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —à–æ—Ä—Ç—ã."
        else:
            ls_text = f"üìä L/S Ratio {ls_ratio:.1f} ‚Äî –ø–∞—Ä–∏—Ç–µ—Ç —Å–∏–ª."

        # ‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –°–¶–ï–ù–ê–†–ò–Æ
        if scenario == "Impulse":
            if cvd > 0:
                recommendation = (
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: üöÄ –°–ª–µ–¥—É–π —Ç—Ä–µ–Ω–¥—É –≤–≤–µ—Ä—Ö, —Ü–µ–ª–∏ ‚Äî –Ω–æ–≤—ã–µ —Ö–∞–∏."
                )
            else:
                recommendation = (
                    "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."
                )

        elif scenario == "Accumulation":
            recommendation = (
                "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: üìà –ì–æ—Ç–æ–≤—å—Å—è –∫ –∏–º–ø—É–ª—å—Å—É –≤–≤–µ—Ä—Ö –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è."
            )

        elif scenario == "Distribution":
            recommendation = (
                "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: üîª –ò–∑–±–µ–≥–∞–π –ª–æ–Ω–≥–æ–≤, –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—Ö–æ–¥—è—Ç."
            )

        elif scenario == "Manipulation":
            recommendation = "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚ö†Ô∏è Fake-out –≤–æ–∑–º–æ–∂–µ–Ω, –∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

        elif scenario == "Equilibrium":
            recommendation = (
                "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."
            )

        else:
            recommendation = (
                "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚è∏Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π."
            )

        # ‚úÖ –§–û–†–ú–ò–†–£–ï–ú –ò–¢–û–ì–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        return f"{cvd_text} {funding_text} {ls_text}   {recommendation}"

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
            logger.info(
                f"üåê Gemini session closed (–≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.request_count})"
            )


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["GeminiInterpreter"]
