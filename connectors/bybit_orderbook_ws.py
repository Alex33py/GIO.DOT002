#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WebSocket –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è L2 Orderbook –æ—Ç Bybit
–û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å depth=200 –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
"""

import asyncio
import websockets
import json
from typing import Dict, List, Callable, Optional
from config.settings import logger


class BybitOrderbookWebSocket:
    """WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è L2 orderbook –æ—Ç Bybit"""

    def __init__(
        self,
        symbol: str = "BTCUSDT",
        depth: int = 200,  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û —Å 50 –Ω–∞ 200!
        testnet: bool = False,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            depth: –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (1, 50, 200, 500, 1000)
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet
        """
        self.symbol = symbol
        self.depth = depth

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        valid_depths = [1, 50, 200, 500, 1000]
        if depth not in valid_depths:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π depth={depth}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 200")
            self.depth = 200

        # WebSocket URL
        if testnet:
            self.ws_url = "wss://stream-testnet.bybit.com/v5/public/linear"
        else:
            self.ws_url = "wss://stream.bybit.com/v5/public/linear"

        self.websocket = None
        self.callbacks = []
        self.is_running = False
        self._task = None

        # === –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ orderbook ===
        self._orderbook = None
        self._snapshot_received = False

        logger.info(
            f"‚úÖ BybitOrderbookWebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω "
            f"–¥–ª—è {symbol} (depth={self.depth}, refresh={self._get_refresh_rate()}ms)"
        )

    def _get_refresh_rate(self):
        """–ü–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        refresh_rates = {
            1: 10,
            50: 20,
            200: 100,
            500: 100,
            1000: 300,
        }
        return refresh_rates.get(self.depth, 100)

    def add_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook"""
        self.callbacks.append(callback)
        logger.debug(f"‚úÖ Callback –¥–æ–±–∞–≤–ª–µ–Ω ({len(self.callbacks)} –≤—Å–µ–≥–æ)")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.ws_url}...")

            self.websocket = await websockets.connect(
                self.ws_url, ping_interval=20, ping_timeout=10
            )

            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ orderbook
            subscribe_msg = {
                "op": "subscribe",
                "args": [f"orderbook.{self.depth}.{self.symbol}"],
            }

            await self.websocket.send(json.dumps(subscribe_msg))
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ orderbook.{self.depth}.{self.symbol}")

            self.is_running = True
            self._task = asyncio.create_task(self._listen())

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")
            raise

    async def _listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            async for message in self.websocket:
                try:
                    data = json.loads(message)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ orderbook
                    if data.get("topic", "").startswith("orderbook"):
                        await self._process_message(data)

                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.is_running = False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}")
            self.is_running = False

    async def _process_message(self, data: Dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Bybit
        –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ snapshot –∏ delta
        """
        try:
            if "data" not in data:
                return

            orderbook_data = data["data"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type = data.get("type", "snapshot")

            bids = orderbook_data.get("b", [])
            asks = orderbook_data.get("a", [])
            timestamp = int(orderbook_data.get("ts", 0))
            update_id = orderbook_data.get("u", 0)

            # === SNAPSHOT: –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è orderbook ===
            if message_type == "snapshot":
                logger.info(
                    f"üì∏ –ü–æ–ª—É—á–µ–Ω snapshot: bids={len(bids)}, asks={len(asks)} "
                    f"(depth={self.depth})"
                )

                self._orderbook = {
                    "symbol": orderbook_data.get("s", self.symbol),
                    "timestamp": timestamp,
                    "update_id": update_id,
                    "bids": [[float(b[0]), float(b[1])] for b in bids],
                    "asks": [[float(a[0]), float(a[1])] for a in asks],
                }

                self._snapshot_received = True

                # –í—ã–∑—ã–≤–∞–µ–º callbacks —Å –ü–û–õ–ù–´–ú orderbook
                await self._notify_callbacks()
                return

            # === DELTA: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π ===
            elif message_type == "delta":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ snapshot —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
                if not self._snapshot_received or not self._orderbook:
                    logger.warning("‚ö†Ô∏è Delta –ø–æ–ª—É—á–µ–Ω –¥–æ snapshot, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                    return

                # === –û–ë–ù–û–í–õ–Ø–ï–ú BIDS ===
                for bid in bids:
                    try:
                        price = float(bid[0])
                        size = float(bid[1])

                        if size == 0:
                            # –£–¥–∞–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å (—Ü–µ–Ω–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ orderbook)
                            self._orderbook["bids"] = [
                                b for b in self._orderbook["bids"] if b[0] != price
                            ]
                        else:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                            updated = False
                            for i, existing_bid in enumerate(self._orderbook["bids"]):
                                if existing_bid[0] == price:
                                    self._orderbook["bids"][i] = [price, size]
                                    updated = True
                                    break

                            if not updated:
                                # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - –¥–æ–±–∞–≤–ª—è–µ–º
                                self._orderbook["bids"].append([price, size])

                    except (ValueError, IndexError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bid: {e}")
                        continue

                # === –û–ë–ù–û–í–õ–Ø–ï–ú ASKS ===
                for ask in asks:
                    try:
                        price = float(ask[0])
                        size = float(ask[1])

                        if size == 0:
                            # –£–¥–∞–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                            self._orderbook["asks"] = [
                                a for a in self._orderbook["asks"] if a[0] != price
                            ]
                        else:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                            updated = False
                            for i, existing_ask in enumerate(self._orderbook["asks"]):
                                if existing_ask[0] == price:
                                    self._orderbook["asks"][i] = [price, size]
                                    updated = True
                                    break

                            if not updated:
                                # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - –¥–æ–±–∞–≤–ª—è–µ–º
                                self._orderbook["asks"].append([price, size])

                    except (ValueError, IndexError) as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ask: {e}")
                        continue

                # === –°–û–†–¢–ò–†–£–ï–ú –ò –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú ===
                # Bids –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã (–ª—É—á—à–∞—è bid –ø–µ—Ä–≤–∞—è)
                self._orderbook["bids"].sort(key=lambda x: x[0], reverse=True)
                # Asks –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã (–ª—É—á—à–∞—è ask –ø–µ—Ä–≤–∞—è)
                self._orderbook["asks"].sort(key=lambda x: x[0])

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ depth (200 —É—Ä–æ–≤–Ω–µ–π)
                self._orderbook["bids"] = self._orderbook["bids"][: self.depth]
                self._orderbook["asks"] = self._orderbook["asks"][: self.depth]

                # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                self._orderbook["timestamp"] = timestamp
                self._orderbook["update_id"] = update_id

                from utils.log_batcher import log_batcher
                log_batcher.log_orderbook_update('Bybit', self.symbol)

                # –í—ã–∑—ã–≤–∞–µ–º callbacks —Å –û–ë–ù–û–í–õ–Å–ù–ù–´–ú orderbook
                await self._notify_callbacks()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback

            logger.error(traceback.format_exc())

    async def _notify_callbacks(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö callbacks –æ –Ω–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ orderbook"""
        try:
            if not self._orderbook:
                return

            # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ callbacks —Å –ü–û–õ–ù–´–ú orderbook
            for callback in self.callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(self._orderbook)
                    else:
                        callback(self._orderbook)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è callbacks: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket Orderbook...")

            self.is_running = False

            if self._task and not self._task.done():
                self._task.cancel()
                try:
                    await self._task
                except asyncio.CancelledError:
                    pass

            if self.websocket:
                await self.websocket.close()

            logger.info("‚úÖ WebSocket Orderbook –∑–∞–∫—Ä—ã—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")
