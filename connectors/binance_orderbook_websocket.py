#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Binance Orderbook WebSocket
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö orderbook —á–µ—Ä–µ–∑ WebSocket —Å robust connection management
"""

import asyncio
import time
from typing import List, Dict, Optional
from utils.websocket_manager import WebSocketManager
from config.settings import logger


class BinanceOrderbookWebSocket:
    """
    Binance Orderbook WebSocket —Å –∞–≤—Ç–æ—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º

    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.binance.com/docs/derivatives/usds-margined-futures/websocket-market-streams
    """

    def __init__(self, symbols: List[str], connector, depth: int = 20):
        """
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["BTCUSDT", "ETHUSDT"])
            connector: BinanceConnector instance
            depth: –ì–ª—É–±–∏–Ω–∞ orderbook (5, 10, 20) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
        """
        self.symbols = symbols
        self.connector = connector
        self.depth = depth
        self.orderbook_data = {}
        self.last_pressure_log: Dict[str, float] = {}  # Throttling –¥–ª—è –ª–æ–≥–æ–≤

        # –°–æ–∑–¥–∞–Ω–∏–µ streams –¥–ª—è futures
        self.streams = [f"{s.lower()}@depth{depth}@100ms" for s in symbols]

        # WebSocket URL –¥–ª—è futures
        url = f"wss://fstream.binance.com/stream?streams={'/'.join(self.streams)}"

        # –°–æ–∑–¥–∞–Ω–∏–µ WebSocket Manager
        self.ws_manager = WebSocketManager(
            url=url,
            on_message=self._process_message,
            on_connect=self._on_connect,
            on_disconnect=self._on_disconnect,
            ping_interval=20,
            ping_timeout=15,
            reconnect_delay=5,
            max_reconnect_attempts=10,
            name="Binance-Orderbook",
        )

        logger.info(
            f"‚úÖ Binance Orderbook WS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
            f"{len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, depth={depth}"
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket"""
        await self.ws_manager.start()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket"""
        await self.ws_manager.stop()

    async def _on_connect(self):
        """Callback –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        logger.info(f"üéâ Binance Orderbook WS –ø–æ–¥–∫–ª—é—á—ë–Ω: {len(self.symbols)} –ø–æ—Ç–æ–∫–æ–≤")

    async def _on_disconnect(self):
        """Callback –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
        logger.warning("‚ö†Ô∏è Binance Orderbook WS –æ—Ç–∫–ª—é—á—ë–Ω")

    async def _process_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if "data" not in data:
                return

            msg = data["data"]
            symbol = msg.get("s", "").upper()  # BTCUSDT

            if not symbol:
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º orderbook
            self.orderbook_data[symbol] = {
                "bids": [[float(bid[0]), float(bid[1])] for bid in msg.get("b", [])],
                "asks": [[float(ask[0]), float(ask[1])] for ask in msg.get("a", [])],
                "timestamp": msg.get("E", 0),
            }

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ connector (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if hasattr(self.connector, "orderbook_data"):
                self.connector.orderbook_data[symbol] = self.orderbook_data[symbol]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å –∏ –ª–æ–≥–∏—Ä—É–µ–º (throttled)
            imbalance = self._calculate_imbalance(symbol)

            if imbalance and abs(imbalance) > 70:
                current_time = time.time()
                last_log = self.last_pressure_log.get(symbol, 0)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
                if current_time - last_log >= 30:
                    direction = "üìà BUY" if imbalance > 0 else "üìâ SELL"
                    logger.info(
                        f"üî• Binance {symbol}: {abs(imbalance):.1f}% {direction} pressure"
                    )
                    self.last_pressure_log[symbol] = current_time

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")

    def _calculate_imbalance(self, symbol: str) -> Optional[float]:
        """–†–∞—Å—á—ë—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ bid/ask"""
        try:
            orderbook = self.orderbook_data.get(symbol)
            if not orderbook:
                return None

            bids = orderbook["bids"]
            asks = orderbook["asks"]

            if not bids or not asks:
                return None

            # –°—É–º–º–∞ –æ–±—ä—ë–º–æ–≤ bid/ask
            bid_volume = sum([bid[1] for bid in bids])
            ask_volume = sum([ask[1] for ask in asks])

            total = bid_volume + ask_volume
            if total == 0:
                return 0

            # % –¥–∏—Å–±–∞–ª–∞–Ω—Å
            imbalance = ((bid_volume - ask_volume) / total) * 100
            return imbalance

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _calculate_imbalance: {e}")
            return None

    def get_orderbook(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å orderbook –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        return self.orderbook_data.get(symbol.upper())

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket"""
        return self.ws_manager.get_stats()

    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.ws_manager.is_healthy()
