#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Coinbase Connector –¥–ª—è GIO Crypto Bot
REST API + WebSocket streams (Coinbase Advanced Trade API)
"""

import asyncio
import aiohttp
import websockets
import json
import hmac
import hashlib
import time
from typing import Dict, List, Optional, Callable, Any
from datetime import datetime
from collections import deque
from config.settings import logger
from utils.validators import DataValidator


class CoinbaseConnector:
    """
    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∫ Coinbase Advanced Trade API
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç REST API –∏ WebSocket streams
    """

    def __init__(
        self,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        symbols: Optional[List[str]] = None,
        enable_websocket: bool = True,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Coinbase –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞

        Args:
            api_key: API –∫–ª—é—á Coinbase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            api_secret: API —Å–µ–∫—Ä–µ—Ç Coinbase
            symbols: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è WebSocket ['BTC-USD', 'ETH-USD']
            enable_websocket: –í–∫–ª—é—á–∏—Ç—å WebSocket –ø–æ—Ç–æ–∫–∏
        """
        # REST API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Advanced Trade API)
        self.base_url = "https://api.coinbase.com"
        self.api_key = api_key
        self.api_secret = api_secret
        self.session = None
        self.is_initialized = False

        # WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enable_websocket = enable_websocket
        self.ws_base = "wss://advanced-trade-ws.coinbase.com"
        self.symbols = symbols or []
        self.ws_connections: Dict[str, Any] = {}
        self.is_ws_running = False

        # WebSocket callbacks
        self.callbacks: Dict[str, Callable] = {}

        # Orderbook cache –¥–ª—è WebSocket
        self.orderbooks: Dict[str, Dict] = {}
        self.orderbook_initialized: Dict[str, bool] = {}
        self.last_pressure_log: Dict[str, float] = {}
        self.orderbook_data = {}
        self.large_trades = deque(maxlen=1000)

        # Statistics
        self.stats = {
            "rest_requests": 0,
            "rest_errors": 0,
            "ws_messages": 0,
            "ws_orderbook_updates": 0,
            "ws_trade_updates": 0,
            "ws_ticker_updates": 0,
            "ws_errors": 0,
        }

        logger.info("‚úÖ CoinbaseConnector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ===========================================
    # INITIALIZATION
    # ===========================================

    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è REST —Å–µ—Å—Å–∏–∏ –∏ WebSocket

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è REST API
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=30)
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            server_time = await self.get_server_time()

            if server_time:
                self.is_initialized = True
                logger.info("‚úÖ Coinbase REST API –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Coinbase REST API")
                return False

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if self.enable_websocket and self.symbols:
                logger.info(
                    f"üîå –ó–∞–ø—É—Å–∫ Coinbase WebSocket –¥–ª—è {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤..."
                )
                # WebSocket –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ start()
            else:
                logger.info("‚ÑπÔ∏è Coinbase WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Coinbase: {e}")
            return False

    def set_callbacks(self, callbacks: Dict[str, Callable]):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è WebSocket

        Args:
            callbacks: {
                'on_orderbook_update': func,
                'on_trade': func,
                'on_ticker': func
            }
        """
        self.callbacks = callbacks
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(callbacks)} callbacks –¥–ª—è Coinbase WebSocket")

    # ===========================================
    # AUTHENTICATION
    # ===========================================

    def _generate_signature(
        self, timestamp: str, method: str, request_path: str, body: str = ""
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Coinbase API

        Args:
            timestamp: Unix timestamp
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
            request_path: API endpoint
            body: Request body (–¥–ª—è POST)

        Returns:
            HMAC SHA256 signature
        """
        message = timestamp + method + request_path + body
        signature = hmac.new(
            self.api_secret.encode("utf-8"),
            message.encode("utf-8"),
            digestmod=hashlib.sha256,
        ).hexdigest()
        return signature

    def _get_headers(
        self, method: str, request_path: str, body: str = ""
    ) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å headers –¥–ª—è authenticated –∑–∞–ø—Ä–æ—Å–∞

        Args:
            method: HTTP –º–µ—Ç–æ–¥
            request_path: API endpoint
            body: Request body

        Returns:
            Dict —Å headers
        """
        timestamp = str(int(time.time()))
        signature = self._generate_signature(timestamp, method, request_path, body)

        headers = {
            "CB-ACCESS-KEY": self.api_key,
            "CB-ACCESS-SIGN": signature,
            "CB-ACCESS-TIMESTAMP": timestamp,
            "Content-Type": "application/json",
        }

        return headers

    # ===========================================
    # REST API METHODS
    # ===========================================

    async def get_server_time(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ Coinbase"""
        url = f"{self.base_url}/api/v3/brokerage/time"

        try:
            self.stats["rest_requests"] += 1
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    # Coinbase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO8601 timestamp
                    return int(time.time())
                else:
                    logger.error(f"‚ùå Coinbase server time –æ—à–∏–±–∫–∞: {response.status}")
                    self.stats["rest_errors"] += 1
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_server_time: {e}")
            self.stats["rest_errors"] += 1
            return None

    async def get_ticker(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å ticker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC-USD)

        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ ticker
        """
        url = f"{self.base_url}/api/v3/brokerage/products/{symbol}/ticker"

        try:
            self.stats["rest_requests"] += 1
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()

                    ticker = {
                        "symbol": symbol,
                        "last_price": float(data.get("price", 0)),
                        "volume_24h": float(data.get("volume", 0)),
                        "bid_price": float(data.get("best_bid", 0)),
                        "ask_price": float(data.get("best_ask", 0)),
                        "timestamp": datetime.utcnow(),
                    }

                    if DataValidator.validate_price(ticker["last_price"], symbol):
                        return ticker
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞ –≤ ticker {symbol}")
                        return None

                else:
                    logger.error(f"‚ùå Coinbase Ticker –æ—à–∏–±–∫–∞ {response.status}")
                    self.stats["rest_errors"] += 1
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_ticker: {e}")
            self.stats["rest_errors"] += 1
            return None

    async def get_orderbook(self, symbol: str, level: int = 2) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å L2 orderbook —á–µ—Ä–µ–∑ REST API

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC-USD)
            level: –£—Ä–æ–≤–µ–Ω—å depth (1, 2)

        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ orderbook
        """
        url = f"{self.base_url}/api/v3/brokerage/products/{symbol}/book"
        params = {"level": level}

        try:
            self.stats["rest_requests"] += 1
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    orderbook = {
                        "symbol": symbol,
                        "timestamp": datetime.utcnow(),
                        "bids": [
                            [float(price), float(size)]
                            for price, size, _ in data.get("bids", [])
                        ],
                        "asks": [
                            [float(price), float(size)]
                            for price, size, _ in data.get("asks", [])
                        ],
                    }

                    return orderbook

                else:
                    logger.error(f"‚ùå Coinbase Orderbook –æ—à–∏–±–∫–∞ {response.status}")
                    self.stats["rest_errors"] += 1
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_orderbook: {e}")
            self.stats["rest_errors"] += 1
            return None

    async def get_candles(
        self, symbol: str, granularity: int = 60, limit: int = 300
    ) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC-USD)
            granularity: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (60=1m, 300=5m, 3600=1h, 86400=1d)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–º–∞–∫—Å 300)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–µ–π
        """
        url = f"{self.base_url}/api/v3/brokerage/products/{symbol}/candles"

        # Calculate start/end times
        end_time = int(time.time())
        start_time = end_time - (granularity * limit)

        params = {
            "start": start_time,
            "end": end_time,
            "granularity": granularity,
        }

        try:
            self.stats["rest_requests"] += 1
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    candles = []
                    for candle in data.get("candles", []):
                        c = {
                            "timestamp": int(candle["start"]),
                            "open": float(candle["open"]),
                            "high": float(candle["high"]),
                            "low": float(candle["low"]),
                            "close": float(candle["close"]),
                            "volume": float(candle["volume"]),
                        }

                        if DataValidator.validate_candle(c):
                            candles.append(c)

                    logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π {symbol}")
                    return candles

                else:
                    logger.error(
                        f"‚ùå Coinbase Candles –æ—à–∏–±–∫–∞ {response.status} –¥–ª—è {symbol}"
                    )
                    self.stats["rest_errors"] += 1
                    return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_candles {symbol}: {e}")
            self.stats["rest_errors"] += 1
            return []

    async def get_trades(self, symbol: str, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC-USD)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–º–∞–∫—Å 300)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        """
        url = f"{self.base_url}/api/v3/brokerage/products/{symbol}/trades"
        params = {"limit": min(limit, 300)}

        try:
            self.stats["rest_requests"] += 1
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    trades = []
                    for trade in data.get("trades", []):
                        trades.append(
                            {
                                "trade_id": trade["trade_id"],
                                "price": float(trade["price"]),
                                "size": float(trade["size"]),
                                "timestamp": trade["time"],
                                "side": trade["side"],  # BUY/SELL
                            }
                        )

                    return trades

                else:
                    self.stats["rest_errors"] += 1
                    return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_trades: {e}")
            self.stats["rest_errors"] += 1
            return []

    # ===========================================
    # WEBSOCKET METHODS
    # ===========================================

    async def start_websocket(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        if not self.enable_websocket or not self.symbols:
            logger.info("‚ÑπÔ∏è Coinbase WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤")
            return

        self.is_ws_running = True
        tasks = []

        # Coinbase –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω WebSocket —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
        tasks.append(self._connect_websocket())

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Coinbase WebSocket –ø–æ—Ç–æ–∫–∞...")
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _connect_websocket(self):
        """WebSocket unified stream"""
        while self.is_ws_running:
            try:
                async with websockets.connect(
                    self.ws_base,
                    ping_interval=30,  # ‚Üê –ë—ã–ª–æ 20
                    ping_timeout=120,  # ‚Üê –ë—ã–ª–æ 60
                    close_timeout=10,  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ!
                ) as ws:
                    logger.info(f"‚úÖ Coinbase WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    self.ws_connections["main"] = ws

                    # Subscribe to channels
                    subscribe_msg = {
                        "type": "subscribe",
                        "product_ids": self.symbols,
                        "channels": [
                            "level2",  # Orderbook
                            "ticker",  # Ticker updates
                            "matches",  # Trades
                        ],
                    }

                    await ws.send(json.dumps(subscribe_msg))
                    logger.info(
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Coinbase –∫–∞–Ω–∞–ª—ã –¥–ª—è {len(self.symbols)} –ø–∞—Ä"
                    )

                    async for message in ws:
                        if not self.is_ws_running:
                            break

                        try:
                            data = json.loads(message)
                            await self._handle_ws_message(data)
                        except Exception as e:
                            logger.error(f"‚ùå Coinbase WS processing error: {e}")
                            self.stats["ws_errors"] += 1

            except websockets.exceptions.ConnectionClosed as e:
                if "keepalive ping timeout" in str(e):
                    logger.debug(f"‚ö†Ô∏è Coinbase ping timeout, reconnecting...")
                else:
                    logger.warning(f"‚ö†Ô∏è Coinbase WS closed, reconnecting...")
                await asyncio.sleep(5)
            except Exception as e:
                if "keepalive ping timeout" in str(e):
                    logger.debug(f"‚ö†Ô∏è Coinbase ping timeout, reconnecting...")
                else:
                    logger.error(f"‚ùå Coinbase WS error: {e}")
                    self.stats["ws_errors"] += 1
                await asyncio.sleep(5)

    async def _handle_ws_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket messages"""
        msg_type = data.get("type")

        if msg_type == "snapshot":
            # Orderbook snapshot
            await self._handle_orderbook_snapshot(data)

        elif msg_type == "l2update":
            # Orderbook update
            await self._handle_orderbook_update(data)

        elif msg_type == "ticker":
            # Ticker update
            await self._handle_ticker(data)

        elif msg_type == "match":
            # Trade
            await self._handle_trade(data)

        elif msg_type == "subscriptions":
            logger.debug(f"‚úÖ Coinbase subscriptions confirmed")

    async def _handle_orderbook_snapshot(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook snapshot"""
        symbol = data.get("product_id")

        if not symbol:
            return

        orderbook = {
            "symbol": symbol,
            "timestamp": datetime.utcnow(),
            "bids": {float(p): float(s) for p, s in data.get("bids", [])},
            "asks": {float(p): float(s) for p, s in data.get("asks", [])},
        }

        self.orderbooks[symbol] = orderbook
        self.orderbook_initialized[symbol] = True

        logger.info(f"üìä Coinbase orderbook snapshot: {symbol} initialized")

        self.stats["ws_messages"] += 1
        self.stats["ws_orderbook_updates"] += 1

        if "on_orderbook_update" in self.callbacks:
            await self.callbacks["on_orderbook_update"](symbol, orderbook)

    async def _handle_orderbook_update(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook updates"""
        symbol = data.get("product_id")

        if not symbol or symbol not in self.orderbooks:
            return

        orderbook = self.orderbooks[symbol]

        # Update bids
        for side, price, size in data.get("changes", []):
            price = float(price)
            size = float(size)

            if side == "buy":
                if size == 0:
                    orderbook["bids"].pop(price, None)
                else:
                    orderbook["bids"][price] = size
            elif side == "sell":
                if size == 0:
                    orderbook["asks"].pop(price, None)
                else:
                    orderbook["asks"][price] = size

        orderbook["timestamp"] = datetime.utcnow()

        self.stats["ws_messages"] += 1
        self.stats["ws_orderbook_updates"] += 1

        # ========== –î–û–ë–ê–í–ò–¢–¨ –†–ê–°–ß–Å–¢ –î–ò–°–ë–ê–õ–ê–ù–°–ê ==========
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —É—Ä–æ–≤–Ω–µ–π
            sorted_bids = sorted(orderbook["bids"].items(), reverse=True)[:5]
            sorted_asks = sorted(orderbook["asks"].items())[:5]

            if sorted_bids and sorted_asks:
                # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä—ë–º—ã —Ç–æ–ø 5 —É—Ä–æ–≤–Ω–µ–π
                bid_volume = sum([size for price, size in sorted_bids])
                ask_volume = sum([size for price, size in sorted_asks])

                total = bid_volume + ask_volume
                if total > 0:
                    imbalance = ((bid_volume - ask_volume) / total) * 100

                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å
                    if abs(imbalance) > 70:
                        current_time = time.time()
                        last_log = self.last_pressure_log.get(symbol, 0)

                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
                        if current_time - last_log >= 30:
                            direction = "üìà BUY" if imbalance > 0 else "üìâ SELL"
                            logger.info(
                                f"üî• Coinbase {symbol}: {abs(imbalance):.1f}% {direction} pressure"
                            )
                            self.last_pressure_log[symbol] = current_time

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Coinbase imbalance calc error: {e}")

        if "on_orderbook_update" in self.callbacks:
            await self.callbacks["on_orderbook_update"](symbol, orderbook)

    async def _handle_ticker(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ticker updates"""
        ticker_data = {
            "symbol": data.get("product_id"),
            "price": float(data.get("price", 0)),
            "bid": float(data.get("best_bid", 0)),
            "ask": float(data.get("best_ask", 0)),
            "volume_24h": float(data.get("volume_24h", 0)),
            "timestamp": data.get("time"),
        }

        self.stats["ws_messages"] += 1
        self.stats["ws_ticker_updates"] += 1

        if "on_ticker" in self.callbacks:
            await self.callbacks["on_ticker"](ticker_data["symbol"], ticker_data)

    async def _handle_trade(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ trades"""
        trade_data = {
            "symbol": data.get("product_id"),
            "trade_id": data.get("trade_id"),
            "price": float(data.get("price", 0)),
            "size": float(data.get("size", 0)),
            "side": data.get("side"),  # buy/sell
            "timestamp": data.get("time"),
        }

        self.stats["ws_messages"] += 1
        self.stats["ws_trade_updates"] += 1

        # üöÄ –ù–û–í–û–ï: –î–µ—Ç–µ–∫—Ç large trades
        usd_value = trade_data["price"] * trade_data["size"]
        if usd_value >= 100000:  # $100k threshold
            self.large_trades.append(trade_data)
            logger.debug(
                f"üí∞ Coinbase Large trade: {trade_data['symbol']} ${usd_value:,.0f}"
            )

        if "on_trade" in self.callbacks:
            await self.callbacks["on_trade"](trade_data["symbol"], trade_data)

    # ===========================================
    # HELPER METHODS
    # ===========================================

    def get_ws_orderbook(self, symbol: str, depth: int = 20) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π WebSocket orderbook –∏–∑ –∫—ç—à–∞"""
        if symbol not in self.orderbooks:
            return None

        ob = self.orderbooks[symbol]
        sorted_bids = sorted(ob["bids"].items(), reverse=True)[:depth]
        sorted_asks = sorted(ob["asks"].items())[:depth]

        return {
            "bids": sorted_bids,
            "asks": sorted_asks,
            "timestamp": ob["timestamp"],
        }

    def get_best_bid_ask(self, symbol: str) -> Optional[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ bid/ask –∏–∑ WebSocket cache"""
        orderbook = self.get_ws_orderbook(symbol, depth=1)
        if not orderbook or not orderbook["bids"] or not orderbook["asks"]:
            return None

        best_bid = orderbook["bids"][0][0]
        best_ask = orderbook["asks"][0][0]

        return (best_bid, best_ask)

    def get_spread(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É bid –∏ ask"""
        ba = self.get_best_bid_ask(symbol)
        if not ba:
            return None
        return ba[1] - ba[0]

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        return {
            **self.stats,
            "rest_initialized": self.is_initialized,
            "ws_running": self.is_ws_running,
            "ws_symbols": len(self.symbols),
            "orderbooks_cached": len(self.orderbooks),
        }

    # ===========================================
    # SHUTDOWN
    # ===========================================

    async def close(self):
        """Graceful shutdown REST + WebSocket"""
        try:
            logger.info("üõë Closing Coinbase connector...")

            # Stop WebSocket
            self.is_ws_running = False

            for name, ws in list(self.ws_connections.items()):
                try:
                    if ws is not None:
                        await ws.close()
                        logger.debug(f"‚úÖ Closed {name}")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è Error closing {name}: {e}")

            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.ws_connections.clear()

            # Close REST session
            if self.session and not self.session.closed:
                await self.session.close()
                logger.info("‚úÖ Coinbase REST session closed")

            self.is_initialized = False

            # Log final statistics
            logger.info(f"üìä Final Coinbase stats: {self.get_statistics()}")

        except Exception as e:
            logger.error(f"‚ùå Error closing Coinbase connector: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["CoinbaseConnector"]
