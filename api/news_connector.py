# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ –≤–µ—Å–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

import aiohttp
import asyncio
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from config.settings import logger, NEWS_CONFIG

class UnifiedNewsConnector:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–º–Ω—ã–º sentiment –∞–Ω–∞–ª–∏–∑–æ–º"""

    # –í–µ—Å–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è sentiment
    KEYWORD_WEIGHTS = {
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
        'ETF': 2.0,
        'adoption': 1.5,
        'bullish': 1.3,
        'partnership': 1.4,
        'integration': 1.2,
        'upgrade': 1.3,
        'approval': 1.8,

        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ
        'SEC': -1.5,
        'lawsuit': -1.8,
        'hack': -2.0,
        'scam': -2.0,
        'bearish': -1.3,
        'regulation': -1.0,
        'ban': -1.7,
        'crash': -1.5
    }

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SYMBOL_KEYWORDS = {
        'BTC': ['bitcoin', 'btc', 'satoshi'],
        'ETH': ['ethereum', 'eth', 'vitalik', 'ether'],
        'BNB': ['binance', 'bnb', 'bsc'],
        'SOL': ['solana', 'sol'],
        'XRP': ['ripple', 'xrp'],
        'ADA': ['cardano', 'ada'],
        'DOGE': ['dogecoin', 'doge', 'shib'],
        'ALT': []  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
    }

    def __init__(self):
        self.session = None
        self.news_cache = {}  # –ö—ç—à –ø–æ —Å–∏–º–≤–æ–ª–∞–º: {'BTC': [], 'ETH': [], 'ALT': []}
        self.cache_expiry = {}
        logger.info("‚úÖ UnifiedNewsConnector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º")

    async def ensure_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()

    async def get_news_by_symbol(self, symbol: str = 'BTC', hours: int = 24) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        await self.ensure_session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if symbol in self.news_cache:
            if symbol in self.cache_expiry and datetime.now() < self.cache_expiry[symbol]:
                logger.debug(f"üì∞ –í–æ–∑–≤—Ä–∞—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫—ç—à–∞ –¥–ª—è {symbol}")
                return self.news_cache[symbol]

        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_news = []

        # CryptoCompare
        try:
            cc_news = await self._get_cryptocompare_news(symbol, hours)
            all_news.extend(cc_news)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CryptoCompare –¥–ª—è {symbol}: {e}")

        # CryptoPanic
        try:
            cp_news = await self._get_cryptopanic_news(symbol, hours)
            all_news.extend(cp_news)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CryptoPanic –¥–ª—è {symbol}: {e}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π sentiment
        filtered_news = self._filter_and_score_news(all_news, symbol)

        # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
        self.news_cache[symbol] = filtered_news
        self.cache_expiry[symbol] = datetime.now() + timedelta(minutes=10)

        logger.info(f"üì∞ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}")
        return filtered_news

    def _filter_and_score_news(self, news_list: List[Dict], symbol: str) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ sentiment
        """
        filtered = []
        symbol_keywords = self.SYMBOL_KEYWORDS.get(symbol, [])

        for news in news_list:
            title = news.get('title', '').lower()
            body = news.get('body', '').lower()
            full_text = title + ' ' + body

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å–∏–º–≤–æ–ª–∞
            if symbol != 'ALT':
                is_relevant = any(keyword.lower() in full_text for keyword in symbol_keywords)
                if not is_relevant:
                    continue

            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π sentiment
            weighted_sentiment = self._calculate_weighted_sentiment(full_text)
            news['weighted_sentiment'] = weighted_sentiment
            news['symbol'] = symbol

            filtered.append(news)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        filtered.sort(key=lambda x: x.get('published_on', 0), reverse=True)

        return filtered

    def _calculate_weighted_sentiment(self, text: str) -> float:
        """
        –†–∞—Å—á—ë—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ sentiment –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        sentiment_score = 0.0
        text_lower = text.lower()

        for keyword, weight in self.KEYWORD_WEIGHTS.items():
            if keyword.lower() in text_lower:
                sentiment_score += weight
                logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å –≤–µ—Å–æ–º {weight}")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
        normalized = max(min(sentiment_score / 5.0, 1.0), -1.0)

        return normalized

    async def _get_cryptocompare_news(self, symbol: str, hours: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CryptoCompare"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        # (–∫–æ–¥ —Å–æ–∫—Ä–∞—â—ë–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
        return []

    async def _get_cryptopanic_news(self, symbol: str, hours: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CryptoPanic"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        return []

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
