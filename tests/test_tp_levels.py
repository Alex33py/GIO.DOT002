#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TP levels –≤ –ë–î
tests/test_tp_levels.py
"""

import asyncio
import aiosqlite
import sys
from pathlib import Path
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent.parent))


async def diagnose_and_fix_tp_levels():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TP levels"""

    root_path = Path(__file__).parent.parent
    db_path = root_path / "data" / "gio_crypto_bot.db"

    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return

    print("=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TP LEVELS –í –ë–î")
    print("=" * 80)
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {db_path.stat().st_size:,} –±–∞–π—Ç")
    print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {datetime.fromtimestamp(db_path.stat().st_mtime)}")
    print()

    try:
        async with aiosqlite.connect(db_path) as db:
            # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor = await db.execute("SELECT COUNT(*) FROM signals")
            total_signals = (await cursor.fetchone())[0]

            cursor = await db.execute(
                """
                SELECT COUNT(*) FROM signals WHERE status = 'active'
            """
            )
            active_signals = (await cursor.fetchone())[0]

            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_signals}")
            print()

            if active_signals == 0:
                print("‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç!")
                return

            # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            query = """
                SELECT id, symbol, direction, entry_price, current_price,
                       tp1, tp2, tp3, stop_loss,
                       COALESCE(roi, 0) as roi,
                       COALESCE(tp1_hit, 0) as tp1_hit,
                       COALESCE(tp2_hit, 0) as tp2_hit,
                       COALESCE(tp3_hit, 0) as tp3_hit,
                       COALESCE(sl_hit, 0) as sl_hit,
                       status
                FROM signals
                WHERE status = 'active'
                ORDER BY roi DESC
                LIMIT 10
            """

            cursor = await db.execute(query)
            signals = await cursor.fetchall()

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Ç–æ–ø–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            print()

            issues_found = 0
            fixed_count = 0
            current_price_missing = 0

            for idx, row in enumerate(signals, 1):
                (
                    sig_id,
                    symbol,
                    direction,
                    entry,
                    current_price,
                    tp1,
                    tp2,
                    tp3,
                    sl,
                    roi,
                    tp1_hit,
                    tp2_hit,
                    tp3_hit,
                    sl_hit,
                    status,
                ) = row

                print(f"{'='*80}")
                print(f"#{idx}. üìä {symbol} (ID: {sig_id})")
                print(f"{'='*80}")
                print(f"   Direction:     {direction}")
                print(f"   Entry:         ${entry:.4f}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ current_price
                if current_price is None or current_price <= 0:
                    print(f"   Current Price: ‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê (None)")
                    print(f"   Current ROI:   {roi:+.2f}%")
                    print()
                    print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: current_price –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –ë–î!")
                    print(f"      –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ Price Updater –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                    current_price_missing += 1

                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑ ROI
                    if direction.upper() == "SHORT":
                        current_price = entry * (1 - roi / 100)
                    else:
                        current_price = entry * (1 + roi / 100)

                    print(f"   üìà –†–∞—Å—á—ë—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                else:
                    print(f"   Current Price: ${current_price:.4f}")
                    print(f"   Current ROI:   {roi:+.2f}%")

                print()
                print(
                    f"   TP1:           ${tp1:.4f} (hit: {'‚úÖ' if tp1_hit else '‚ùå'})"
                )
                print(
                    f"   TP2:           ${tp2:.4f} (hit: {'‚úÖ' if tp2_hit else '‚ùå'})"
                )
                print(
                    f"   TP3:           ${tp3:.4f} (hit: {'‚úÖ' if tp3_hit else '‚ùå'})"
                )
                print(f"   SL:            ${sl:.4f} (hit: {'‚úÖ' if sl_hit else '‚ùå'})")
                print()

                # === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: TP = 0
                if tp1 <= 0 or tp2 <= 0 or tp3 <= 0:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: TP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    issues_found += 1

                    if direction.upper() == "LONG":
                        new_tp1, new_tp2, new_tp3 = (
                            entry * 1.01,
                            entry * 1.02,
                            entry * 1.03,
                        )
                        new_sl = entry * 0.98
                    else:
                        new_tp1, new_tp2, new_tp3 = (
                            entry * 0.99,
                            entry * 0.98,
                            entry * 0.97,
                        )
                        new_sl = entry * 1.02

                    await db.execute(
                        """
                        UPDATE signals
                        SET tp1 = ?, tp2 = ?, tp3 = ?, stop_loss = ?
                        WHERE id = ?
                    """,
                        (new_tp1, new_tp2, new_tp3, new_sl, sig_id),
                    )

                    print(f"   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û:")
                    print(
                        f"      TP1: ${new_tp1:.4f} | TP2: ${new_tp2:.4f} | TP3: ${new_tp3:.4f}"
                    )
                    fixed_count += 1
                    print()
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –õ–æ–≥–∏–∫–∞ TP –¥–ª—è SHORT
                if direction.upper() == "SHORT":
                    # –î–ª—è SHORT: TP –Ω–∏–∂–µ entry
                    should_tp1 = current_price <= tp1
                    should_tp2 = current_price <= tp2
                    should_tp3 = current_price <= tp3

                    print(f"   üéØ –ê–Ω–∞–ª–∏–∑ TP (SHORT):")
                    print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                    print(
                        f"      TP1 @ ${tp1:.4f}: {'‚úÖ –î–ê' if should_tp1 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â§' if should_tp1 else '>'} TP1)"
                    )
                    print(
                        f"      TP2 @ ${tp2:.4f}: {'‚úÖ –î–ê' if should_tp2 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â§' if should_tp2 else '>'} TP2)"
                    )
                    print(
                        f"      TP3 @ ${tp3:.4f}: {'‚úÖ –î–ê' if should_tp3 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â§' if should_tp3 else '>'} TP3)"
                    )
                    print()

                    if should_tp1 and not tp1_hit:
                        print(f"   ‚ö†Ô∏è TP1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        print(f"      ${current_price:.4f} <= ${tp1:.4f} = TRUE")
                        issues_found += 1

                    if should_tp2 and not tp2_hit:
                        print(f"   ‚ö†Ô∏è TP2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        issues_found += 1

                    if should_tp3 and not tp3_hit:
                        print(f"   ‚ö†Ô∏è TP3 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        issues_found += 1

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –õ–æ–≥–∏–∫–∞ TP –¥–ª—è LONG
                elif direction.upper() == "LONG":
                    # –î–ª—è LONG: TP –≤—ã—à–µ entry
                    should_tp1 = current_price >= tp1
                    should_tp2 = current_price >= tp2
                    should_tp3 = current_price >= tp3

                    print(f"   üéØ –ê–Ω–∞–ª–∏–∑ TP (LONG):")
                    print(f"      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                    print(
                        f"      TP1 @ ${tp1:.4f}: {'‚úÖ –î–ê' if should_tp1 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â•' if should_tp1 else '<'} TP1)"
                    )
                    print(
                        f"      TP2 @ ${tp2:.4f}: {'‚úÖ –î–ê' if should_tp2 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â•' if should_tp2 else '<'} TP2)"
                    )
                    print(
                        f"      TP3 @ ${tp3:.4f}: {'‚úÖ –î–ê' if should_tp3 else '‚ùå –ù–ï–¢'} (—Ü–µ–Ω–∞ {'‚â•' if should_tp3 else '<'} TP3)"
                    )
                    print()

                    if should_tp1 and not tp1_hit:
                        print(f"   ‚ö†Ô∏è TP1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        issues_found += 1

                    if should_tp2 and not tp2_hit:
                        print(f"   ‚ö†Ô∏è TP2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        issues_found += 1

                    if should_tp3 and not tp3_hit:
                        print(f"   ‚ö†Ô∏è TP3 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
                        issues_found += 1

                print()

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()

            print("=" * 80)
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
            print("=" * 80)
            print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:    {issues_found}")
            print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:         {fixed_count}")
            print(f"   ‚ùå current_price = None: {current_price_missing}")
            print("=" * 80)

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if current_price_missing > 0 or issues_found > fixed_count:
                print()
                print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
                print("=" * 80)
                print()
                print(
                    f"‚ùå –£ {current_price_missing} –∏–∑ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ current_price = None"
                )
                print()
                print("üí° –≠–¢–û –û–ó–ù–ê–ß–ê–ï–¢:")
                print("   ‚Ä¢ Price Updater –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –∏–ª–∏ –ù–ï –ó–ê–ü–£–©–ï–ù")
                print("   ‚Ä¢ ROI Tracker –ù–ï –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å TP, —Ç.–∫. –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
                print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ö–æ–ª–æ—Å—Ç—É—é")
                print()
                print("üîß –†–ï–®–ï–ù–ò–ï:")
                print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞:")
                print("      –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: 'üîÑ Price updater started'")
                print("      –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: 'üí∞ Prices updated for X/Y symbols'")
                print()
                print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ ROI Tracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
                print("      –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: '‚úÖ ROI Tracker started with price caching'")
                print()
                print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
                print()
                print("=" * 80)

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()


def main():
    print()
    print("üîß GIO Crypto Bot v3.0 - TP Levels Diagnostic Tool")
    print()

    try:
        asyncio.run(diagnose_and_fix_tp_levels())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
