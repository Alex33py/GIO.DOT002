# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≠—Ç–∞–ø–∞ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Ñ–∞–π–ª–æ–≤
"""

import json
import os
from pathlib import Path


def test_json_syntax():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON"""
    print("\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON —Ñ–∞–π–ª–æ–≤")
    print("=" * 70)

    files = {
        "scenarios": "data/scenarios/gio_scenarios_v2.json",
        "strategies": "data/strategies/strategy_extensions_v1.1.json"
    }

    results = {}

    for name, path in files.items():
        try:
            if not os.path.exists(path):
                print(f"‚ùå {name}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {path}")
                results[name] = False
                continue

            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            print(f"‚úÖ {name}: –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∞–ª–∏–¥–µ–Ω")
            print(f"   üìÑ –†–∞–∑–º–µ—Ä: {os.path.getsize(path)} –±–∞–π—Ç")
            print(f"   üìä –ö–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {len(data.keys())}")
            results[name] = True

        except json.JSONDecodeError as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ - {e}")
            results[name] = False
        except Exception as e:
            print(f"‚ùå {name}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results[name] = False

    return all(results.values())


def test_scenarios_structure():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã scenarios")
    print("=" * 70)

    try:
        with open("data/scenarios/gio_scenarios_v2.json", 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        assert "version" in data, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç version"
        assert "scenarios" in data, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ scenarios"
        print(f"‚úÖ –í–µ—Ä—Å–∏—è: {data['version']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = data["scenarios"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")

        required_fields = [
            "id", "name", "strategy", "side", "mtf",
            "volume_profile", "metrics", "clusters",
            "triggers", "tactic", "risk_profile"
        ]

        errors = []
        for i, scenario in enumerate(scenarios):
            scenario_id = scenario.get("id", f"UNKNOWN_{i}")

            for field in required_fields:
                if field not in scenario:
                    errors.append(f"‚ùå {scenario_id}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")

        if errors:
            print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
            for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   {error}")
            if len(errors) > 10:
                print(f"   ... –∏ –µ—â—ë {len(errors) - 10} –æ—à–∏–±–æ–∫")
            return False

        print("‚úÖ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        strategies = {}
        for scenario in scenarios:
            strat = scenario.get("strategy", "unknown")
            strategies[strat] = strategies.get(strat, 0) + 1

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:")
        for strat, count in strategies.items():
            print(f"   ‚Ä¢ {strat}: {count} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_strategies_structure():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã strategies"""
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã strategies")
    print("=" * 70)

    try:
        with open("data/strategies/strategy_extensions_v1.1.json", 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = [
            "strategy_selector",
            "market_regime_detection",
            "global_rules",
            "condition_validator",
            "strategy_metadata"
        ]

        for section in required_sections:
            if section not in data:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è: {section}")
                return False
            print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ market_regime_detection
        regimes = data["market_regime_detection"]["regimes"]
        print(f"\nüìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤: {len(regimes)}")
        for regime, info in regimes.items():
            print(f"   ‚Ä¢ {regime}: {info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ strategy_selector
        selector = data["strategy_selector"]["market_regime"]
        print(f"\nüìä –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        for regime, strategies in selector.items():
            print(f"   ‚Ä¢ {regime} ‚Üí {', '.join(strategies)}")

        print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ strategies –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_cross_references():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
    print("=" * 70)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
        with open("data/scenarios/gio_scenarios_v2.json", 'r', encoding='utf-8') as f:
            scenarios_data = json.load(f)

        with open("data/strategies/strategy_extensions_v1.1.json", 'r', encoding='utf-8') as f:
            strategies_data = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ scenarios
        used_strategies = set()
        for scenario in scenarios_data["scenarios"]:
            used_strategies.add(scenario["strategy"])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ strategy_metadata
        defined_strategies = set(strategies_data["strategy_metadata"].keys())

        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ scenarios: {sorted(used_strategies)}")
        print(f"üìä –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ metadata: {sorted(defined_strategies)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        missing = used_strategies - defined_strategies
        if missing:
            print(f"\n‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {missing}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        unused = defined_strategies - used_strategies
        if unused:
            print(f"\n‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: {unused}")

        print("\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 1: JSON –§–ê–ô–õ–´")
    print("=" * 70)

    tests = [
        ("JSON –°–∏–Ω—Ç–∞–∫—Å–∏—Å", test_json_syntax),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Scenarios", test_scenarios_structure),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Strategies", test_strategies_structure),
        ("–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏", test_cross_references)
    ]

    results = {}
    for name, test_func in tests:
        try:
            results[name] = test_func()
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
            results[name] = False

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    passed = sum(1 for v in results.values() if v)
    total = len(results)

    for name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} - {name}")

    print("\n" + "=" * 70)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 2")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")

    print("=" * 70 + "\n")

    return passed == total


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
