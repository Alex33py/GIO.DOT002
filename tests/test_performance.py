#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
–ö–†–ò–¢–ï–†–ò–ô 3.1 - Performance Tests
"""

import asyncio
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from connectors.bybit_connector import EnhancedBybitConnector
from utils.rate_limiter import get_rate_limiter
from utils.cache_manager import get_cache_manager
from config.settings import logger


class PerformanceTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""

    def __init__(self):
        self.connector = None
        self.cache = get_cache_manager()
        self.rate_limiter = get_rate_limiter()

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.connector = EnhancedBybitConnector()

        # –°–æ–∑–¥–∞—ë–º HTTP —Å–µ—Å—Å–∏—é
        if not self.connector.session:
            import aiohttp
            self.connector.session = aiohttp.ClientSession()

        logger.info("‚úÖ –¢–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


    async def test_ticker_cache(self, symbol: str = "BTCUSDT", runs: int = 10):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ticker"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 1: TICKER CACHING")
        print("="*60)

        # –û—á–∏—Å—Ç–∏–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        await self.cache.clear(namespace="ticker")

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
        start = time.time()
        ticker1 = await self.connector._get_ticker(symbol)
        time1 = (time.time() - start) * 1000

        await asyncio.sleep(0.1)

        # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–∏–∑ –∫—ç—à–∞)
        cache_times = []
        for i in range(runs):
            start = time.time()
            ticker = await self.connector._get_ticker(symbol)
            cache_time = (time.time() - start) * 1000
            cache_times.append(cache_time)
            await asyncio.sleep(0.01)

        avg_cache_time = sum(cache_times) / len(cache_times)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}:")
        print(f"‚îú‚îÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ë–ï–ó –∫—ç—à–∞): {time1:.2f}ms")
        print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å (–° –∫—ç—à–µ–º):  {avg_cache_time:.2f}ms")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        if avg_cache_time > 0.01:
            speedup = time1 / avg_cache_time
            print(f"‚îî‚îÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        else:
            speedup = 1000.0  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ >1000x –±—ã—Å—Ç—Ä–µ–µ
            print(f"‚îî‚îÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: >1000x (–∫—ç—à –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π!)")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        stats = self.cache.get_stats()
        print(f"\nüíæ Cache Stats:")
        print(f"‚îú‚îÄ Hit Rate:  {stats['hit_rate']:.1f}%")
        print(f"‚îú‚îÄ Hits:      {stats['hits']}")
        print(f"‚îú‚îÄ Misses:    {stats['misses']}")
        print(f"‚îî‚îÄ Cache Size: {stats['cache_size']}")

        return speedup


    async def test_orderbook_optimization(self, symbol: str = "BTCUSDT"):
        """
        –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ orderbook (50 vs 200 —É—Ä–æ–≤–Ω–µ–π)

        Args:
            symbol: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 2: ORDERBOOK OPTIMIZATION")
        print("="*60)

        # –û—á–∏—Å—Ç–∏–º –∫—ç—à
        await self.cache.clear(namespace="orderbook")

        # –¢–µ—Å—Ç —Å 200 —É—Ä–æ–≤–Ω—è–º–∏
        start = time.time()
        ob_200 = await self.connector._get_orderbook(symbol, limit=200)
        time_200 = (time.time() - start) * 1000

        await asyncio.sleep(0.5)
        await self.cache.clear(namespace="orderbook")

        # –¢–µ—Å—Ç —Å 50 —É—Ä–æ–≤–Ω—è–º–∏
        start = time.time()
        ob_50 = await self.connector._get_orderbook(symbol, limit=50)
        time_50 = (time.time() - start) * 1000

        # –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        import json
        size_200 = len(json.dumps(ob_200)) if ob_200 else 0
        size_50 = len(json.dumps(ob_50)) if ob_50 else 0

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}:")
        print(f"‚îú‚îÄ 200 —É—Ä–æ–≤–Ω–µ–π: {time_200:.2f}ms ({size_200/1024:.1f}KB)")
        print(f"‚îú‚îÄ 50 —É—Ä–æ–≤–Ω–µ–π:  {time_50:.2f}ms ({size_50/1024:.1f}KB)")
        print(f"‚îî‚îÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time_200/time_50:.1f}x")
        print(f"‚îî‚îÄ –≠–∫–æ–Ω–æ–º–∏—è –¥–∞–Ω–Ω—ã—Ö: {(1 - size_50/size_200)*100:.1f}%")

        return time_200 / time_50

    async def test_rate_limiting(self, symbol: str = "BTCUSDT", requests: int = 20):
        """
        –¢–µ—Å—Ç Rate Limiting

        Args:
            symbol: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            requests: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 3: RATE LIMITING")
        print("="*60)

        # –û—á–∏—Å—Ç–∏–º –∫—ç—à —á—Ç–æ–±—ã –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
        await self.cache.clear()

        start_time = time.time()
        errors = 0
        success = 0

        for i in range(requests):
            try:
                ticker = await self.connector._get_ticker(symbol)
                if ticker:
                    success += 1
                else:
                    errors += 1
            except Exception as e:
                errors += 1
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {e}")

        total_time = time.time() - start_time

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limiter
        rl_stats = self.rate_limiter.get_all_stats()

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {requests} –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print(f"‚îú‚îÄ –£—Å–ø–µ—à–Ω–æ:    {success}")
        print(f"‚îú‚îÄ –û—à–∏–±–∫–∏:     {errors}")
        print(f"‚îú‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
        print(f"‚îî‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/requests*1000:.2f}ms/–∑–∞–ø—Ä–æ—Å")

        print(f"\n‚ö° Rate Limiter Stats:")
        for endpoint, stats in rl_stats.items():
            print(f"\n{endpoint}:")
            print(f"‚îú‚îÄ Requests/sec: {stats['requests_last_second']}/{stats['limit_per_second']}")
            print(f"‚îî‚îÄ Utilization:  {stats['utilization']:.1f}%")

        return errors == 0

    async def test_batch_klines(self, symbol: str = "BTCUSDT"):
        """
        –¢–µ—Å—Ç –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è klines

        Args:
            symbol: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ 4: BATCH KLINES")
        print("="*60)

        timeframes = ['60', '240', 'D']

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        start = time.time()
        for tf in timeframes:
            await self.connector.get_klines(symbol, tf, limit=50)
        sequential_time = time.time() - start

        await asyncio.sleep(1)

        # –ë–∞—Ç—á–∏–Ω–≥ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
        start = time.time()
        batch_result = await self.connector.get_klines_batch(
            symbol,
            timeframes,
            limits=[50, 50, 50]
        )
        batch_time = time.time() - start

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}:")
        print(f"‚îú‚îÄ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {sequential_time:.2f}s")
        print(f"‚îú‚îÄ –ë–∞—Ç—á–∏–Ω–≥:         {batch_time:.2f}s")
        print(f"‚îî‚îÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ:       {sequential_time/batch_time:.1f}x")

        return sequential_time / batch_time

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("\n" + "üöÄ"*30)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô - –ö–†–ò–¢–ï–†–ò–ô 3.1")
        print("üöÄ"*30)

        try:
            await self.setup()

            # –¢–µ—Å—Ç 1: Cache
            speedup_cache = await self.test_ticker_cache()

            # –¢–µ—Å—Ç 2: Orderbook
            speedup_orderbook = await self.test_orderbook_optimization()

            # –¢–µ—Å—Ç 3: Rate Limiting
            no_errors = await self.test_rate_limiting()

            # –¢–µ—Å—Ç 4: Batch
            speedup_batch = await self.test_batch_klines()

            # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "="*60)
            print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            print("="*60)
            print(f"\n‚úÖ Ticker Cache:     {speedup_cache:.1f}x –±—ã—Å—Ç—Ä–µ–µ")
            print(f"‚úÖ Orderbook Opt:    {speedup_orderbook:.1f}x –±—ã—Å—Ç—Ä–µ–µ")
            print(f"‚úÖ Rate Limiting:    {'–ë–µ–∑ –æ—à–∏–±–æ–∫' if no_errors else '–ï—Å—Ç—å –æ—à–∏–±–∫–∏'}")
            print(f"‚úÖ Batch Klines:     {speedup_batch:.1f}x –±—ã—Å—Ç—Ä–µ–µ")

            total_speedup = (speedup_cache + speedup_orderbook + speedup_batch) / 3
            print(f"\nüéØ –û–ë–©–ï–ï –£–°–ö–û–†–ï–ù–ò–ï: ~{total_speedup:.1f}x")

            print("\n" + "="*60)
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
            print("="*60 + "\n")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

        finally:
            if self.connector:
                await self.connector.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PerformanceTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())
