#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç Multi-Timeframe Filter –¥–ª—è GIO Crypto Bot v3.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
"""

import asyncio
import sys
import os
from typing import Dict, List
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from filters.multi_tf_filter import MultiTimeframeFilter
from config.settings import logger


class MockMTFAnalyzer:
    """Mock –∫–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ MTFAnalyzer"""

    def __init__(self):
        self.klines_cache = {}

    async def get_klines(self, symbol: str, timeframe: str, limit: int = 200) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –¥–∞–Ω–Ω—ã–µ klines"""
        cache_key = f"{symbol}_{timeframe}"

        if cache_key in self.klines_cache:
            return self.klines_cache[cache_key]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        klines = self._generate_mock_klines(symbol, timeframe, limit)
        self.klines_cache[cache_key] = klines
        return klines

    def _generate_mock_klines(self, symbol: str, timeframe: str, count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç mock klines —Å —Ç—Ä–µ–Ω–¥–æ–º"""
        klines = []

        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        if 'BTC' in symbol:
            base_price = 62000
            volatility = 500
        elif 'ETH' in symbol:
            base_price = 3000
            volatility = 50
        else:
            base_price = 100
            volatility = 5

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if timeframe == '1h':
            trend = 1.002  # UP trend
        elif timeframe == '4h':
            trend = 1.003  # Stronger UP trend
        elif timeframe == '1d':
            trend = 0.998  # DOWN trend (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)
        else:
            trend = 1.0

        current_price = base_price

        for i in range(count):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            noise = np.random.uniform(-volatility, volatility)
            current_price = current_price * trend + noise

            open_price = current_price
            high_price = current_price + abs(np.random.uniform(0, volatility))
            low_price = current_price - abs(np.random.uniform(0, volatility))
            close_price = current_price + np.random.uniform(-volatility/2, volatility/2)

            klines.append({
                'timestamp': 1728000000000 + i * 60000,
                'open': str(open_price),
                'high': str(high_price),
                'low': str(low_price),
                'close': str(close_price),
                'volume': str(np.random.uniform(100, 1000))
            })

        return klines


class MockBot:
    """Mock –∫–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ GIOCryptoBot"""

    def __init__(self):
        self.mtf_analyzer = MockMTFAnalyzer()
        logger.info("‚úÖ MockBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å MockMTFAnalyzer")


def print_separator(text: str = ""):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    if text:
        print(f"\n{'=' * 70}")
        print(f"{text.center(70)}")
        print(f"{'=' * 70}")
    else:
        print(f"{'=' * 70}")


async def test_1_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multi-Timeframe Filter"""
    print_separator("–¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTF Filter")

    try:
        bot = MockBot()

        mtf_filter = MultiTimeframeFilter(
            bot=bot,
            require_all_aligned=False,
            min_aligned_count=2,
            higher_tf_weight=2.0
        )

        assert mtf_filter is not None, "MTF Filter –Ω–µ —Å–æ–∑–¥–∞–Ω!"
        assert mtf_filter.bot is not None, "Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ MTF Filter!"
        assert mtf_filter.min_aligned_count == 2, "min_aligned_count –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!"
        assert hasattr(mtf_filter, 'validate'), "–ú–µ—Ç–æ–¥ validate() –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"

        print("‚úÖ MTF Filter —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   - require_all_aligned: {mtf_filter.require_all_aligned}")
        print(f"   - min_aligned_count: {mtf_filter.min_aligned_count}")
        print(f"   - tf_weights: {mtf_filter.tf_weights}")
        print("\n‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù!\n")
        return mtf_filter, bot

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return None, None


async def test_2_validate_method_signature(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–∞ validate()"""
    print_separator("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ validate()")

    try:
        import inspect

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
        assert hasattr(mtf_filter, 'validate'), "–ú–µ—Ç–æ–¥ validate() –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
        sig = inspect.signature(mtf_filter.validate)
        params = list(sig.parameters.keys())

        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞ validate(): {params}")

        assert 'symbol' in params, "–ü–∞—Ä–∞–º–µ—Ç—Ä 'symbol' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
        assert 'direction' in params, "–ü–∞—Ä–∞–º–µ—Ç—Ä 'direction' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
        assert inspect.iscoroutinefunction(mtf_filter.validate), "validate() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å async!"

        print("‚úÖ –ú–µ—Ç–æ–¥ validate() –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É")
        print("‚úÖ –ú–µ—Ç–æ–¥ validate() —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º")
        print("\n‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_3_validate_long_signal(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è LONG —Å–∏–≥–Ω–∞–ª–∞"""
    print_separator("–¢–ï–°–¢ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è LONG —Å–∏–≥–Ω–∞–ª–∞")

    try:
        symbol = 'BTCUSDT'
        direction = 'LONG'

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {symbol} {direction}")

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ validate
        is_valid, trends, reason = await mtf_filter.validate(
            symbol=symbol,
            direction=direction,
            timeframes=['1h', '4h', '1d'],
            min_agreement=2
        )

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
        print(f"   - –¢—Ä–µ–Ω–¥—ã: {trends}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert isinstance(is_valid, bool), "is_valid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool!"
        assert isinstance(trends, dict), "trends –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict!"
        assert isinstance(reason, str), "reason –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å str!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö TF
        assert '1h' in trends, "–¢—Ä–µ–Ω–¥ –¥–ª—è 1h –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
        assert '4h' in trends, "–¢—Ä–µ–Ω–¥ –¥–ª—è 4h –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"

        print("\n‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_4_validate_short_signal(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è SHORT —Å–∏–≥–Ω–∞–ª–∞"""
    print_separator("–¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è SHORT —Å–∏–≥–Ω–∞–ª–∞")

    try:
        symbol = 'ETHUSDT'
        direction = 'SHORT'

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {symbol} {direction}")

        is_valid, trends, reason = await mtf_filter.validate(
            symbol=symbol,
            direction=direction,
            timeframes=['1h', '4h'],
            min_agreement=1
        )

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
        print(f"   - –¢—Ä–µ–Ω–¥—ã: {trends}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        assert isinstance(is_valid, bool), "is_valid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool!"
        assert isinstance(trends, dict), "trends –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict!"

        print("\n‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_5_conflicting_trends(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
    print_separator("–¢–ï–°–¢ 5: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ç—Ä–µ–Ω–¥—ã")

    try:
        symbol = 'BTCUSDT'
        direction = 'LONG'

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏: {symbol} {direction}")
        print("   (1h UP, 4h UP, 1d DOWN - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ —Å min_agreement=2)")

        is_valid, trends, reason = await mtf_filter.validate(
            symbol=symbol,
            direction=direction,
            timeframes=['1h', '4h', '1d'],
            min_agreement=2  # –¢—Ä–µ–±—É–µ–º —Ç–æ–ª—å–∫–æ 2 –∏–∑ 3
        )

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
        print(f"   - –¢—Ä–µ–Ω–¥—ã: {trends}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º UP —Ç—Ä–µ–Ω–¥—ã
        up_count = sum(1 for t in trends.values() if t == 'UP')
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ UP —Ç—Ä–µ–Ω–¥–æ–≤: {up_count}/3")

        assert isinstance(is_valid, bool), "is_valid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool!"

        # –ï—Å–ª–∏ 2 –∏–ª–∏ –±–æ–ª—å—à–µ UP, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ
        if up_count >= 2:
            assert is_valid == True, f"–°–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–∏ {up_count} UP —Ç—Ä–µ–Ω–¥–∞—Ö!"
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {up_count} UP —Ç—Ä–µ–Ω–¥–∞ >= 2 (min_agreement)")

        print("\n‚úÖ –¢–ï–°–¢ 5 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 5 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_6_trend_strength(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 6: –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
    print_separator("–¢–ï–°–¢ 6: –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º MTF –¥–∞–Ω–Ω—ã–µ
        symbol = 'BTCUSDT'
        mtf_data = await mtf_filter._get_mtf_data(symbol, ['1h', '4h', '1d'])

        print(f"üìä MTF –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}:")
        for tf, data in mtf_data.items():
            trend = data.get('trend', 'NEUTRAL')
            strength = data.get('strength', 0.0)
            print(f"   - {tf}: {trend} (strength: {strength:.2f})")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        overall_strength = mtf_filter.get_trend_strength(mtf_data)

        print(f"\nüí™ –û–±—â–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {overall_strength:.2f}")

        assert isinstance(overall_strength, float), "–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å float!"
        assert 0.0 <= overall_strength <= 1.0, "–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]!"

        print("\n‚úÖ –¢–ï–°–¢ 6 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 6 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_7_cache_functionality(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_separator("–¢–ï–°–¢ 7: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")

    try:
        symbol = 'BTCUSDT'

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        print("üîÑ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)...")
        is_valid1, trends1, reason1 = await mtf_filter.validate(
            symbol=symbol,
            direction='LONG'
        )

        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        print("üì¶ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º)...")
        is_valid2, trends2, reason2 = await mtf_filter.validate(
            symbol=symbol,
            direction='LONG'
        )

        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   - –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {trends1}")
        print(f"   - –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {trends2}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        assert trends1 == trends2, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫—ç—à–µ–º –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç
        assert symbol in mtf_filter.mtf_cache, "–ö—ç—à –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω!"
        print(f"   ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: {symbol} –≤ –∫—ç—à–µ")

        # –û—á–∏—â–∞–µ–º –∫—ç—à
        mtf_filter.clear_cache(symbol)
        assert symbol not in mtf_filter.mtf_cache, "–ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω!"
        print(f"   ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è {symbol}")

        print("\n‚úÖ –¢–ï–°–¢ 7 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 7 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_8_get_trend_summary(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º"""
    print_separator("–¢–ï–°–¢ 8: –°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º")

    try:
        symbol = 'BTCUSDT'

        summary = await mtf_filter.get_trend_summary(symbol)

        print(f"üìã –°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º –¥–ª—è {symbol}:")
        print(f"   - Symbol: {summary.get('symbol')}")
        print(f"   - Trends: {summary.get('trends')}")
        print(f"   - Dominant Trend: {summary.get('dominant_trend')}")
        print(f"   - Agreement Score: {summary.get('agreement_score', 0):.2f}")
        print(f"   - Overall Strength: {summary.get('overall_strength', 0):.2f}")

        assert 'symbol' in summary, "symbol –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–¥–∫–µ!"
        assert 'trends' in summary, "trends –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–≤–æ–¥–∫–µ!"
        assert 'dominant_trend' in summary, "dominant_trend –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–æ–¥–∫–µ!"

        print("\n‚úÖ –¢–ï–°–¢ 8 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 8 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_9_invalid_direction(mtf_filter: MultiTimeframeFilter):
    """–¢–µ—Å—Ç 9: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
    print_separator("–¢–ï–°–¢ 9: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    try:
        symbol = 'BTCUSDT'
        direction = 'INVALID'  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: {direction}")

        is_valid, trends, reason = await mtf_filter.validate(
            symbol=symbol,
            direction=direction
        )

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {is_valid}")
        print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
        assert is_valid == False, "–°–∏–≥–Ω–∞–ª —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω!"
        assert '–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in reason or 'Invalid' in reason, "–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É!"

        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

        print("\n‚úÖ –¢–ï–°–¢ 9 –ü–†–û–ô–î–ï–ù!\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 9 –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback
        traceback.print_exc()
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print_separator("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MULTI-TIMEFRAME FILTER")

    results = []

    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mtf_filter, bot = await test_1_initialization()
    if mtf_filter is None:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: MTF Filter –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    results.append(mtf_filter is not None)

    # –¢–µ—Å—Ç 2: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞ validate()
    result = await test_2_validate_method_signature(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 3: LONG —Å–∏–≥–Ω–∞–ª
    result = await test_3_validate_long_signal(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 4: SHORT —Å–∏–≥–Ω–∞–ª
    result = await test_4_validate_short_signal(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 5: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
    result = await test_5_conflicting_trends(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 6: –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    result = await test_6_trend_strength(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 7: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    result = await test_7_cache_functionality(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 8: –°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
    result = await test_8_get_trend_summary(mtf_filter)
    results.append(result)

    # –¢–µ—Å—Ç 9: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    result = await test_9_invalid_direction(mtf_filter)
    results.append(result)

    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_separator("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")

    passed = sum(results)
    total = len(results)

    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}/{total}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%\n")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Multi-Timeframe Filter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

    print_separator()


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())
