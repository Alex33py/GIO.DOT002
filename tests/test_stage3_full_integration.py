# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EnhancedScenarioMatcher –≤ –±–æ—Ç–∞
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from systems.unified_scenario_matcher import EnhancedScenarioMatcher
from trading.signal_recorder import SignalRecorder
from notifications.enhanced_telegram_formatter import EnhancedTelegramFormatter


def test_full_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: Matcher ‚Üí Recorder ‚Üí Telegram"""

    print("\n" + "=" * 70)
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: End-to-End")
    print("=" * 70 + "\n")

    # ========== –®–ê–ì 1: EnhancedScenarioMatcher ==========
    print("üîç –®–ê–ì 1: EnhancedScenarioMatcher")
    print("-" * 70)

    try:
        matcher = EnhancedScenarioMatcher()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è momentum long
        market_data = {
            "symbol": "BTCUSDT",
            "close": 60000,
            "volume": 2000,
            "candles": [{"close": 60000} for _ in range(100)]
        }

        indicators = {
            "adx": 35,
            "rsi": 65,
            "macd": 100,
            "macd_signal": 80,
            "macd_above_signal": True,
            "volume_ma20": 1000,
            "atr": 1200,
            "bb_width_percentile": 55,
            "atr_percentile": 60,
            "bullish_continuation_candle": True
        }

        mtf_trends = {
            "1H": "bullish",
            "4H": "bullish",
            "1D": "bullish"
        }

        volume_profile = {
            "poc": 59500,
            "vah": 60500,
            "val": 59000,
            "vwap": 59800
        }

        news_sentiment = {
            "overall": "bullish",
            "overall_score": 0.2
        }

        veto_checks = {}

        signal = matcher.match_scenario(
            symbol="BTCUSDT",
            market_data=market_data,
            indicators=indicators,
            mtf_trends=mtf_trends,
            volume_profile=volume_profile,
            news_sentiment=news_sentiment,
            veto_checks=veto_checks
        )

        if not signal:
            print("‚ùå EnhancedScenarioMatcher –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–∏–≥–Ω–∞–ª!")
            return False

        signal["symbol"] = "BTCUSDT"

        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–π–¥–µ–Ω: {signal['scenario_id']}")
        print(f"   Strategy: {signal['strategy']}")
        print(f"   Market Regime: {signal['market_regime']}")
        print(f"   Confidence: {signal['confidence']}")
        print(f"   Entry: ${signal['entry_price']:.2f}")
        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ EnhancedScenarioMatcher: {e}")
        import traceback
        traceback.print_exc()
        return False

    # ========== –®–ê–ì 2: SignalRecorder ==========
    print("üîç –®–ê–ì 2: SignalRecorder")
    print("-" * 70)

    try:
        recorder = SignalRecorder()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ R/R
        quality_score = 85.0
        rr_ratio = 2.5

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        signal_id = recorder.record_signal(
            symbol=signal["symbol"],
            direction=signal["direction"],
            entry_price=signal["entry_price"],
            stop_loss=signal["stop_loss"],
            tp1=signal["tp1"],
            tp2=signal["tp2"],
            tp3=signal["tp3"],
            scenario_id=signal["scenario_id"],
            status="active",
            quality_score=quality_score,
            risk_reward=rr_ratio,
            strategy=signal["strategy"],
            market_regime=signal["market_regime"],
            confidence=signal["confidence"],
            phase=signal["phase"],
            risk_profile=signal["risk_profile"],
            tactic_name=signal["tactic_name"],
            validation_score=0.85,
            trigger_score=1.0,
        )

        if signal_id == 0:
            print("‚ùå SignalRecorder –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å–∏–≥–Ω–∞–ª!")
            return False

        print(f"‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î —Å ID: #{signal_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        saved_signal = recorder.get_signal_by_id(signal_id)

        if not saved_signal:
            print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            return False

        print(f"   Strategy (–ë–î): {saved_signal.get('strategy', 'N/A')}")
        print(f"   Market Regime (–ë–î): {saved_signal.get('market_regime', 'N/A')}")
        print(f"   Confidence (–ë–î): {saved_signal.get('confidence', 'N/A')}")
        print()

        # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ signal –¥–ª—è Telegram
        signal["id"] = signal_id
        signal["quality_score"] = quality_score
        signal["risk_reward"] = rr_ratio

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SignalRecorder: {e}")
        import traceback
        traceback.print_exc()
        return False

    # ========== –®–ê–ì 3: EnhancedTelegramFormatter ==========
    print("üîç –®–ê–ì 3: EnhancedTelegramFormatter")
    print("-" * 70)

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        telegram_message = EnhancedTelegramFormatter.format_new_signal(signal)

        print("‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ:")
        print()
        print(telegram_message)
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è
        required_keywords = [
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è:", "–†–µ–∂–∏–º —Ä—ã–Ω–∫–∞:", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:",
            "–§–∞–∑–∞:", "–†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å:", "EnhancedScenarioMatcher"
        ]

        missing_keywords = []
        for keyword in required_keywords:
            if keyword not in telegram_message:
                missing_keywords.append(keyword)

        if missing_keywords:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {missing_keywords}")
            return False

        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ EnhancedTelegramFormatter: {e}")
        import traceback
        traceback.print_exc()
        return False

    # ========== –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ==========
    print("=" * 70)
    print("üìä –ò–¢–û–ì–ò END-TO-END –¢–ï–°–¢–ê")
    print("=" * 70)
    print("‚úÖ EnhancedScenarioMatcher: OK")
    print("‚úÖ SignalRecorder: OK")
    print("‚úÖ EnhancedTelegramFormatter: OK")
    print()
    print("üéâ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
    print("=" * 70 + "\n")

    return True


if __name__ == "__main__":
    success = test_full_integration()
    exit(0 if success else 1)
