# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarketRegimeDetector
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from systems.market_regime_detector import MarketRegimeDetector


def test_regime_trending():
    """–¢–µ—Å—Ç: –î–µ—Ç–µ–∫—Ü–∏—è trending —Ä–µ–∂–∏–º–∞"""
    print("\nüîç –¢–ï–°–¢: Trending Regime")
    print("=" * 70)

    detector = MarketRegimeDetector()

    market_data = {
        "adx": 35,
        "volume": 2000,
        "volume_ma20": 1000,
        "bb_width_percentile": 50,
        "atr_percentile": 60
    }

    regime = detector.detect(market_data)
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ADX=35, Volume Ratio=2.0")
    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–µ–∂–∏–º: {regime}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {detector.get_regime_description(regime)}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {detector.get_recommended_strategies(regime)}")

    assert regime == "trending", f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'trending', –ø–æ–ª—É—á–µ–Ω–æ '{regime}'"
    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")


def test_regime_ranging():
    """–¢–µ—Å—Ç: –î–µ—Ç–µ–∫—Ü–∏—è ranging —Ä–µ–∂–∏–º–∞"""
    print("\nüîç –¢–ï–°–¢: Ranging Regime")
    print("=" * 70)

    detector = MarketRegimeDetector()

    market_data = {
        "adx": 15,
        "volume": 700,
        "volume_ma20": 1000,
        "bb_width_percentile": 35,
        "atr_percentile": 30
    }

    regime = detector.detect(market_data)
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ADX=15, Volume Ratio=0.7, BB Width=35%")
    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–µ–∂–∏–º: {regime}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {detector.get_regime_description(regime)}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {detector.get_recommended_strategies(regime)}")

    assert regime == "ranging", f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'ranging', –ø–æ–ª—É—á–µ–Ω–æ '{regime}'"
    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")


def test_regime_squeezing():
    """–¢–µ—Å—Ç: –î–µ—Ç–µ–∫—Ü–∏—è squeezing —Ä–µ–∂–∏–º–∞"""
    print("\nüîç –¢–ï–°–¢: Squeezing Regime")
    print("=" * 70)

    detector = MarketRegimeDetector()

    market_data = {
        "adx": 18,
        "volume": 600,
        "volume_ma20": 1000,
        "bb_width_percentile": 25,
        "atr_percentile": 20
    }

    regime = detector.detect(market_data)
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ADX=18, Volume Ratio=0.6, BB Width=25%")
    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–µ–∂–∏–º: {regime}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {detector.get_regime_description(regime)}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {detector.get_recommended_strategies(regime)}")

    assert regime == "squeezing", f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'squeezing', –ø–æ–ª—É—á–µ–Ω–æ '{regime}'"
    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")


def test_regime_expanding():
    """–¢–µ—Å—Ç: –î–µ—Ç–µ–∫—Ü–∏—è expanding —Ä–µ–∂–∏–º–∞"""
    print("\nüîç –¢–ï–°–¢: Expanding Regime")
    print("=" * 70)

    detector = MarketRegimeDetector()

    market_data = {
        "adx": 28,
        "volume": 2000,
        "volume_ma20": 1000,
        "bb_width_percentile": 70,
        "atr_percentile": 75
    }

    regime = detector.detect(market_data)
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ADX=28, Volume Ratio=2.0, BB Width=70%")
    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–µ–∂–∏–º: {regime}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {detector.get_regime_description(regime)}")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {detector.get_recommended_strategies(regime)}")

    assert regime == "expanding", f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'expanding', –ø–æ–ª—É—á–µ–Ω–æ '{regime}'"
    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")


def test_all_regimes():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MarketRegimeDetector")
    print("=" * 70)

    tests = [
        ("Trending Regime", test_regime_trending),
        ("Ranging Regime", test_regime_ranging),
        ("Squeezing Regime", test_regime_squeezing),
        ("Expanding Regime", test_regime_expanding)
    ]

    passed = 0
    failed = 0

    for name, test_func in tests:
        try:
            test_func()
            passed += 1
        except AssertionError as e:
            print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {name}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {e}\n")
            failed += 1
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {name}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {e}\n")
            failed += 1

    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìä –í—Å–µ–≥–æ: {passed + failed}")

    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò!")

    print("=" * 70 + "\n")

    return failed == 0


if __name__ == "__main__":
    success = test_all_regimes()
    exit(0 if success else 1)
