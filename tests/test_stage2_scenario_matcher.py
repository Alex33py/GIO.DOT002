# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnhancedScenarioMatcher
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from systems.unified_scenario_matcher import EnhancedScenarioMatcher


def test_matcher_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ—Ä–∞"""
    print("\nüîç –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedScenarioMatcher")
    print("=" * 70)

    try:
        matcher = EnhancedScenarioMatcher()

        assert len(matcher.scenarios) > 0, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        assert len(matcher.strategies) > 0, "‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        assert matcher.regime_detector is not None, "‚ùå RegimeDetector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(matcher.scenarios)}")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(matcher.strategies)}")
        print(f"‚úÖ RegimeDetector: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")

        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}\n")
        return False


def test_momentum_long_matching():
    """–¢–µ—Å—Ç 2: –ú–∞—Ç—á–∏–Ω–≥ Momentum Long —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print("\nüîç –¢–ï–°–¢ 2: –ú–∞—Ç—á–∏–Ω–≥ Momentum Long")
    print("=" * 70)

    try:
        matcher = EnhancedScenarioMatcher()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è momentum long
        market_data = {
            "symbol": "BTCUSDT",
            "close": 60000,
            "volume": 2000,
            "candles": [{"close": 60000} for _ in range(100)]
        }

        indicators = {
            "adx": 35,
            "rsi": 65,
            "macd": 100,
            "macd_signal": 80,
            "macd_above_signal": True,
            "volume_ma20": 1000,
            "atr": 1200,
            "bb_width_percentile": 55,
            "atr_percentile": 60,
            "bullish_continuation_candle": True
        }

        mtf_trends = {
            "1H": "bullish",
            "4H": "bullish",
            "1D": "bullish"
        }

        volume_profile = {
            "poc": 59500,
            "vah": 60500,
            "val": 59000,
            "vwap": 59800
        }

        news_sentiment = {
            "overall": "bullish",
            "overall_score": 0.2
        }

        veto_checks = {
            "high_impact_news": False,
            "exchange_maintenance": False
        }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—á–∏–Ω–≥
        result = matcher.match_scenario(
            symbol="BTCUSDT",
            market_data=market_data,
            indicators=indicators,
            mtf_trends=mtf_trends,
            volume_profile=volume_profile,
            news_sentiment=news_sentiment,
            veto_checks=veto_checks
        )

        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {result['scenario_id']}")
            print(f"   üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {result['scenario_name']}")
            print(f"   üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result['strategy']}")
            print(f"   üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['direction']}")
            print(f"   üí∞ Entry: ${result['entry_price']:.2f}")
            print(f"   üõë Stop Loss: ${result['stop_loss']:.2f}")
            print(f"   üéØ TP1: ${result['tp1']:.2f}")
            print(f"   üéØ TP2: ${result['tp2']:.2f}")
            print(f"   üéØ TP3: ${result['tp3']:.2f}")
            print(f"   üìä Confidence: {result['confidence']}")
            print(f"   üåê Market Regime: {result['market_regime']}")
            print(f"   ‚öñÔ∏è Risk Profile: {result['risk_profile']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert result['direction'] == 'LONG', "‚ùå –û–∂–∏–¥–∞–ª—Å—è LONG"
            assert result['strategy'] in ['momentum', 'breakout'], "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
            assert result['entry_price'] > 0, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è entry_price"
            assert result['stop_loss'] < result['entry_price'], "‚ùå SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ entry –¥–ª—è LONG"
            assert result['tp1'] > result['entry_price'], "‚ùå TP1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ entry –¥–ª—è LONG"

            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")
            return True
        else:
            print("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥–æ—à–ª–∏)")
            print("‚úÖ –¢–ï–°–¢ –£–°–õ–û–í–ù–û –ü–†–û–ô–î–ï–ù (–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n")
            return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}\n")
        import traceback
        traceback.print_exc()
        return False


def test_mean_reversion_matching():
    """–¢–µ—Å—Ç 3: –ú–∞—Ç—á–∏–Ω–≥ Mean Reversion —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print("\nüîç –¢–ï–°–¢ 3: –ú–∞—Ç—á–∏–Ω–≥ Mean Reversion")
    print("=" * 70)

    try:
        matcher = EnhancedScenarioMatcher()

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è mean reversion (oversold) - –£–õ–£–ß–®–ï–ù–ù–´–ï
        market_data = {
            "symbol": "ETHUSDT",
            "close": 2950,  # –¶–µ–Ω–∞ –Ω–∏–∂–µ POC (oversold)
            "volume": 800,
            "candles": [{"close": 2950} for _ in range(100)]
        }

        indicators = {
            "adx": 15,  # –ù–∏–∑–∫–∏–π ADX (ranging)
            "rsi": 28,  # Oversold
            "rsi_oversold": True,
            "volume_ma20": 1000,
            "atr": 60,
            "bb_width_percentile": 35,
            "atr_percentile": 30,
            "bb_upper": 3100,
            "bb_lower": 2900,
            "bullish_reversal_candle": True,
            "rsi_bullish_divergence": True,

            # –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è trigger matching
            "volume>=volume_ma20*1.5": True,  # Trigger —É—Å–ª–æ–≤–∏–µ
            "cluster_imbalance": 2,  # –î–ª—è cluster orderflow
            "recent_support_level": 2900  # Support level
        }

        mtf_trends = {
            "1H": "neutral",
            "4H": "neutral",
            "1D": "neutral"
        }

        volume_profile = {
            "poc": 3050,  # POC –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            "vah": 3150,
            "val": 2950,  # –¶–µ–Ω–∞ –æ–∫–æ–ª–æ VAL (–Ω–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            "vwap": 3040
        }

        news_sentiment = {
            "overall": "neutral",
            "overall_score": 0.0
        }

        veto_checks = {}

        result = matcher.match_scenario(
            symbol="ETHUSDT",
            market_data=market_data,
            indicators=indicators,
            mtf_trends=mtf_trends,
            volume_profile=volume_profile,
            news_sentiment=news_sentiment,
            veto_checks=veto_checks
        )

        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {result['scenario_id']}")
            print(f"   üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {result['scenario_name']}")
            print(f"   üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result['strategy']}")
            print(f"   üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['direction']}")
            print(f"   üí∞ Entry: ${result['entry_price']:.2f}")
            print(f"   üõë Stop Loss: ${result['stop_loss']:.2f}")
            print(f"   üéØ TP1: ${result['tp1']:.2f}")
            print(f"   üìä Confidence: {result['confidence']}")
            print(f"   üåê Market Regime: {result['market_regime']}")

            # –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            assert result['strategy'] == 'mean_reversion', f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å mean_reversion, –ø–æ–ª—É—á–µ–Ω–æ {result['strategy']}"
            assert result['direction'] == 'LONG', "‚ùå –û–∂–∏–¥–∞–ª—Å—è LONG –¥–ª—è oversold"
            assert result['market_regime'] == 'ranging', f"‚ùå –û–∂–∏–¥–∞–ª—Å—è ranging —Ä–µ–∂–∏–º, –ø–æ–ª—É—á–µ–Ω–æ {result['market_regime']}"

            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")
            return True
        else:
            print("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è SCN_007 –≤ JSON")
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù\n")
            return False

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}\n")
        import traceback
        traceback.print_exc()
        return False



def test_market_regime_integration():
    """–¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MarketRegimeDetector"""
    print("\nüîç –¢–ï–°–¢ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è MarketRegimeDetector")
    print("=" * 70)

    try:
        matcher = EnhancedScenarioMatcher()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        regimes_to_test = [
            {
                "name": "Trending",
                "indicators": {"adx": 35, "volume_ma20": 1000, "bb_width_percentile": 50, "atr_percentile": 60},
                "expected_strategies": ["momentum", "breakout"]
            },
            {
                "name": "Ranging",
                "indicators": {"adx": 15, "volume_ma20": 1000, "bb_width_percentile": 35, "atr_percentile": 30},
                "expected_strategies": ["mean_reversion", "counter_trend"]
            }
        ]

        for test_case in regimes_to_test:
            market_data = {
                "close": 50000,
                "volume": 1500 if test_case["name"] == "Trending" else 700,
                "candles": []
            }

            indicators = test_case["indicators"]

            # –°–æ–∑–¥–∞—ë–º metrics
            metrics = matcher._build_metrics(
                market_data, indicators,
                {"1H": "neutral", "4H": "neutral", "1D": "neutral"},
                {"poc": 50000, "vah": 51000, "val": 49000, "vwap": 50000},
                {"overall": "neutral", "overall_score": 0}
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
            regime = matcher.regime_detector.detect(metrics)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategies = matcher._get_suitable_strategies(regime)

            print(f"\nüìä –†–µ–∂–∏–º: {test_case['name']}")
            print(f"   üîç –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫: {regime}")
            print(f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategies}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –µ—Å—Ç—å
            has_expected = any(s in strategies for s in test_case["expected_strategies"])
            assert has_expected, f"‚ùå –û–∂–∏–¥–∞–ª–∏—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {test_case['expected_strategies']}"

        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n")
        return True

    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}\n")
        import traceback
        traceback.print_exc()
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 2: EnhancedScenarioMatcher")
    print("=" * 70)

    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_matcher_initialization),
        ("Momentum Long Matching", test_momentum_long_matching),
        ("Mean Reversion Matching", test_mean_reversion_matching),
        ("Market Regime Integration", test_market_regime_integration)
    ]

    passed = 0
    failed = 0

    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {name}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {e}\n")
            failed += 1

    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìä –í—Å–µ–≥–æ: {passed + failed}")

    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")

    print("=" * 70 + "\n")

    return failed == 0


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
