#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Database Migration Tool
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ close_time –≤ —Ç–∞–±–ª–∏—Ü—É signals
"""

import sqlite3
import logging
from pathlib import Path

logger = logging.getLogger(__name__)


def migrate_database():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É close_time –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    """
    # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–Å–ù–ù–´–ï –ü–£–¢–ò!)
    possible_db_paths = [
        "gio_crypto_bot.db",  # ‚úÖ –ö–æ—Ä–µ–Ω—å
        "data/gio_bot.db",  # ‚úÖ –ü–∞–ø–∫–∞ data
        "data/gio_crypto.db",  # ‚úÖ –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –æ–¥–Ω–∞ –ë–î
        "signals.db",  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        "gio_signals.db",  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    ]

    db_path = None
    for path in possible_db_paths:
        if Path(path).exists():
            db_path = path
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {path}")
            break

    if not db_path:
        logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é.")
        return False

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ close_time
        cursor.execute("PRAGMA table_info(signals)")
        columns = [col[1] for col in cursor.fetchall()]

        if "close_time" not in columns:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ close_time...")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
            cursor.execute(
                """
                ALTER TABLE signals
                ADD COLUMN close_time TEXT
            """
            )

            conn.commit()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–ª–æ–Ω–∫–∞ 'close_time' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("PRAGMA table_info(signals)")
            columns_info = cursor.fetchall()
            logger.info(
                f"üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ 'signals': {', '.join([col[1] for col in columns_info])}"
            )

            return True
        else:
            logger.info(
                "‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'close_time' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            )
            return True

    except sqlite3.OperationalError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        conn.close()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
    )
    migrate_database()
