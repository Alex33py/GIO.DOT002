import sqlite3
import os

# –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É data —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
os.makedirs("data", exist_ok=True)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
conn = sqlite3.connect("data/gio_bot.db")
cursor = conn.cursor()

print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...")

# ============================================
# –¢–ê–ë–õ–ò–¶–Ø 1: signals (—Ç–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏)
# ============================================
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    symbol TEXT NOT NULL,
    direction TEXT NOT NULL,
    entry_price REAL NOT NULL,
    stop_loss REAL,
    take_profit REAL,
    tp1_price REAL,
    tp2_price REAL,
    tp3_price REAL,
    sl_price REAL,
    confidence REAL,
    risk_reward REAL,
    status TEXT DEFAULT 'active',
    scenario_id TEXT,
    scenario_name TEXT,
    scenario_score REAL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    close_time DATETIME,
    current_roi REAL DEFAULT 0,
    tp1_hit INTEGER DEFAULT 0,
    tp2_hit INTEGER DEFAULT 0,
    tp3_hit INTEGER DEFAULT 0
)
"""
)

# –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è signals
cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_symbol ON signals(symbol)")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_status ON signals(status)")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_signals_timestamp ON signals(timestamp)")
cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_signals_scenario ON signals(scenario_id)"
)

print("‚úÖ –¢–∞–±–ª–∏—Ü—è 'signals' —Å—Ç–≤–æ—Ä–µ–Ω–∞")

# ============================================
# –¢–ê–ë–õ–ò–¶–Ø 2: unified_signals (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏)
# ============================================
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS unified_signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    symbol TEXT NOT NULL,
    direction TEXT NOT NULL,
    entry_price REAL NOT NULL,
    stop_loss REAL,
    take_profit REAL,
    tp1_price REAL,
    tp2_price REAL,
    tp3_price REAL,
    sl_price REAL,
    confidence REAL,
    risk_reward REAL,
    status TEXT DEFAULT 'ACTIVE',
    scenario_id TEXT,
    scenario_name TEXT,
    scenario_score REAL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    close_time DATETIME,
    current_roi REAL DEFAULT 0
)
"""
)

cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_unified_signals_symbol ON unified_signals(symbol)"
)
cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_unified_signals_status ON unified_signals(status)"
)
cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_unified_signals_timestamp ON unified_signals(timestamp)"
)

print("‚úÖ –¢–∞–±–ª–∏—Ü—è 'unified_signals' —Å—Ç–≤–æ—Ä–µ–Ω–∞")

# ============================================
# –¢–ê–ë–õ–ò–¶–Ø 3: large_trades (—Å–¥–µ–ª–∫–∏ –∫–∏—Ç—ñ–≤)
# ============================================
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS large_trades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    symbol TEXT NOT NULL,
    side TEXT NOT NULL,
    size REAL NOT NULL,
    size_usd REAL NOT NULL,
    price REAL NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
"""
)

cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_large_trades_symbol ON large_trades(symbol)"
)
cursor.execute(
    "CREATE INDEX IF NOT EXISTS idx_large_trades_timestamp ON large_trades(timestamp)"
)

print("‚úÖ –¢–∞–±–ª–∏—Ü—è 'large_trades' —Å—Ç–≤–æ—Ä–µ–Ω–∞")

# ============================================
# COMMIT
# ============================================
conn.commit()
print("\n‚úÖ –£—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")

# ============================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –¢–ê–ë–õ–ò–¶–¨
# ============================================
cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
tables = cursor.fetchall()
print("\nüìä –¢–∞–±–ª–∏—Ü—ñ –≤ –ë–î:")
for t in tables:
    print(f"  - {t[0]}")

# ============================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–õ–û–ù–û–ö –î–õ–Ø signals
# ============================================
cursor.execute("PRAGMA table_info(signals)")
columns = cursor.fetchall()
print('\nüìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ "signals":')
for col in columns:
    print(f"  - {col[1]} ({col[2]})")

# ============================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–õ–û–ù–û–ö –î–õ–Ø unified_signals
# ============================================
cursor.execute("PRAGMA table_info(unified_signals)")
columns = cursor.fetchall()
print('\nüìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ "unified_signals":')
for col in columns:
    print(f"  - {col[1]} ({col[2]})")

# ============================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–õ–û–ù–û–ö –î–õ–Ø large_trades
# ============================================
cursor.execute("PRAGMA table_info(large_trades)")
columns = cursor.fetchall()
print('\nüìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ "large_trades":')
for col in columns:
    print(f"  - {col[1]} ({col[2]})")

conn.close()
print("\nüéâ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
