# -*- coding: utf-8 -*-
"""
Migration: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è EnhancedScenarioMatcher v2.0
"""

import sqlite3
from pathlib import Path
from datetime import datetime


def migrate_database(db_path: str = "data/gio_bot.db"):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É signals"""

    print(f"\nüîß –ú–ò–ì–†–ê–¶–ò–Ø –ë–î: {db_path}")
    print("=" * 70)

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        cursor.execute("""
            SELECT name FROM sqlite_master
            WHERE type='table' AND name='signals'
        """)

        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ signals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        new_columns = [
            ("scenario_id", "TEXT"),
            ("strategy", "TEXT"),
            ("market_regime", "TEXT"),
            ("confidence", "TEXT"),
            ("phase", "TEXT"),
            ("risk_profile", "TEXT"),
            ("tactic_name", "TEXT"),
            ("validation_score", "REAL"),
            ("trigger_score", "REAL")
        ]

        added_count = 0

        for column_name, column_type in new_columns:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
                cursor.execute(f"""
                    ALTER TABLE signals
                    ADD COLUMN {column_name} {column_type}
                """)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name} ({column_type})")
                added_count += 1
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    print(f"‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {column_name}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {column_name}: {e}")

        conn.commit()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        indexes = [
            ("idx_scenario_id", "scenario_id"),
            ("idx_strategy", "strategy"),
            ("idx_market_regime", "market_regime"),
            ("idx_confidence", "confidence")
        ]

        for idx_name, column in indexes:
            try:
                cursor.execute(f"""
                    CREATE INDEX IF NOT EXISTS {idx_name}
                    ON signals({column})
                """)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {idx_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {idx_name}: {e}")

        conn.commit()
        conn.close()

        print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
        print("=" * 70 + "\n")

        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def verify_schema(db_path: str = "data/gio_bot.db"):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ë–î")
    print("=" * 70)

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute("PRAGMA table_info(signals)")
        columns = cursor.fetchall()

        print(f"üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ signals: {len(columns)}\n")

        required_columns = [
            "scenario_id", "strategy", "market_regime",
            "confidence", "phase", "risk_profile", "tactic_name"
        ]

        existing_columns = [col[1] for col in columns]

        for req_col in required_columns:
            if req_col in existing_columns:
                print(f"‚úÖ {req_col}")
            else:
                print(f"‚ùå {req_col} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")

        conn.close()

        print("=" * 70 + "\n")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã: {e}")
        return False


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("üóÑÔ∏è  DATABASE MIGRATION - Enhanced Scenario Matcher v2.0")
    print("=" * 70)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_database()

    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
        verify_schema()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")

    print("=" * 70 + "\n")
