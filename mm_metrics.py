#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MM Metrics Provider
–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CVD, Funding Rate, L/S Ratio
"""

import aiohttp
import asyncio
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)


class MMMetricsProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä MM-–º–µ—Ç—Ä–∏–∫ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""

    def __init__(self):
        self.binance_futures_url = "https://fapi.binance.com"
        self.coinglass_url = "https://open-api.coinglass.com/public/v2"
        self.session: Optional[aiohttp.ClientSession] = None

    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å HTTP-—Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP-—Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            await self.session.close()

    # ==================== FUNDING RATE ====================
    async def get_funding_rate(self, symbol: str = "BTCUSDT") -> Optional[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å Funding Rate –∏–∑ Binance Futures

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)

        Returns:
            Funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏–ª–∏ None
        """
        try:
            session = await self._get_session()
            url = f"{self.binance_futures_url}/fapi/v1/premiumIndex"
            params = {"symbol": symbol}

            async with session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    funding_rate = float(data.get("lastFundingRate", 0)) * 100
                    logger.info(f"‚úÖ Funding Rate ({symbol}): {funding_rate:.4f}%")
                    return round(funding_rate, 4)
                else:
                    logger.error(f"‚ùå Binance Futures API error: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå Error fetching Funding Rate: {e}")
            return None

    # ==================== L/S RATIO ====================
    async def get_ls_ratio(self, symbol: str = "BTC") -> Optional[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å Long/Short Ratio –∏–∑ Coinglass API

        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)

        Returns:
            L/S Ratio –∏–ª–∏ None
        """
        try:
            session = await self._get_session()
            url = f"{self.coinglass_url}/indicator/long_short_accounts_ratio"
            params = {"symbol": symbol, "interval": "0"}  # 0 = latest

            async with session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("success") and data.get("data"):
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        latest = data["data"][0] if data["data"] else None
                        if latest:
                            ls_ratio = float(latest.get("longShortRatio", 1.0))
                            logger.info(f"‚úÖ L/S Ratio ({symbol}): {ls_ratio:.2f}")
                            return round(ls_ratio, 2)
                    return None
                else:
                    logger.warning(f"‚ö†Ô∏è Coinglass API error: {response.status}")
                    return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error fetching L/S Ratio: {e}")
            return None

    # ==================== CVD (Cumulative Volume Delta) ====================
    async def calculate_cvd(
        self, symbol: str = "BTCUSDT", limit: int = 500
    ) -> Optional[float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å CVD –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
        CVD = –°—É–º–º–∞ (Buy Volume - Sell Volume) / Total Volume * 100

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            CVD –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏–ª–∏ None
        """
        try:
            session = await self._get_session()
            url = f"{self.binance_futures_url}/fapi/v1/aggTrades"
            params = {"symbol": symbol, "limit": limit}

            async with session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    trades = await response.json()

                    buy_volume = 0
                    sell_volume = 0

                    for trade in trades:
                        qty = float(trade["q"])
                        if trade["m"]:  # m = True –æ–∑–Ω–∞—á–∞–µ—Ç Market Sell
                            sell_volume += qty
                        else:  # Market Buy
                            buy_volume += qty

                    total_volume = buy_volume + sell_volume
                    if total_volume > 0:
                        cvd = ((buy_volume - sell_volume) / total_volume) * 100
                        logger.info(f"‚úÖ CVD ({symbol}): {cvd:.2f}%")
                        return round(cvd, 2)
                    return 0.0
                else:
                    logger.error(f"‚ùå Binance Futures API error: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå Error calculating CVD: {e}")
            return None

    # ==================== GET ALL METRICS ====================
    async def get_all_metrics(
        self, symbol: str = "BTCUSDT"
    ) -> Dict[str, Optional[float]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ MM-–º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏: {"cvd": float, "funding": float, "ls_ratio": float}
        """
        tasks = [
            self.calculate_cvd(symbol),
            self.get_funding_rate(symbol),
            self.get_ls_ratio(symbol.replace("USDT", "")),
        ]

        results = await asyncio.gather(*tasks, return_exceptions=True)

        return {
            "cvd": results[0] if not isinstance(results[0], Exception) else None,
            "funding": results[1] if not isinstance(results[1], Exception) else None,
            "ls_ratio": results[2] if not isinstance(results[2], Exception) else None,
        }


# ==================== –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ====================
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MMMetricsProvider"""
    provider = MMMetricsProvider()

    try:
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º MM-–º–µ—Ç—Ä–∏–∫–∏...")
        metrics = await provider.get_all_metrics("BTCUSDT")

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"CVD: {metrics['cvd']}%")
        print(f"Funding Rate: {metrics['funding']}%")
        print(f"L/S Ratio: {metrics['ls_ratio']}")
    finally:
        await provider.close()


if __name__ == "__main__":
    asyncio.run(main())
