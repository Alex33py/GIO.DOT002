#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cluster Detector - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ OrderFlow
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
- Stacked Imbalances (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã)
- POC Shifts (—Å–º–µ—â–µ–Ω–∏–µ Point of Control)
- Absorption (–∑–æ–Ω—ã –ø–æ–≥–ª–æ—â–µ–Ω–∏—è)
- Exhaustion (–∑–æ–Ω—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è)
"""

from typing import Dict, Optional, List
from datetime import datetime, timedelta
import numpy as np
from config.settings import logger


class ClusterDetector:
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ OrderFlow"""

    def __init__(self, bot):
        """
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä GIOCryptoBot –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        """
        self.bot = bot

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è stacked imbalances
        self.imbalance_threshold = 0.6  # 60% –¥–∏—Å–±–∞–ª–∞–Ω—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏–º—ã–º
        self.min_stack_count = 3  # –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è POC shift
        self.poc_shift_threshold = 0.5  # 0.5% —Å–º–µ—â–µ–Ω–∏–µ POC —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏–º—ã–º

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è absorption/exhaustion
        self.absorption_volume_multiplier = 2.0  # 2x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞
        self.exhaustion_volume_multiplier = 0.3  # 0.3x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞

        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.poc_history: Dict[str, List[float]] = {}
        self.imbalance_history: Dict[str, List[Dict]] = {}

        logger.info("‚úÖ ClusterDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def detect_stacked_imbalances(self, symbol: str, direction: str) -> int:
        """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('LONG' –∏–ª–∏ 'SHORT')

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ stacked imbalances (0-5+)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã
            if not hasattr(self.bot, 'l2_imbalances') or symbol not in self.bot.l2_imbalances:
                logger.debug(f"‚ö†Ô∏è –ù–µ—Ç L2 –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return 0

            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤
            recent_imbalances = self.bot.l2_imbalances[symbol][-10:]

            if len(recent_imbalances) < self.min_stack_count:
                return 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
            expected_direction = 'BUY' if direction == 'LONG' else 'SELL'

            # –°—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            stack_count = 0
            current_streak = 0

            for imbalance in reversed(recent_imbalances):
                imbalance_value = imbalance.get('imbalance', 0)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
                if expected_direction == 'BUY' and imbalance_value > self.imbalance_threshold:
                    current_streak += 1
                elif expected_direction == 'SELL' and imbalance_value < -self.imbalance_threshold:
                    current_streak += 1
                else:
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
                    if current_streak >= self.min_stack_count:
                        stack_count = max(stack_count, current_streak)
                    current_streak = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–∫
            if current_streak >= self.min_stack_count:
                stack_count = max(stack_count, current_streak)

            logger.debug(f"üìä {symbol}: Stacked Imbalances = {stack_count} ({direction})")
            return min(stack_count, 5)  # –ú–∞–∫—Å–∏–º—É–º 5

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ detect_stacked_imbalances –¥–ª—è {symbol}: {e}")
            return 0

    async def detect_poc_shift(self, symbol: str) -> Dict:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ POC (Point of Control) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict: {
                'shifted': bool,
                'direction': 'up'/'down'/'none',
                'magnitude': float  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            }
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π POC –∏–∑ ExoCharts
            current_poc = None

            if hasattr(self.bot, 'exocharts_data') and symbol in self.bot.exocharts_data:
                exo_data = self.bot.exocharts_data[symbol]
                current_poc = exo_data.get('poc')

            if current_poc is None:
                return {'shifted': False, 'direction': 'none', 'magnitude': 0.0}

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é POC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if symbol not in self.poc_history:
                self.poc_history[symbol] = []

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π POC –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.poc_history[symbol].append(current_poc)

            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π
            if len(self.poc_history[symbol]) > 20:
                self.poc_history[symbol] = self.poc_history[symbol][-20:]

            # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if len(self.poc_history[symbol]) < 5:
                return {'shifted': False, 'direction': 'none', 'magnitude': 0.0}

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π POC —Å —Å—Ä–µ–¥–Ω–∏–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
            previous_pocs = self.poc_history[symbol][-6:-1]
            avg_previous_poc = np.mean(previous_pocs)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            shift_pct = ((current_poc - avg_previous_poc) / avg_previous_poc) * 100

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏—è
            shifted = abs(shift_pct) >= self.poc_shift_threshold
            direction = 'up' if shift_pct > 0 else 'down' if shift_pct < 0 else 'none'

            if shifted:
                logger.info(f"üéØ {symbol}: POC Shift {direction.upper()} by {abs(shift_pct):.2f}%")

            return {
                'shifted': shifted,
                'direction': direction,
                'magnitude': abs(shift_pct)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ detect_poc_shift –¥–ª—è {symbol}: {e}")
            return {'shifted': False, 'direction': 'none', 'magnitude': 0.0}

    async def detect_absorption(self, symbol: str) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—ã –ø–æ–≥–ª–æ—â–µ–Ω–∏—è (absorption) - –≤—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict: {
                'detected': bool,
                'level': float,      # –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –∑–æ–Ω—ã
                'volume': float      # –û–±—ä—ë–º –≤ –∑–æ–Ω–µ
            }
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
            if not hasattr(self.bot, 'large_trades') or symbol not in self.bot.large_trades:
                return {'detected': False, 'level': 0.0, 'volume': 0.0}

            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            recent_trades = self.bot.large_trades[symbol][-50:]

            if len(recent_trades) < 10:
                return {'detected': False, 'level': 0.0, 'volume': 0.0}

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω—è–º (¬±0.1%)
            price_levels = {}

            for trade in recent_trades:
                price = trade.get('price', 0)
                volume = trade.get('quantity', 0)

                # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ 0.1%
                level_key = round(price, -int(np.log10(price)) + 2)

                if level_key not in price_levels:
                    price_levels[level_key] = {'volume': 0, 'count': 0}

                price_levels[level_key]['volume'] += volume
                price_levels[level_key]['count'] += 1

            # –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
            avg_volume = np.mean([data['volume'] for data in price_levels.values()])

            # –ò—â–µ–º –∑–æ–Ω—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º –æ–±—ä—ë–º–æ–º
            absorption_threshold = avg_volume * self.absorption_volume_multiplier

            for level, data in price_levels.items():
                if data['volume'] >= absorption_threshold and data['count'] >= 5:
                    logger.info(f"üõ°Ô∏è {symbol}: Absorption detected at ${level:.2f} (volume: {data['volume']:.2f})")

                    return {
                        'detected': True,
                        'level': level,
                        'volume': data['volume']
                    }

            return {'detected': False, 'level': 0.0, 'volume': 0.0}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ detect_absorption –¥–ª—è {symbol}: {e}")
            return {'detected': False, 'level': 0.0, 'volume': 0.0}

    async def detect_exhaustion(self, symbol: str) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è (exhaustion) - –Ω–∏–∑–∫–∏–π –æ–±—ä—ë–º –ø–æ—Å–ª–µ —Å–∏–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict: {
                'detected': bool,
                'level': float,      # –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –∑–æ–Ω—ã
                'strength': float    # –°–∏–ª–∞ –∏—Å—Ç–æ—â–µ–Ω–∏—è (0.0-1.0)
            }
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
            if not hasattr(self.bot, 'large_trades') or symbol not in self.bot.large_trades:
                return {'detected': False, 'level': 0.0, 'strength': 0.0}

            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            all_trades = self.bot.large_trades[symbol][-100:]

            if len(all_trades) < 20:
                return {'detected': False, 'level': 0.0, 'strength': 0.0}

            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏: —Å—Ç–∞—Ä—ã–µ (80%) –∏ –Ω–æ–≤—ã–µ (20%)
            split_point = int(len(all_trades) * 0.8)
            old_trades = all_trades[:split_point]
            new_trades = all_trades[split_point:]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            old_avg_volume = np.mean([t.get('quantity', 0) for t in old_trades])
            new_avg_volume = np.mean([t.get('quantity', 0) for t in new_trades])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –æ–±—ä—ë–º–∞
            if new_avg_volume < old_avg_volume * self.exhaustion_volume_multiplier:
                # –ò—Å—Ç–æ—â–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É –∏—Å—Ç–æ—â–µ–Ω–∏—è
                volume_drop = (old_avg_volume - new_avg_volume) / old_avg_volume
                strength = min(volume_drop, 1.0)

                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã
                current_level = new_trades[-1].get('price', 0) if new_trades else 0

                logger.info(f"üí• {symbol}: Exhaustion detected at ${current_level:.2f} (strength: {strength:.2f})")

                return {
                    'detected': True,
                    'level': current_level,
                    'strength': strength
                }

            return {'detected': False, 'level': 0.0, 'strength': 0.0}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ detect_exhaustion –¥–ª—è {symbol}: {e}")
            return {'detected': False, 'level': 0.0, 'strength': 0.0}

    async def get_cluster_score(self, symbol: str, direction: str) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π score –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (0.0-1.0)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('LONG' –∏–ª–∏ 'SHORT')

        Returns:
            float: Score –æ—Ç 0.0 –¥–æ 1.0
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
            stacked = await self.detect_stacked_imbalances(symbol, direction)
            poc_shift = await self.detect_poc_shift(symbol)
            absorption = await self.detect_absorption(symbol)
            exhaustion = await self.detect_exhaustion(symbol)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score (0.0-1.0)
            score = 0.0

            # Stacked imbalances (0-0.4)
            score += min(stacked / 5.0, 1.0) * 0.4

            # POC shift (0-0.3)
            if poc_shift['shifted']:
                expected_direction = 'up' if direction == 'LONG' else 'down'
                if poc_shift['direction'] == expected_direction:
                    score += min(poc_shift['magnitude'] / 2.0, 1.0) * 0.3

            # Absorption (0-0.15)
            if absorption['detected']:
                score += 0.15

            # Exhaustion (0-0.15)
            if exhaustion['detected']:
                score += exhaustion['strength'] * 0.15

            logger.debug(f"üìä {symbol} Cluster Score: {score:.2f}")
            return score

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_cluster_score –¥–ª—è {symbol}: {e}")
            return 0.0


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["ClusterDetector"]
