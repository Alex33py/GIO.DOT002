#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Whale Tracker –¥–ª—è GIO Crypto Bot v3.0
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (>$100K)
"""

import logging
import time
from typing import Dict, List
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)


@dataclass
class WhaleTrade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ whale —Å–¥–µ–ª–∫–∏"""

    timestamp: float
    symbol: str
    price: float
    quantity: float
    size_usd: float
    side: str  # BUY/SELL
    exchange: str


class WhaleTracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (whale trades)

    Features:
    - –î–µ—Ç–µ–∫—Ü–∏—è —Å–¥–µ–ª–æ–∫ >$100K
    - –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - –ü–æ–¥—Å—á—ë—Ç buy/sell –¥–∞–≤–ª–µ–Ω–∏—è –∫–∏—Ç–æ–≤
    - –ê–ª–µ—Ä—Ç—ã –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    """

    def __init__(self, threshold_usd: float = 100000):
        """
        Args:
            threshold_usd: –ü–æ—Ä–æ–≥ –¥–ª—è whale —Å–¥–µ–ª–∫–∏ –≤ USD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $100K)
        """
        self.whale_threshold = threshold_usd
        self.recent_whales = defaultdict(list)  # symbol: [WhaleTrade]
        self.window_seconds = 300  # 5 –º–∏–Ω—É—Ç

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_whales_detected": 0,
            "total_buy_volume": 0,
            "total_sell_volume": 0,
        }

        logger.info("‚úÖ WhaleTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –ü–æ—Ä–æ–≥: ${self.whale_threshold:,.0f}")
        logger.info(f"   ‚Ä¢ –û–∫–Ω–æ: {self.window_seconds}s")

    async def process_trade(self, symbol: str, trade: Dict, exchange: str = "Unknown"):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç whale activity

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            trade: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∏
                   {'price': float, 'quantity': float, 'side': 'BUY'/'SELL',
                    'timestamp': float}
            exchange: –ë–∏—Ä–∂–∞ (Binance, Bybit, etc.)
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ USD
            price = float(trade.get("price", 0))
            quantity = float(trade.get("quantity", 0))
            size_usd = price * quantity

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä–æ–≥
            if size_usd >= self.whale_threshold:
                # –≠—Ç–æ whale trade!
                whale_trade = WhaleTrade(
                    timestamp=trade.get("timestamp", time.time()),
                    symbol=symbol,
                    price=price,
                    quantity=quantity,
                    size_usd=size_usd,
                    side=trade.get("side", "UNKNOWN"),
                    exchange=exchange,
                )

                # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫
                self.recent_whales[symbol].append(whale_trade)

                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats["total_whales_detected"] += 1

                if whale_trade.side == "BUY":
                    self.stats["total_buy_volume"] += size_usd
                elif whale_trade.side == "SELL":
                    self.stats["total_sell_volume"] += size_usd

                logger.info(
                    f"üêã WHALE TRADE: {symbol} {whale_trade.side} "
                    f"${size_usd:,.0f} @ ${price:,.2f} ({exchange})"
                )

                # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                await self._cleanup_old_trades(symbol)

                return whale_trade

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_trade: {e}", exc_info=True)
            return None

    async def _cleanup_old_trades(self, symbol: str):
        """–£–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç"""
        try:
            if symbol not in self.recent_whales:
                return

            cutoff_time = time.time() - self.window_seconds

            # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ
            self.recent_whales[symbol] = [
                trade
                for trade in self.recent_whales[symbol]
                if trade.timestamp > cutoff_time
            ]

            # –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
            if not self.recent_whales[symbol]:
                del self.recent_whales[symbol]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _cleanup_old_trades: {e}")

    def get_whale_activity(self, symbol: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
            {
                'trades': int,
                'buy_volume': float,
                'sell_volume': float,
                'net': float,
                'dominant_side': str,
                'whale_trades': List[WhaleTrade]
            }
        """
        try:
            # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            cutoff_time = time.time() - self.window_seconds

            if symbol in self.recent_whales:
                self.recent_whales[symbol] = [
                    trade
                    for trade in self.recent_whales[symbol]
                    if trade.timestamp > cutoff_time
                ]

            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            if symbol not in self.recent_whales or not self.recent_whales[symbol]:
                return {
                    "trades": 0,
                    "buy_volume": 0,
                    "sell_volume": 0,
                    "net": 0,
                    "dominant_side": "neutral",
                    "whale_trades": [],
                }

            trades = self.recent_whales[symbol]

            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—ä—ë–º—ã
            buy_vol = sum(t.size_usd for t in trades if t.side == "BUY")
            sell_vol = sum(t.size_usd for t in trades if t.side == "SELL")
            net = buy_vol - sell_vol

            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if abs(net) < (buy_vol + sell_vol) * 0.2:
                dominant_side = "neutral"
            elif net > 0:
                dominant_side = "bullish"
            else:
                dominant_side = "bearish"

            return {
                "trades": len(trades),
                "buy_volume": buy_vol,
                "sell_volume": sell_vol,
                "net": net,
                "dominant_side": dominant_side,
                "whale_trades": trades,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_whale_activity: {e}", exc_info=True)
            return {
                "trades": 0,
                "buy_volume": 0,
                "sell_volume": 0,
                "net": 0,
                "dominant_side": "neutral",
                "whale_trades": [],
            }

    def get_all_activity(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º"""
        result = {}

        for symbol in list(self.recent_whales.keys()):
            result[symbol] = self.get_whale_activity(symbol)

        return result

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_volume = self.stats["total_buy_volume"] + self.stats["total_sell_volume"]

        return {
            "total_whales_detected": self.stats["total_whales_detected"],
            "total_buy_volume": self.stats["total_buy_volume"],
            "total_sell_volume": self.stats["total_sell_volume"],
            "total_volume": total_volume,
            "buy_dominance": (
                (self.stats["total_buy_volume"] / max(1, total_volume)) * 100
            ),
            "active_symbols": len(self.recent_whales),
        }

    def format_activity_message(self, symbol: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram"""
        activity = self.get_whale_activity(symbol)

        if activity["trades"] == 0:
            return f"üêã {symbol}: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"

        # –≠–º–æ–¥–∑–∏ –ø–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
        if activity["dominant_side"] == "bullish":
            emoji = "üü¢"
            sentiment = "Bullish"
        elif activity["dominant_side"] == "bearish":
            emoji = "üî¥"
            sentiment = "Bearish"
        else:
            emoji = "‚ö™"
            sentiment = "Neutral"

        message = f"""üêã WHALE ACTIVITY: {symbol}

Trades: {activity['trades']}
Buy Vol: ${activity['buy_volume']:,.0f}
Sell Vol: ${activity['sell_volume']:,.0f}
Net: ${activity['net']:+,.0f}

{emoji} Sentiment: {sentiment}

‚è∞ Last 5 minutes
"""

        return message


# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ dashboard
def integrate_whale_tracker_to_dashboard():
    """–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ /market –∫–æ–º–∞–Ω–¥—É"""

    code_example = """
# –í telegram/handlers/dashboard_handler.py

async def cmd_market(self, update, context):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

    # –ü–æ–ª—É—á–∏—Ç—å whale activity
    whale_activity = self.bot.whale_tracker.get_whale_activity(symbol)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    if whale_activity['trades'] > 0:
        whale_emoji = "üêã"
        whale_sentiment = (
            "üü¢ Bullish" if whale_activity['dominant_side'] == 'bullish'
            else "üî¥ Bearish" if whale_activity['dominant_side'] == 'bearish'
            else "‚ö™ Neutral"
        )
    else:
        whale_emoji = "üí§"
        whale_sentiment = "‚ö™ Neutral"

    message += f'''
üêã WHALE ACTIVITY (5min)
‚îú‚îÄ Trades: {whale_activity['trades']}
‚îú‚îÄ Buy Vol: ${whale_activity['buy_volume']:,.2f}
‚îú‚îÄ Sell Vol: ${whale_activity['sell_volume']:,.2f}
‚îî‚îÄ Net: ${whale_activity['net']:+,.2f} {whale_sentiment}
'''

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
"""

    return code_example


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    import asyncio

    async def test_whale_tracker():
        tracker = WhaleTracker(threshold_usd=100000)

        # –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–æ–∫
        trades = [
            {"price": 113000, "quantity": 1.2, "side": "BUY", "timestamp": time.time()},
            {
                "price": 113000,
                "quantity": 0.5,
                "side": "SELL",
                "timestamp": time.time(),
            },
            {"price": 113100, "quantity": 2.5, "side": "BUY", "timestamp": time.time()},
        ]

        for trade in trades:
            result = await tracker.process_trade("BTCUSDT", trade, "Binance")
            if result:
                print(f"Whale detected: {result.side} ${result.size_usd:,.0f}")

        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity = tracker.get_whale_activity("BTCUSDT")
        print(f"\nActivity: {activity}")

        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = tracker.get_stats()
        print(f"\nStats: {stats}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = tracker.format_activity_message("BTCUSDT")
        print(f"\n{message}")

    asyncio.run(test_whale_tracker())
