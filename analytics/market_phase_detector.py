#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Market Phase Detector
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞: Accumulation, Markup, Distribution, Markdown
"""

from typing import Dict, Optional
from config.settings import logger


class MarketPhaseDetector:
    """
    –î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - Volume Profile (POC, VAH, VAL)
    - Orderbook Pressure
    - CVD (Cumulative Volume Delta)
    - Price Action
    """

    def __init__(self):
        self.phases = {
            "ACCUMULATION": {"emoji": "üü¢", "color": "green"},
            "MARKUP": {"emoji": "üìà", "color": "blue"},
            "DISTRIBUTION": {"emoji": "üî¥", "color": "red"},
            "MARKDOWN": {"emoji": "üìâ", "color": "orange"},
            "CONSOLIDATION": {"emoji": "‚ö™", "color": "gray"},
        }
        logger.info("‚úÖ MarketPhaseDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def detect_phase(
        self,
        symbol: str,
        price: float,
        volume_profile: Dict,
        ob_imbalance: float,
        cvd: float,
        price_change_24h: float,
    ) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            volume_profile: VP –¥–∞–Ω–Ω—ã–µ (POC, VAH, VAL)
            ob_imbalance: Orderbook imbalance (%)
            cvd: Cumulative Volume Delta (%)
            price_change_24h: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24h (%)

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–∑–µ
        """
        try:
            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Volume Profile
            poc = volume_profile.get("poc", 0)
            vah = volume_profile.get("vah", 0)
            val = volume_profile.get("val", 0)

            if not poc or not vah or not val:
                return self._unknown_phase()

            # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã
            above_vah = price > vah
            below_val = price < val
            in_value_area = val <= price <= vah

            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            strong_buying = ob_imbalance > 30 and cvd > 20
            strong_selling = ob_imbalance < -30 and cvd < -20
            neutral = abs(ob_imbalance) < 20 and abs(cvd) < 20

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É

            # ACCUMULATION: –¶–µ–Ω–∞ –Ω–∏–∂–µ VAL, —Å–∏–ª—å–Ω–æ–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
            if below_val and strong_buying and price_change_24h > -5:
                phase = "ACCUMULATION"
                confidence = self._calculate_confidence(
                    [ob_imbalance > 30, cvd > 20, price_change_24h > -2]
                )
                description = "–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º"

            # MARKUP: –¶–µ–Ω–∞ –≤—ã—à–µ VAH, —Å–∏–ª—å–Ω–æ–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä–æ—Å—Ç
            elif above_vah and strong_buying and price_change_24h > 2:
                phase = "MARKUP"
                confidence = self._calculate_confidence(
                    [ob_imbalance > 30, cvd > 20, price_change_24h > 5]
                )
                description = "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç, –º–∞—Ä–∫–µ—Ç-–º–µ–π–∫–µ—Ä—ã —Ç–æ–ª–∫–∞—é—Ç —Ü–µ–Ω—É –≤–≤–µ—Ä—Ö"

            # DISTRIBUTION: –¶–µ–Ω–∞ –≤—ã—à–µ VAH, —Å–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
            elif above_vah and strong_selling and price_change_24h < 5:
                phase = "DISTRIBUTION"
                confidence = self._calculate_confidence(
                    [ob_imbalance < -30, cvd < -20, price_change_24h < 2]
                )
                description = "–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ö–∞—è—Ö"

            # MARKDOWN: –¶–µ–Ω–∞ –Ω–∏–∂–µ VAL, —Å–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –ø–∞–¥–µ–Ω–∏–µ
            elif below_val and strong_selling and price_change_24h < -2:
                phase = "MARKDOWN"
                confidence = self._calculate_confidence(
                    [ob_imbalance < -30, cvd < -20, price_change_24h < -5]
                )
                description = "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ, –º–∞—Ä–∫–µ—Ç-–º–µ–π–∫–µ—Ä—ã —Ç–æ–ª–∫–∞—é—Ç —Ü–µ–Ω—É –≤–Ω–∏–∑"

            # CONSOLIDATION: –¶–µ–Ω–∞ –≤ Value Area, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            elif in_value_area and neutral:
                phase = "CONSOLIDATION"
                confidence = self._calculate_confidence(
                    [abs(ob_imbalance) < 20, abs(cvd) < 20, abs(price_change_24h) < 3]
                )
                description = "–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

            # UNKNOWN: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            else:
                return self._unknown_phase()

            return {
                "phase": phase,
                "emoji": self.phases[phase]["emoji"],
                "color": self.phases[phase]["color"],
                "confidence": confidence,
                "description": description,
                "metrics": {
                    "vp_position": self._get_vp_position(price, poc, vah, val),
                    "ob_imbalance": ob_imbalance,
                    "cvd": cvd,
                    "price_change_24h": price_change_24h,
                },
            }

        except Exception as e:
            logger.error(f"detect_phase error for {symbol}: {e}")
            return self._unknown_phase()

    def _get_vp_position(
        self, price: float, poc: float, vah: float, val: float
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ VP"""
        if price > vah:
            return "ABOVE_VAH"
        elif price < val:
            return "BELOW_VAL"
        elif price > poc:
            return "ABOVE_POC"
        else:
            return "BELOW_POC"

    def _calculate_confidence(self, conditions: list) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ñ–∞–∑–µ (0-100%)"""
        true_count = sum(1 for c in conditions if c)
        return int((true_count / len(conditions)) * 100)

    def _unknown_phase(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UNKNOWN —Ñ–∞–∑—É"""
        return {
            "phase": "UNKNOWN",
            "emoji": "‚ùì",
            "color": "gray",
            "confidence": 0,
            "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã",
            "metrics": {},
        }

    def get_phase_recommendations(self, phase: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã"""
        recommendations = {
            "ACCUMULATION": {
                "action": "WATCH",
                "description": "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–±–æ–µ–º VAL. –ü—Ä–∏ –ø—Ä–æ–±–æ–µ –≤–≤–µ—Ä—Ö ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ MARKUP.",
                "risk": "LOW",
            },
            "MARKUP": {
                "action": "FOLLOW",
                "description": "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—ë–º–∞–º–∏ –∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è–º–∏. –ü—Ä–∏ –æ—Å–ª–∞–±–ª–µ–Ω–∏–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ DISTRIBUTION.",
                "risk": "MEDIUM",
            },
            "DISTRIBUTION": {
                "action": "CAUTION",
                "description": "–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ö–∞—è—Ö. –ñ–¥–∏—Ç–µ –ø—Ä–æ–±–æ—è VAH –≤–Ω–∏–∑.",
                "risk": "HIGH",
            },
            "MARKDOWN": {
                "action": "AVOID",
                "description": "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ. –ù–µ –ª–æ–≤–∏—Ç–µ –ø–∞–¥–∞—é—â–∏–π –Ω–æ–∂. –ñ–¥–∏—Ç–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏–∂–µ VAL.",
                "risk": "HIGH",
            },
            "CONSOLIDATION": {
                "action": "WAIT",
                "description": "–ë–æ–∫–æ–≤–∏–∫. –ñ–¥–∏—Ç–µ –ø—Ä–æ–±–æ—è –≥—Ä–∞–Ω–∏—Ü Value Area –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                "risk": "LOW",
            },
        }
        return recommendations.get(phase, {"action": "UNKNOWN", "description": "", "risk": "UNKNOWN"})
