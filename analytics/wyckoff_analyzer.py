#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Wyckoff Phase Detection —Å Volume Spread Analysis (VSA)
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∑—ã —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: Accumulation, Markup, Distribution, Markdown
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import numpy as np
from dataclasses import dataclass


@dataclass
class WyckoffPhase:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∑—ã Wyckoff"""

    phase: str  # "Accumulation", "Markup", "Distribution", "Markdown", "Unknown"
    confidence: float  # 0-100%
    sub_phase: Optional[str]  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ (PS, SC, AR, ST, SOS, etc.)
    signals: List[str]  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    description: str  # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
    action: str  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ


class WyckoffAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–∑ Wyckoff —Å VSA"""

    def __init__(self, bot):
        from config.settings import logger

        self.logger = logger
        self.bot = bot

        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑
        self.thresholds = {
            "volume_spike": 1.5,  # –û–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 1.5 —Ä–∞–∑–∞
            "spring_range": 0.02,  # 2% –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
            "upthrust_range": 0.02,  # 2% –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞
            "accumulation_range": 0.05,  # 5% –±–æ–∫–æ–≤–∏–∫
            "distribution_range": 0.05,  # 5% –±–æ–∫–æ–≤–∏–∫ –Ω–∞ —Ç–æ–ø–µ
        }

        self.logger.info("‚úÖ WyckoffAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_phase(self, symbol: str, timeframe: str = "60") -> WyckoffPhase:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∑—ã Wyckoff

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (1h, 4h, 1d)

        Returns:
            WyckoffPhase —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ñ–∞–∑–æ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            candles = await self._get_candles(symbol, timeframe, limit=200)
            if not candles:
                return self._unknown_phase("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

            # 2. –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ VSA
            vsa_metrics = self._calculate_vsa_metrics(candles)

            # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self._get_market_data(symbol)

            # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É Wyckoff
            phase = self._detect_phase(candles, vsa_metrics, market_data)

            self.logger.info(
                f"üìä {symbol} Wyckoff Phase: {phase.phase} ({phase.confidence:.1f}%)"
            )
            return phase

        except Exception as e:
            self.logger.error(
                f"Error analyzing Wyckoff phase for {symbol}: {e}", exc_info=True
            )
            return self._unknown_phase(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    async def _get_candles(self, symbol: str, timeframe: str, limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏"""
        try:
            if hasattr(self.bot, "bybit_connector"):
                # ‚úÖ –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–≤–µ—á–µ–π
                await self.bot.bybit_connector.update_klines_cache(
                    symbol, timeframe, limit
                )

                # ‚úÖ –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
                cache_key = f"{symbol}:{timeframe}"
                cache_data = self.bot.bybit_connector.klines_cache.get(cache_key, {})

                # ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –°–ü–ò–°–û–ö –°–í–ï–ß–ï–ô –ò–ó –°–õ–û–í–ê–†–Ø!
                if isinstance(cache_data, dict) and "candles" in cache_data:
                    candles = cache_data["candles"]
                elif isinstance(cache_data, list):
                    candles = cache_data  # –ù–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                else:
                    candles = []

                if candles and len(candles) >= limit:
                    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
                    result = candles[-limit:]
                    self.logger.info(
                        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({timeframe})"
                    )
                    return result
                elif candles:
                    # –ë–µ—Ä—ë–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å
                    self.logger.warning(
                        f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {limit})"
                    )
                    return candles
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                    return []
            else:
                self.logger.error("‚ùå bybit_connector –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return []

        except Exception as e:
            self.logger.error(f"‚ùå Error fetching candles: {e}", exc_info=True)
            return []

    def _calculate_vsa_metrics(self, candles: List[Dict]) -> Dict:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Volume Spread Analysis

        Returns:
            {
                "avg_volume": float,
                "avg_spread": float,
                "current_volume": float,
                "current_spread": float,
                "volume_ratio": float,
                "spread_ratio": float,
                "effort_result": str,  # "no_demand", "no_supply", "normal"
            }
        """
        if len(candles) < 20:
            return {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        volumes = [float(c.get("volume", 0)) for c in candles]
        highs = [float(c.get("high", 0)) for c in candles]
        lows = [float(c.get("low", 0)) for c in candles]
        closes = [float(c.get("close", 0)) for c in candles]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥—ã (high - low)
        spreads = [h - l for h, l in zip(highs, lows)]

        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π)
        avg_volume = np.mean(volumes[-20:])
        avg_spread = np.mean(spreads[-20:])

        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_volume = volumes[-1]
        current_spread = spreads[-1]
        current_close = closes[-1]
        prev_close = closes[-2] if len(closes) > 1 else closes[-1]

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
        spread_ratio = current_spread / avg_spread if avg_spread > 0 else 1.0

        # Effort vs Result (–∫–ª—é—á–µ–≤–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è VSA)
        effort_result = self._analyze_effort_result(
            volume_ratio, spread_ratio, current_close, prev_close
        )

        return {
            "avg_volume": avg_volume,
            "avg_spread": avg_spread,
            "current_volume": current_volume,
            "current_spread": current_spread,
            "volume_ratio": volume_ratio,
            "spread_ratio": spread_ratio,
            "effort_result": effort_result,
            "price_direction": "up" if current_close > prev_close else "down",
        }

    def _analyze_effort_result(
        self,
        volume_ratio: float,
        spread_ratio: float,
        current_close: float,
        prev_close: float,
    ) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ Effort (–æ–±—ä—ë–º) vs Result (–¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã)

        Returns:
            "no_demand" - –Ω–µ—Ç —Å–ø—Ä–æ—Å–∞ (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)
            "no_supply" - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)
            "normal" - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        """
        price_change = (
            (current_close - prev_close) / prev_close if prev_close > 0 else 0
        )

        # No Demand: –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º + —É–∑–∫–∏–π —Å–ø—Ä–µ–¥ + —Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å—Ç—ë—Ç
        if volume_ratio > 1.5 and spread_ratio < 0.8 and price_change < 0.002:
            return "no_demand"

        # No Supply: –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º + —É–∑–∫–∏–π —Å–ø—Ä–µ–¥ + —Ü–µ–Ω–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç
        if volume_ratio > 1.5 and spread_ratio < 0.8 and price_change > -0.002:
            return "no_supply"

        return "normal"

    async def _get_market_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            market_data = {}

            # CVD
            if hasattr(self.bot, "orderbook_analyzer"):
                cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                market_data["cvd"] = cvd_data.get("cvd_pct", 0)

            # L/S Ratio (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞)
            if hasattr(self.bot, "sentiment_cache"):
                sentiment = self.bot.sentiment_cache.get(symbol, {})
                market_data["ls_ratio"] = sentiment.get("ls_ratio", 1.0)

            # Whale Activity
            if hasattr(self.bot, "whale_tracker") and hasattr(
                self.bot.whale_tracker, "get_recent_whales_from_db"
            ):
                try:
                    # ‚úÖ –ë–ï–ó await! –ú–µ—Ç–æ–¥ –ù–ï async!
                    whale_data = self.bot.whale_tracker.get_recent_whales_from_db(
                        symbol=symbol, minutes=5
                    )
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∏—Ç—ã >$100K –≤—Ä—É—á–Ω—É—é
                    if whale_data:
                        whale_data = [
                            w for w in whale_data if w.get("usd_value", 0) >= 100000
                        ]
                    if whale_data:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º net flow (buy - sell)
                        net_flow = sum(
                            w.get("usd_value", 0)
                            * (1 if w.get("side", "").lower() == "buy" else -1)
                            for w in whale_data
                        )
                        market_data["whale_net"] = net_flow
                        self.logger.debug(
                            f"üêã Whale Net Flow {symbol}: ${net_flow:,.0f}"
                        )
                    else:
                        market_data["whale_net"] = 0
                except Exception as e:
                    self.logger.error(f"Error getting whale data: {e}")
                    market_data["whale_net"] = 0
            else:
                market_data["whale_net"] = 0

            return market_data
        except Exception as e:
            self.logger.error(f"Error getting market data: {e}")
            return {}

    def _detect_phase(
        self, candles: List[Dict], vsa_metrics: Dict, market_data: Dict
    ) -> WyckoffPhase:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–∑—É Wyckoff –Ω–∞ –æ—Å–Ω–æ–≤–µ VSA –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not candles or not vsa_metrics:
            return self._unknown_phase("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö VSA")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        closes = [float(c.get("close", 0)) for c in candles[-50:]]
        highs = [float(c.get("high", 0)) for c in candles[-50:]]
        lows = [float(c.get("low", 0)) for c in candles[-50:]]

        current_price = closes[-1]
        range_high = max(highs[-20:])
        range_low = min(lows[-20:])
        price_range = (range_high - range_low) / range_low if range_low > 0 else 0

        # CVD –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        cvd = market_data.get("cvd", 0)
        ls_ratio = market_data.get("ls_ratio", 1.0)
        whale_net = market_data.get("whale_net", 0)
        effort_result = vsa_metrics.get("effort_result", "normal")
        volume_ratio = vsa_metrics.get("volume_ratio", 1.0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π)
        trend = self._determine_trend(closes)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Spring (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑)
        spring_detected = self._detect_spring(candles[-20:], range_low)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Upthrust (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö)
        upthrust_detected = self._detect_upthrust(candles[-20:], range_high)

        signals = []

        # === PHASE A: ACCUMULATION ===
        if (
            price_range < self.thresholds["accumulation_range"]
            and trend in ["down", "sideways"]
            and (effort_result == "no_supply" or cvd > 20)
            and spring_detected
        ):
            signals.append("Spring detected (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑)")
            signals.append(f"CVD: {cvd:+.1f}% (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ)")
            if whale_net > 0:
                signals.append("–ö–∏—Ç—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –ø–æ–∑–∏—Ü–∏–∏")

            return WyckoffPhase(
                phase="Accumulation",
                confidence=min(85 + (cvd / 10), 95),
                sub_phase="Phase A - Spring",
                signals=signals,
                description="–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –∞–∫—Ç–∏–≤ –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–æ—Å—Ç—É.",
                action="üü¢ –ù–ê–ö–ê–ü–õ–ò–í–ê–¢–¨ –ª–æ–Ω–≥-–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö",
            )

        # === PHASE B: MARKUP ===
        if (
            trend == "up"
            and volume_ratio > 1.2
            and cvd > 20
            and current_price > range_high * 1.01
        ):
            signals.append("–ü—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å –æ–±—ä—ë–º–æ–º")
            signals.append(f"CVD: {cvd:+.1f}% (—Å–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞)")
            signals.append(f"Volume Ratio: {volume_ratio:.2f}x")

            return WyckoffPhase(
                phase="Markup",
                confidence=min(80 + (volume_ratio * 5), 95),
                sub_phase="Phase B - Sign of Strength (SOS)",
                signals=signals,
                description="–£–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã. –§–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∞–ª—Å—è –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥.",
                action="üü¢ –î–ï–†–ñ–ê–¢–¨ –ª–æ–Ω–≥–∏, –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
            )

        # PHASE C: DISTRIBUTION
        if (
            price_range < self.thresholds["distribution_range"]
            and trend in ["up", "sideways"]
            and current_price > max(closes[-100:]) * 0.90
            and (
                effort_result == "no_demand"
                or (ls_ratio < 0.5 and whale_net < -50000)
                or (cvd < -50 and whale_net < -50000)
            )
        ):
            signals.append(f"–ë–æ–∫–æ–≤–∏–∫ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö ({price_range*100:.1f}%)")

            if ls_ratio < 0.5:
                signals.append(
                    f"L/S Ratio: {ls_ratio:.2f} (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –≤ —à–æ—Ä—Ç—ã)"
                )

            if cvd < -50:
                signals.append(f"CVD: {cvd:+.1f}% (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞)")

            if whale_net < -50000:
                signals.append(f"–ö–∏—Ç—ã –ø—Ä–æ–¥–∞—é—Ç (Net: ${whale_net:,.0f})")

            if upthrust_detected:
                signals.append("‚ö†Ô∏è Upthrust detected (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö)")

            confidence = 70
            if abs(cvd) > 50:
                confidence += 10
            if abs(whale_net) > 50000:
                confidence += abs(whale_net) / 10000
            if upthrust_detected:
                confidence += 5

            return WyckoffPhase(
                phase="Distribution",
                confidence=min(confidence, 92),
                sub_phase="Phase C - Distribution Zone",
                signals=signals,
                description="–£–º–Ω—ã–µ –¥–µ–Ω—å–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç –∞–∫—Ç–∏–≤. –°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.",
                action="üî¥ –§–ò–ö–°–ò–†–û–í–ê–¢–¨ –ø—Ä–∏–±—ã–ª—å, –≥–æ—Ç–æ–≤–∏—Ç—å —à–æ—Ä—Ç—ã",
            )

        # === PHASE D: MARKDOWN ===
        if (
            trend == "down"
            and volume_ratio > 1.2
            and cvd < -20
            and current_price < range_low * 0.99
        ):
            signals.append("–ü—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –æ–±—ä—ë–º–æ–º")
            signals.append(f"CVD: {cvd:+.1f}% (—Å–∏–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞)")
            signals.append(f"Volume Ratio: {volume_ratio:.2f}x")

            return WyckoffPhase(
                phase="Markdown",
                confidence=min(80 + (volume_ratio * 5), 95),
                sub_phase="Phase D - Last Point of Supply (LPSY)",
                signals=signals,
                description="–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è –¥–æ –Ω–æ–≤–æ–π –∑–æ–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.",
                action="üî¥ –®–û–†–¢–ò–¢–¨ –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –∫—ç—à, –∂–¥–∞—Ç—å Phase A",
            )

        # === UNKNOWN / TRANSITION ===
        signals.append(f"Price Range: {price_range*100:.1f}%")
        signals.append(f"Trend: {trend}")
        signals.append(f"Effort-Result: {effort_result}")

        return WyckoffPhase(
            phase="Unknown",
            confidence=40,
            sub_phase="Transition Zone",
            signals=signals,
            description="–†—ã–Ω–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            action="‚ö™ –ù–ê–ë–õ–Æ–î–ê–¢–¨, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
        )

    def _determine_trend(self, closes: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 50 —Å–≤–µ—á–∞–º"""
        if len(closes) < 50:
            return "unknown"

        # –ü—Ä–æ—Å—Ç–∞—è SMA
        sma_20 = np.mean(closes[-20:])
        sma_50 = np.mean(closes[-50:])

        current_price = closes[-1]

        if current_price > sma_20 > sma_50:
            return "up"
        elif current_price < sma_20 < sma_50:
            return "down"
        else:
            return "sideways"

    def _detect_spring(self, candles: List[Dict], range_low: float) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å Spring (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑)"""
        if len(candles) < 5:
            return False

        lows = [float(c.get("low", 0)) for c in candles]
        closes = [float(c.get("close", 0)) for c in candles]

        # Spring: low –ø—Ä–æ–±–∏–≤–∞–µ—Ç range_low, –Ω–æ close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ
        for i in range(-5, 0):
            if lows[i] < range_low * (1 - self.thresholds["spring_range"]):
                if closes[i] > range_low:
                    return True

        return False

    def _detect_upthrust(self, candles: List[Dict], range_high: float) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å Upthrust (–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö)"""
        if len(candles) < 5:
            return False

        highs = [float(c.get("high", 0)) for c in candles]
        closes = [float(c.get("close", 0)) for c in candles]

        # Upthrust: high –ø—Ä–æ–±–∏–≤–∞–µ—Ç range_high, –Ω–æ close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ
        for i in range(-5, 0):
            if highs[i] > range_high * (1 + self.thresholds["upthrust_range"]):
                if closes[i] < range_high:
                    return True

        return False

    def _unknown_phase(self, reason: str = "") -> WyckoffPhase:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Unknown —Ñ–∞–∑—É"""
        return WyckoffPhase(
            phase="Unknown",
            confidence=0,
            sub_phase=None,
            signals=[reason] if reason else [],
            description="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–∑—É Wyckoff",
            action="‚ö™ –î–æ–∂–¥–∏—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        )
