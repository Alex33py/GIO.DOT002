# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç EMA crossover –∏ MACD –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional

from config.settings import logger
from config.constants import TrendDirectionEnum
from utils.data_validator import DataValidator


class MultiTimeframeTrendDetector:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ 1H, 4H, 1D —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è detector"""
        self.timeframes = {
            '1h': {'ema_fast': 12, 'ema_slow': 26},
            '4h': {'ema_fast': 12, 'ema_slow': 26},
            '1d': {'ema_fast': 12, 'ema_slow': 26}
        }

        # ‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ö—ç—à –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
        self.trend_cache = {}

        logger.info("‚úÖ MultiTimeframeTrendDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def detect_trends(
        self,
        candles_1h: pd.DataFrame,
        candles_4h: pd.DataFrame,
        candles_1d: pd.DataFrame
    ) -> Dict[str, TrendDirectionEnum]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            candles_1h: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ 1H
            candles_4h: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ 4H
            candles_1d: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ 1D

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ª–æ–≤–∞—Ä—å {timeframe: trend_direction}
        """
        try:
            trends = {}

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            candles_1h = DataValidator.clean_dataframe(candles_1h)
            candles_4h = DataValidator.clean_dataframe(candles_4h)
            candles_1d = DataValidator.clean_dataframe(candles_1d)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¢–§
            if not candles_1h.empty:
                trends['trend_1h'] = self._detect_trend(candles_1h, '1h')
            else:
                trends['trend_1h'] = TrendDirectionEnum.NEUTRAL

            if not candles_4h.empty:
                trends['trend_4h'] = self._detect_trend(candles_4h, '4h')
            else:
                trends['trend_4h'] = TrendDirectionEnum.NEUTRAL

            if not candles_1d.empty:
                trends['trend_1d'] = self._detect_trend(candles_1d, '1d')
            else:
                trends['trend_1d'] = TrendDirectionEnum.NEUTRAL

            logger.debug(
                f"üìà –¢—Ä–µ–Ω–¥—ã: 1H={trends['trend_1h'].value}, "
                f"4H={trends['trend_4h'].value}, "
                f"1D={trends['trend_1d'].value}"
            )

            return trends

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {
                'trend_1h': TrendDirectionEnum.NEUTRAL,
                'trend_4h': TrendDirectionEnum.NEUTRAL,
                'trend_1d': TrendDirectionEnum.NEUTRAL
            }

    def _detect_trend(
        self,
        df: pd.DataFrame,
        timeframe: str
    ) -> TrendDirectionEnum:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        –õ–æ–≥–∏–∫–∞:
        1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA (fast –∏ slow)
        2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD histogram
        3. –ï—Å–ª–∏ EMA_fast > EMA_slow –ò MACD > 0 ‚Üí BULLISH
        4. –ï—Å–ª–∏ EMA_fast < EMA_slow –ò MACD < 0 ‚Üí BEARISH
        5. –ò–Ω–∞—á–µ ‚Üí NEUTRAL
        """
        try:
            if df.empty or len(df) < 30:
                return TrendDirectionEnum.NEUTRAL

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã EMA
            params = self.timeframes.get(timeframe, {'ema_fast': 12, 'ema_slow': 26})
            ema_fast_period = params['ema_fast']
            ema_slow_period = params['ema_slow']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df = df.copy()
            df['ema_fast'] = df['close'].ewm(span=ema_fast_period, adjust=False).mean()
            df['ema_slow'] = df['close'].ewm(span=ema_slow_period, adjust=False).mean()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
            df['macd'] = df['ema_fast'] - df['ema_slow']
            df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            last = df.iloc[-1]

            ema_fast = last['ema_fast']
            ema_slow = last['ema_slow']
            macd_hist = last['macd_histogram']

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if ema_fast > ema_slow and macd_hist > 0:
                return TrendDirectionEnum.BULLISH
            elif ema_fast < ema_slow and macd_hist < 0:
                return TrendDirectionEnum.BEARISH
            else:
                return TrendDirectionEnum.NEUTRAL

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {timeframe}: {e}")
            return TrendDirectionEnum.NEUTRAL

    def calculate_trend_strength(
        self,
        df: pd.DataFrame,
        timeframe: str
    ) -> float:
        """
        –†–∞—Å—á—ë—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (0.0 - 1.0)

        –õ–æ–≥–∏–∫–∞:
        - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA fast –∏ slow
        - –í–µ–ª–∏—á–∏–Ω–∞ MACD histogram
        - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π)
        """
        try:
            if df.empty or len(df) < 30:
                return 0.5

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'ema_fast' not in df.columns:
                params = self.timeframes.get(timeframe, {'ema_fast': 12, 'ema_slow': 26})
                df = df.copy()
                df['ema_fast'] = df['close'].ewm(span=params['ema_fast'], adjust=False).mean()
                df['ema_slow'] = df['close'].ewm(span=params['ema_slow'], adjust=False).mean()
                df['macd'] = df['ema_fast'] - df['ema_slow']
                df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()
                df['macd_histogram'] = df['macd'] - df['macd_signal']

            last = df.iloc[-1]

            # 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
            ema_distance = abs(last['ema_fast'] - last['ema_slow']) / last['close']
            ema_score = min(ema_distance * 100, 1.0)  # 0-1

            # 2. –í–µ–ª–∏—á–∏–Ω–∞ MACD histogram (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
            macd_magnitude = abs(last['macd_histogram']) / last['close']
            macd_score = min(macd_magnitude * 1000, 1.0)  # 0-1

            # 3. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π)
            last_10 = df.tail(10)
            bullish_count = sum(1 for _, row in last_10.iterrows() if row['ema_fast'] > row['ema_slow'])
            consistency_score = abs((bullish_count / 10) - 0.5) * 2  # 0-1

            # –û–±—â–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
            strength = (ema_score * 0.4 + macd_score * 0.3 + consistency_score * 0.3)

            return round(strength, 3)

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞: {e}")
            return 0.5

    def get_mtf_alignment(
        self,
        trends: Dict[str, TrendDirectionEnum]
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        """
        try:
            trend_1h = trends.get('trend_1h', TrendDirectionEnum.NEUTRAL)
            trend_4h = trends.get('trend_4h', TrendDirectionEnum.NEUTRAL)
            trend_1d = trends.get('trend_1d', TrendDirectionEnum.NEUTRAL)

            trend_list = [trend_1h, trend_4h, trend_1d]

            # –ü–æ–¥—Å—á—ë—Ç
            bullish_count = sum(1 for t in trend_list if t == TrendDirectionEnum.BULLISH)
            bearish_count = sum(1 for t in trend_list if t == TrendDirectionEnum.BEARISH)
            neutral_count = sum(1 for t in trend_list if t == TrendDirectionEnum.NEUTRAL)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if bullish_count == 3:
                alignment = "full_bullish"
                score = 1.0
            elif bearish_count == 3:
                alignment = "full_bearish"
                score = 1.0
            elif bullish_count >= 2:
                alignment = "majority_bullish"
                score = 0.7
            elif bearish_count >= 2:
                alignment = "majority_bearish"
                score = 0.7
            else:
                alignment = "mixed"
                score = 0.3

            return {
                "alignment": alignment,
                "score": score,
                "bullish_count": bullish_count,
                "bearish_count": bearish_count,
                "neutral_count": neutral_count,
                "trends": {
                    "1h": trend_1h.value,
                    "4h": trend_4h.value,
                    "1d": trend_1d.value
                }
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ MTF alignment: {e}")
            return {
                "alignment": "unknown",
                "score": 0.0,
                "bullish_count": 0,
                "bearish_count": 0,
                "neutral_count": 3
            }

    # ========================================================================
    # ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø 100/100 - –î–û–ë–ê–í–ò–¢–¨ –ó–î–ï–°–¨!
    # ========================================================================

    def check_mtf_alignment(self, symbol: str, candles_data: Dict = None) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö

        Args:
            symbol: –°–∏–º–≤–æ–ª (BTCUSDT)
            candles_data: {
                '1H': [...],  # List of dicts –∏–ª–∏ DataFrame
                '4H': [...],
                '1D': [...]
            }

        Returns:
            {
                'aligned': bool,
                'direction': 'LONG' | 'SHORT' | 'NEUTRAL',
                'strength': 0-100,
                'trends': {'1H': ..., '4H': ..., '1D': ...},
                'agreement_score': 0-100,
                'recommendation': str
            }
        """
        try:
            timeframes = ['1H', '4H', '1D']
            trends = {}

            # –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            for tf in timeframes:
                if candles_data and tf in candles_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    trend = self._analyze_trend_from_candles(candles_data[tf])
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
                    trend = self.get_trend(symbol, tf)

                trends[tf] = trend

            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            uptrends = sum(1 for t in trends.values() if t == 'UPTREND')
            downtrends = sum(1 for t in trends.values() if t == 'DOWNTREND')
            neutrals = sum(1 for t in trends.values() if t == 'NEUTRAL')

            total_tf = len(timeframes)

            # Perfect alignment (–≤—Å–µ 3 TF –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
            if uptrends == total_tf:
                return {
                    'aligned': True,
                    'direction': 'LONG',
                    'strength': 100,
                    'trends': trends,
                    'agreement_score': 100,
                    'recommendation': 'üü¢ STRONG BUY - All timeframes bullish'
                }

            if downtrends == total_tf:
                return {
                    'aligned': True,
                    'direction': 'SHORT',
                    'strength': 100,
                    'trends': trends,
                    'agreement_score': 100,
                    'recommendation': 'üî¥ STRONG SELL - All timeframes bearish'
                }

            # Partial alignment (2 –∏–∑ 3 TF —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã)
            if uptrends == 2:
                agreement = (uptrends / total_tf) * 100
                return {
                    'aligned': True,
                    'direction': 'LONG',
                    'strength': 70,
                    'trends': trends,
                    'agreement_score': agreement,
                    'recommendation': 'üü° MODERATE BUY - 2 timeframes bullish'
                }

            if downtrends == 2:
                agreement = (downtrends / total_tf) * 100
                return {
                    'aligned': True,
                    'direction': 'SHORT',
                    'strength': 70,
                    'trends': trends,
                    'agreement_score': agreement,
                    'recommendation': 'üü† MODERATE SELL - 2 timeframes bearish'
                }

            # No alignment (mixed or all neutral)
            if neutrals >= 2:
                return {
                    'aligned': False,
                    'direction': 'NEUTRAL',
                    'strength': 30,
                    'trends': trends,
                    'agreement_score': 30,
                    'recommendation': '‚ö™ WAIT - Market indecisive'
                }

            # Conflicting signals (1 up, 1 down, 1 neutral)
            return {
                'aligned': False,
                'direction': 'NEUTRAL',
                'strength': 40,
                'trends': trends,
                'agreement_score': 40,
                'recommendation': '‚ö†Ô∏è CAUTION - Conflicting timeframes'
            }

        except Exception as e:
            logger.error(f"‚ùå check_mtf_alignment error: {e}")
            return {
                'aligned': False,
                'direction': 'NEUTRAL',
                'strength': 0,
                'trends': {},
                'agreement_score': 0,
                'recommendation': '‚ùå ERROR'
            }

    def _analyze_trend_from_candles(self, candles) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–≤–µ—á–µ–π

        Args:
            candles: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π [{open, high, low, close, volume}, ...] –∏–ª–∏ DataFrame

        Returns:
            'UPTREND' | 'DOWNTREND' | 'NEUTRAL'
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DataFrame –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(candles, list):
                if not candles or len(candles) < 20:
                    return 'NEUTRAL'
                df = pd.DataFrame(candles)
            elif isinstance(candles, pd.DataFrame):
                df = candles
            else:
                return 'NEUTRAL'

            if df.empty or len(df) < 20:
                return 'NEUTRAL'

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
            recent = df.tail(20)

            # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: —Å—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            first_close = float(recent.iloc[0]['close'])
            last_close = float(recent.iloc[-1]['close'])

            if last_close > first_close * 1.02:  # +2%
                return 'UPTREND'
            elif last_close < first_close * 0.98:  # -2%
                return 'DOWNTREND'
            else:
                return 'NEUTRAL'

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è _analyze_trend_from_candles error: {e}")
            return 'NEUTRAL'

    def get_trend(self, symbol: str, timeframe: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ –∫—ç—à–∞

        Args:
            symbol: BTCUSDT, ETHUSDT, etc.
            timeframe: 1H, 4H, 1D

        Returns:
            'UPTREND' | 'DOWNTREND' | 'NEUTRAL'
        """
        try:
            cache_key = f"{symbol}_{timeframe}"

            if cache_key in self.trend_cache:
                cached_trend = self.trend_cache[cache_key]

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TrendDirectionEnum –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if isinstance(cached_trend, TrendDirectionEnum):
                    if cached_trend == TrendDirectionEnum.BULLISH:
                        return 'UPTREND'
                    elif cached_trend == TrendDirectionEnum.BEARISH:
                        return 'DOWNTREND'
                    else:
                        return 'NEUTRAL'

                return cached_trend

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≤–µ—Ä–Ω—É—Ç—å NEUTRAL
            return 'NEUTRAL'

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è get_trend error: {e}")
            return 'NEUTRAL'

    # ========================================================================
    # –ö–û–ù–ï–¶ –ù–û–í–´–• –ú–ï–¢–û–î–û–í
    # ========================================================================


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['MultiTimeframeTrendDetector']
