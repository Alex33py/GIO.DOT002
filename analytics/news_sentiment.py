#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
News Sentiment Analyzer –¥–ª—è GIO Bot
–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º sentiment —á–µ—Ä–µ–∑ AI
"""

import requests
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from config.settings import logger
import os
import hashlib


class NewsSentimentAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä sentiment –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
    """

    def __init__(self, gemini_interpreter=None):
        """
        Args:
            gemini_interpreter: –≠–∫–∑–µ–º–ø–ª—è—Ä GeminiInterpreter –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        """
        self.gemini = gemini_interpreter

        # CryptoCompare API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API key –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
        self.cryptocompare_url = "https://min-api.cryptocompare.com/data/v2/news/"

        # –ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π
        self.cache = {}
        self.cache_duration = 600  # 10 –º–∏–Ω—É—Ç

        logger.info("‚úÖ NewsSentimentAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def get_latest_news(self, hours: int = 6, limit: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö

        Args:
            hours: –ü–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π (—á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"news_{hours}h"
            if self._is_cached(cache_key):
                logger.debug(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π ({hours}h)")
                return self.cache[cache_key]

            # –ó–∞–ø—Ä–æ—Å –∫ CryptoCompare
            params = {"lang": "EN", "sortOrder": "latest"}

            response = requests.get(self.cryptocompare_url, params=params, timeout=10)

            if response.status_code != 200:
                logger.error(f"‚ùå CryptoCompare API error: {response.status_code}")
                return []

            data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û Response, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Message
            if data.get("Response") == "Error":
                logger.error(
                    f"‚ùå CryptoCompare response error: {data.get('Message', 'Unknown error')}"
                )
                return []

            # ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º Message –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if "Message" in data:
                logger.info(f"‚úÖ CryptoCompare: {data['Message']}")

            raw_news = data.get("Data", [])

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_time = datetime.now() - timedelta(hours=hours)
            cutoff_timestamp = int(cutoff_time.timestamp())

            filtered_news = []
            for item in raw_news:
                published_on = item.get("published_on", 0)

                if published_on >= cutoff_timestamp:
                    news_item = {
                        "id": item.get("id"),
                        "title": item.get("title", "No title"),
                        "body": item.get("body", "")[:200],  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                        "url": item.get("url", ""),
                        "source": item.get("source", "Unknown"),
                        "published_at": datetime.fromtimestamp(published_on),
                        "categories": item.get("categories", "").split("|"),
                        "sentiment": None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ AI –∞–Ω–∞–ª–∏–∑–æ–º
                    }
                    filtered_news.append(news_item)

                    if len(filtered_news) >= limit:
                        break

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = filtered_news

            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {hours}h")

            return filtered_news

        except Exception as e:
            logger.error(f"‚ùå get_latest_news error: {e}", exc_info=True)
            return []

    async def analyze_sentiment(self, news_list: List[Dict]) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç sentiment –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ AI

        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º sentiment
        """
        try:
            if not self.gemini:
                logger.warning("‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º rule-based sentiment")
                return self._rule_based_sentiment(news_list)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ Gemini
            for news in news_list:
                try:
                    # ‚úÖ –ö–≠–®–ò–†–£–ï–ú –ü–û MD5 –•–≠–®–£ –ó–ê–ì–û–õ–û–í–ö–ê (–î–ï–¢–ï–†–ú–ò–ù–ò–°–¢–ò–ß–ù–´–ô!)
                    cache_key = (
                        f"sentiment_{hashlib.md5(news['title'].encode()).hexdigest()}"
                    )

                    if cache_key in self.cache:
                        news["sentiment"] = self.cache[cache_key]["sentiment"]
                        news["sentiment_emoji"] = self.cache[cache_key]["emoji"]
                        logger.debug(
                            f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à sentiment –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {news['title'][:50]}..."
                        )
                        continue

                    prompt = f"""Analyze the sentiment of this crypto news headline:

            Title: {news['title']}

            Respond with ONLY ONE WORD: BULLISH, BEARISH, or NEUTRAL"""

                    sentiment_raw = await self.gemini.interpret_text(prompt)

                    if sentiment_raw:
                        sentiment_text = (
                            sentiment_raw.strip().upper()
                            if isinstance(sentiment_raw, str)
                            else str(sentiment_raw).strip().upper()
                        )

                        if "BULLISH" in sentiment_text:
                            news["sentiment"] = "BULLISH"
                            news["sentiment_emoji"] = "üü¢"
                        elif "BEARISH" in sentiment_text:
                            news["sentiment"] = "BEARISH"
                            news["sentiment_emoji"] = "üî¥"
                        else:
                            news["sentiment"] = "NEUTRAL"
                            news["sentiment_emoji"] = "üü°"

                        # ‚úÖ –ö–≠–®–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
                        self.cache[cache_key] = {
                            "sentiment": news["sentiment"],
                            "emoji": news["sentiment_emoji"],
                        }
                    else:
                        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú RULE-BASED FALLBACK –ò –ö–≠–®–ò–†–£–ï–ú
                        sentiment = self._rule_based_sentiment_single(news["title"])
                        news["sentiment"] = sentiment["sentiment"]
                        news["sentiment_emoji"] = sentiment["emoji"]

                        # ‚úÖ –ö–≠–®–ò–†–£–ï–ú FALLBACK –†–ï–ó–£–õ–¨–¢–ê–¢
                        self.cache[cache_key] = {
                            "sentiment": news["sentiment"],
                            "emoji": news["sentiment_emoji"],
                        }


                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è AI sentiment failed for news, using fallback: {e}")
                    news["sentiment"] = "NEUTRAL"
                    news["sentiment_emoji"] = "üü°"

            return news_list

        except Exception as e:
            logger.error(f"‚ùå analyze_sentiment error: {e}", exc_info=True)
            return self._rule_based_sentiment(news_list)

    def _rule_based_sentiment(self, news_list: List[Dict]) -> List[Dict]:
        """
        –ü—Ä–æ—Å—Ç–æ–π rule-based sentiment –∞–Ω–∞–ª–∏–∑ (—Ñ–æ–ª–ª–±—ç–∫)
        """
        bullish_keywords = [
            "surge",
            "rally",
            "gain",
            "rise",
            "bull",
            "adoption",
            "breakthrough",
            "approval",
            "launch",
            "partnership",
        ]

        bearish_keywords = [
            "crash",
            "drop",
            "fall",
            "bear",
            "concern",
            "risk",
            "decline",
            "plunge",
            "regulatory",
            "hack",
            "scam",
        ]

        for news in news_list:
            title_lower = news["title"].lower()

            bullish_score = sum(1 for word in bullish_keywords if word in title_lower)
            bearish_score = sum(1 for word in bearish_keywords if word in title_lower)

            if bullish_score > bearish_score:
                news["sentiment"] = "BULLISH"
                news["sentiment_emoji"] = "üü¢"
            elif bearish_score > bullish_score:
                news["sentiment"] = "BEARISH"
                news["sentiment_emoji"] = "üî¥"
            else:
                news["sentiment"] = "NEUTRAL"
                news["sentiment_emoji"] = "üü°"

        return news_list

    def _rule_based_sentiment_single(self, title: str) -> Dict:
        """
        –ü—Ä–æ—Å—Ç–æ–π rule-based sentiment –¥–ª—è –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        """
        bullish_keywords = [
            "surge", "rally", "gain", "rise", "bull", "adoption",
            "breakthrough", "approval", "launch", "partnership",
        ]

        bearish_keywords = [
            "crash", "drop", "fall", "bear", "concern", "risk",
            "decline", "plunge", "regulatory", "hack", "scam",
        ]

        title_lower = title.lower()

        bullish_score = sum(1 for word in bullish_keywords if word in title_lower)
        bearish_score = sum(1 for word in bearish_keywords if word in title_lower)

        if bullish_score > bearish_score:
            return {"sentiment": "BULLISH", "emoji": "üü¢"}
        elif bearish_score > bullish_score:
            return {"sentiment": "BEARISH", "emoji": "üî¥"}
        else:
            return {"sentiment": "NEUTRAL", "emoji": "üü°"}


    def calculate_overall_sentiment(self, news_list: List[Dict]) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π sentiment —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            {
                'overall': 'BULLISH' | 'BEARISH' | 'NEUTRAL',
                'score': float (-1.0 to 1.0),
                'bullish_count': int,
                'bearish_count': int,
                'neutral_count': int
            }
        """
        try:
            if not news_list:
                return {
                    "overall": "NEUTRAL",
                    "score": 0.0,
                    "bullish_count": 0,
                    "bearish_count": 0,
                    "neutral_count": 0,
                }

            bullish_count = sum(1 for n in news_list if n.get("sentiment") == "BULLISH")
            bearish_count = sum(1 for n in news_list if n.get("sentiment") == "BEARISH")
            neutral_count = sum(1 for n in news_list if n.get("sentiment") == "NEUTRAL")

            total = len(news_list)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score –æ—Ç -1 (bearish) –¥–æ +1 (bullish)
            score = (bullish_count - bearish_count) / total if total > 0 else 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º overall sentiment
            if score > 0.3:
                overall = "BULLISH"
            elif score < -0.3:
                overall = "BEARISH"
            else:
                overall = "NEUTRAL"

            return {
                "overall": overall,
                "score": round(score, 2),
                "bullish_count": bullish_count,
                "bearish_count": bearish_count,
                "neutral_count": neutral_count,
            }

        except Exception as e:
            logger.error(f"calculate_overall_sentiment error: {e}")
            return {
                "overall": "NEUTRAL",
                "score": 0.0,
                "bullish_count": 0,
                "bearish_count": 0,
                "neutral_count": 0,
            }

    async def generate_detailed_ai_interpretation(
        self,
        news_list: List[Dict],
        overall: Dict,
        symbol: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –î–ï–¢–ê–õ–¨–ù–£–Æ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Gemini

        Args:
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å sentiment
            overall: –û–±—â–∏–π sentiment (–∏–∑ calculate_overall_sentiment)
            symbol: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å Summary, Key Insights, Trading Implications
        """
        try:
            if not self.gemini:
                logger.warning("‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
                return self._fallback_detailed_interpretation(overall)

            # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π (—Ç–æ–ø-10)
            news_context_lines = []
            for i, news in enumerate(news_list[:10], 1):
                sentiment = news.get('sentiment', 'NEUTRAL')
                title = news['title'][:100]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
                source = news.get('source', 'Unknown')

                news_context_lines.append(f"{i}. [{sentiment}] {title} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")

            news_context = "\n".join(news_context_lines)

            # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–∏–º–≤–æ–ª–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            symbol_focus = ""
            if symbol:
                # –£–±–∏—Ä–∞–µ–º "USDT" –∏–∑ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                clean_symbol = symbol.replace("USDT", "").replace("BUSD", "")
                symbol_focus = f" —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ {clean_symbol}"

            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è Gemini
            prompt = f"""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏{symbol_focus} –∏ –¥–∞–π –î–ï–¢–ê–õ–¨–ù–£–Æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

    –ù–û–í–û–°–¢–ò:
    {news_context}

    –û–ë–©–ò–ô SENTIMENT:
    - –ë—ã—á—å–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {overall.get('bullish_count', 0)}
    - –ú–µ–¥–≤–µ–∂—å–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {overall.get('bearish_count', 0)}
    - –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {overall.get('neutral_count', 0)}
    - –°—Ä–µ–¥–Ω–∏–π score: {overall.get('score', 0):.2f} (–æ—Ç -1.0 –¥–æ +1.0)

    –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –°–¢–†–û–ì–û –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

    üìù Summary:
    [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã? –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫—Ä–∏–ø—Ç–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏?]

    üí° Key Insights:
    ‚Ä¢ [–ò–Ω—Å–∞–π—Ç 1 ‚Äî —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ]
    ‚Ä¢ [–ò–Ω—Å–∞–π—Ç 2 ‚Äî –≤—Ç–æ—Ä–æ–µ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏]
    ‚Ä¢ [–ò–Ω—Å–∞–π—Ç 3 ‚Äî —Ç—Ä–µ—Ç—å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ]

    üéØ Trading Implications:
    [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é. –ö–∞–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏?]

    –í–ê–ñ–ù–û:
    - –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 400 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –≤—Å—ë)
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
    - –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–≤–æ–¥–∞—Ö –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ä–æ–¥–µ "üìù Summary:" –≤ —Ç–µ–∫—Å—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"""

            # 4. –í—ã–∑—ã–≤–∞–µ–º Gemini API
            ai_response = await self.gemini.analyze_text(prompt)

            if ai_response and len(ai_response.strip()) > 50:
                # ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini
                logger.info(f"‚úÖ Gemini –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤)")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                return self._format_ai_interpretation(ai_response, overall)
            else:
                # ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                logger.warning("‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π/–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._fallback_detailed_interpretation(overall)

        except Exception as e:
            logger.error(f"‚ùå generate_detailed_ai_interpretation error: {e}", exc_info=True)
            return self._fallback_detailed_interpretation(overall)


    def _format_ai_interpretation(self, ai_response: str, overall: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç AI –æ—Ç–≤–µ—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º market impact –∏ risk –Ω–∞ –æ—Å–Ω–æ–≤–µ overall sentiment
            score = overall.get('score', 0)

            if score > 0.5:
                impact = "Bullish"
                impact_score = int(60 + (score * 40))  # 60-100
                risk = "Medium-Low"
            elif score > 0.2:
                impact = "Slightly Bullish"
                impact_score = int(55 + (score * 25))  # 55-65
                risk = "Medium"
            elif score < -0.5:
                impact = "Bearish"
                impact_score = int(40 - (abs(score) * 40))  # 0-40
                risk = "Medium-High"
            elif score < -0.2:
                impact = "Slightly Bearish"
                impact_score = int(45 - (abs(score) * 25))  # 35-45
                risk = "Medium"
            else:
                impact = "Neutral"
                impact_score = 50
                risk = "Medium"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            lines = [
                "ü§ñ AI INTERPRETATION",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                ai_response.strip(),
                "",
                f"‚û°Ô∏è Market Impact: {impact} ({impact_score}/100)",
                "",
                f"üü° Risk: {risk}",
                "",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ]

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"‚ùå _format_ai_interpretation error: {e}")
            return self._fallback_detailed_interpretation(overall)


    def _fallback_detailed_interpretation(self, overall: Dict) -> str:
        """–ë–∞–∑–æ–≤–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            score = overall.get('score', 0)
            bullish_count = overall.get('bullish_count', 0)
            bearish_count = overall.get('bearish_count', 0)
            neutral_count = overall.get('neutral_count', 0)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º sentiment
            if score > 0.3:
                sentiment_emoji = "üü¢"
                sentiment_text = "–ë—ã—á–∏–π"
                action = "üöÄ –†–∞—Å—Å–º–æ—Ç—Ä–∏ –ª–æ–Ω–≥-–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–∏–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö"
            elif score < -0.3:
                sentiment_emoji = "üî¥"
                sentiment_text = "–ú–µ–¥–≤–µ–∂–∏–π"
                action = "‚è∏Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –ª–æ–Ω–≥–∞–º–∏, –≤–æ–∑–º–æ–∂–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–∞–¥–µ–Ω–∏—è"
            else:
                sentiment_emoji = "üü°"
                sentiment_text = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
                action = "‚è∏Ô∏è –û–∂–∏–¥–∞–π –±–æ–ª–µ–µ —á—ë—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–π"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º market impact
            if abs(score) > 0.5:
                impact = "Strong" if score > 0 else "Strong Bearish"
                impact_score = int(50 + (score * 50))
            else:
                impact = "Neutral"
                impact_score = 50

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º risk
            risk = "High" if abs(score) > 0.6 else "Medium" if abs(score) > 0.3 else "Low"

            lines = [
                "ü§ñ AI INTERPRETATION",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                f"üìù Summary:",
                f"–ê–Ω–∞–ª–∏–∑ {bullish_count + bearish_count + neutral_count} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {sentiment_text.lower()} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ ({sentiment_emoji}). "
                f"–ë—ã—á—å–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {bullish_count}, –º–µ–¥–≤–µ–∂—å–∏—Ö: {bearish_count}, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {neutral_count}.",
                "",
                f"üí° Key Insights:",
                f"  ‚Ä¢ –û–±—â–∏–π sentiment score: {score:+.2f} (–æ—Ç -1.0 –¥–æ +1.0)",
                f"  ‚Ä¢ {'–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏' if score > 0 else '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏' if score < 0 else '–ë–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π'}",
                f"  ‚Ä¢ {'–†—ã–Ω–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ' if score > 0.3 else '–†—ã–Ω–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ' if score < -0.3 else '–†—ã–Ω–æ–∫ –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏'}",
                "",
                f"üéØ Trading Implications:",
                f"–†—ã–Ω–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç {sentiment_text.lower()} –Ω–∞—Å—Ç—Ä–æ–π. {action}.",
                "",
                f"‚û°Ô∏è Market Impact: {impact} ({impact_score}/100)",
                "",
                f"üü° Risk: {risk}",
                "",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            ]

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"‚ùå _fallback_detailed_interpretation error: {e}")
            return """ü§ñ AI INTERPRETATION
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

    ‚û°Ô∏è Market Impact: Neutral (50/100)

    üü° Risk: Medium

    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""


    def _is_cached(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        if key not in self.cache:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
        # (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å timestamp tracking)
        return True

    def format_news_report(self, news_list: List[Dict], overall: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –¥–ª—è Telegram"""
        if not news_list:
            return "üì∞ –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"

        lines = []
        lines.append("üì∞ **CRYPTO NEWS SENTIMENT**")
        lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

        # Overall sentiment
        overall_emoji = (
            "üü¢"
            if overall["overall"] == "BULLISH"
            else "üî¥" if overall["overall"] == "BEARISH" else "üü°"
        )
        lines.append(
            f"üìä **Overall Market Sentiment:** {overall_emoji} **{overall['overall']}**"
        )
        lines.append(f"‚îú‚îÄ Score: {overall['score']:+.2f}")
        lines.append(
            f"‚îú‚îÄ Bullish: {overall['bullish_count']} | Bearish: {overall['bearish_count']}"
        )
        lines.append(f"‚îî‚îÄ Neutral: {overall['neutral_count']}\n")

        lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")

        # –¢–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π
        lines.append("üì∞ **LATEST NEWS:**\n")

        for i, news in enumerate(news_list[:5], 1):
            emoji = news.get("sentiment_emoji", "üü°")
            title = news["title"][:80]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            source = news.get("source", "Unknown")

            time_ago = self._time_ago(news["published_at"])

            lines.append(f"{emoji} **{title}...**")
            lines.append(f"‚îú‚îÄ Source: {source}")
            lines.append(f"‚îî‚îÄ {time_ago}\n")

        return "\n".join(lines)

    

    def _time_ago(self, dt: datetime) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É 'X hours ago'"""
        delta = datetime.now() - dt

        if delta.days > 0:
            return f"{delta.days}d ago"
        elif delta.seconds >= 3600:
            hours = delta.seconds // 3600
            return f"{hours}h ago"
        else:
            minutes = delta.seconds // 60
            return f"{minutes}m ago"
