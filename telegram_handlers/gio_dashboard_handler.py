#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GIO Market Intelligence Dashboard Handler
Unified dashboard - –∑–∞–º–µ–Ω–∞ Coinglass/ExoCharts
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from config.settings import logger


class GIODashboardHandler:
    """–ï–¥–∏–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è GIO Bot"""

    def __init__(self, bot_instance):
        self.bot = bot_instance
        from analytics.market_phase_detector import MarketPhaseDetector

        self.phase_detector = MarketPhaseDetector()
        logger.info("‚úÖ GIODashboardHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_gio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /gio [SYMBOL] - GIO Market Intelligence Dashboard
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª
            symbol = "BTCUSDT"
            if context.args:
                symbol = context.args[0].upper()
                if not symbol.endswith("USDT"):
                    symbol = f"{symbol}USDT"

            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /gio {symbol} –æ—Ç @{user}")

            # Loading —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading = await update.message.reply_text(
                f"üîç –ó–∞–≥—Ä—É–∂–∞—é GIO Intelligence –¥–ª—è {symbol}..."
            )

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dashboard = await self.build_dashboard(symbol)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
            await loading.delete()
            await update.message.reply_text(
                dashboard, parse_mode=None  # –ë–µ–∑ Markdown –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            )

        except Exception as e:
            logger.error(f"‚ùå /gio error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def build_dashboard(self, symbol: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ unified dashboard"""
        try:
            lines = []
            lines.append(f"üéØ GIO MARKET INTELLIGENCE ‚Äî {symbol}")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")

            # === 1. PRICE ACTION ===
            try:
                ticker = await self.bot.bybit_connector.get_ticker(symbol)
                if ticker:
                    price = float(ticker.get("lastPrice", 0))
                    change = float(ticker.get("price24hPcnt", 0)) * 100

                    emoji = "üü¢" if change >= 0 else "üî¥"

                    lines.append("üí∞ PRICE ACTION")
                    lines.append(
                        f"‚îú‚îÄ Current: ${price:,.2f} ({emoji}{change:+.2f}% 24h)"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
                    try:
                        regime = (
                            await self.bot.market_structure_analyzer.get_market_regime(
                                symbol
                            )
                        )
                        if regime:
                            regime_name = regime.get("regime", "Unknown")
                            regime_conf = regime.get("confidence", 0)
                            regime_emoji = self.get_regime_emoji(regime_name)
                            lines.append(
                                f"‚îî‚îÄ Trend: {regime_emoji} {regime_name.upper()} ({regime_conf:.0f}% conf)"
                            )
                        else:
                            lines.append("‚îî‚îÄ Trend: ... (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è)")
                    except:
                        lines.append("‚îî‚îÄ Trend: ... (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è)")

                    lines.append("")
            except Exception as e:
                logger.error(f"Price error: {e}")
                lines.append("üí∞ PRICE ACTION")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                lines.append("")

            # === 2. MARKET PHASE ===
            lines.append("üéØ MARKET PHASE")
            try:
                ticker = await self.bot.bybit_connector.get_ticker(symbol)
                vp_data = await self.get_volume_profile_data(symbol)

                if ticker and vp_data:
                    price = float(ticker.get("lastPrice", 0))
                    price_change = float(ticker.get("price24hPcnt", 0)) * 100

                    # –ü–æ–ª—É—á–∞–µ–º OB imbalance
                    ob_imbalance = 0
                    try:
                        if hasattr(self.bot, "orderbook_ws") and self.bot.orderbook_ws:
                            if hasattr(self.bot.orderbook_ws, "_orderbook"):
                                snapshot = self.bot.orderbook_ws._orderbook
                                bids = snapshot.get("bids", [])
                                asks = snapshot.get("asks", [])
                                if bids and asks:
                                    bid_vol = sum(float(b[1]) for b in bids[:50])
                                    ask_vol = sum(float(a[1]) for a in asks[:50])
                                    total = bid_vol + ask_vol
                                    if total > 0:
                                        ob_imbalance = (
                                            (bid_vol - ask_vol) / total
                                        ) * 100
                    except:
                        pass

                    # –ü–æ–ª—É—á–∞–µ–º CVD
                    cvd = 0
                    try:
                        if hasattr(self.bot, "orderbook_analyzer"):
                            cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                            cvd = cvd_data.get("cvd_pct", 0) if cvd_data else 0
                    except:
                        pass

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É
                    phase_info = await self.phase_detector.detect_phase(
                        symbol=symbol,
                        price=price,
                        volume_profile=vp_data,
                        ob_imbalance=ob_imbalance,
                        cvd=cvd,
                        price_change_24h=price_change,
                    )

                    phase = phase_info.get("phase", "UNKNOWN")
                    emoji = phase_info.get("emoji", "‚ùì")
                    confidence = phase_info.get("confidence", 0)
                    description = phase_info.get("description", "")

                    lines.append(
                        f"‚îú‚îÄ Phase: {emoji} {phase} ({confidence}% confidence)"
                    )
                    lines.append(f"‚îî‚îÄ {description}")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"Phase detection error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã")
            lines.append("")

            # ===  MARKET MAKER SCENARIO ===
            lines.append("üìä MARKET MAKER SCENARIO")
            try:
                if hasattr(self.bot, "scenario_matcher"):
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    vp_data = await self.get_volume_profile_data(symbol)

                    if ticker and vp_data:
                        price = float(ticker.get("lastPrice", 0))

                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¥–ª—è UnifiedScenarioMatcher
                        market_data = {
                            "price": price,
                            "close": price,
                            "volume": float(ticker.get("volume24h", 0)),
                            "poc": vp_data.get("poc", 0),
                            "vah": vp_data.get("vah", 0),
                            "val": vp_data.get("val", 0),
                        }

                        indicators = {
                            "rsi": 50,  # –ó–∞–≥–ª—É—à–∫–∞
                            "rsi_1h": 50,
                            "macd_histogram": 0,
                            "atr": 0,
                        }

                        mtf_trends = {
                            "1H": {"trend": "neutral", "strength": 0},
                            "4H": {"trend": "neutral", "strength": 0},
                            "1D": {"trend": "neutral", "strength": 0},
                        }

                        news_sentiment = {
                            "sentiment": "neutral",
                            "score": 0,
                        }

                        veto_checks = {
                            "has_veto": False,
                            "veto_reasons": [],
                            "liquidity_ok": True,
                            "spread_ok": True,
                            "volatility_ok": True,
                        }

                        cvd_data = None  # Optional

                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í match_scenario
                        scenario = self.bot.scenario_matcher.match_scenario(
                            symbol=symbol,
                            market_data=market_data,
                            indicators=indicators,
                            mtf_trends=mtf_trends,
                            volume_profile=vp_data,
                            news_sentiment=news_sentiment,
                            veto_checks=veto_checks,
                            cvd_data=cvd_data,
                        )

                        if scenario and scenario.get("score", 0) > 50:
                            name = scenario.get("scenario_name", "Unknown")
                            status = scenario.get("status", "observation")
                            conf = scenario.get("score", 0)

                            emoji = self.get_scenario_emoji(name)
                            lines.append(
                                f"‚îú‚îÄ {emoji} {name.upper()} ‚Äî {status} ({conf:.0f}% conf)"
                            )
                            lines.append(
                                f"‚îú‚îÄ Direction: {scenario.get('direction', 'N/A').upper()}"
                            )
                            lines.append(
                                f"‚îî‚îÄ Timeframe: {scenario.get('timeframe', '1H')}"
                            )
                        else:
                            lines.append("‚îî‚îÄ ‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–Ω–∏–∑–∫–∏–π score)")
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Scenario matcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Scenario error: {e}", exc_info=True)
                lines.append(f"‚îî‚îÄ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")
            lines.append("")

            # === 3. INSTITUTIONAL METRICS ===
            lines.append("üî• INSTITUTIONAL METRICS")
            try:
                # Funding rate - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º snake_case
                funding_rate = 0
                oi_value = 0
                ls_ratio = 0

                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–≤
                    if hasattr(self.bot, "get_funding_rate"):
                        funding = await self.bot.get_funding_rate(symbol)
                        funding_rate = funding.get("rate", 0) if funding else 0
                    elif hasattr(self.bot.bybit_connector, "get_funding_rate"):
                        funding = await self.bot.bybit_connector.get_funding_rate(
                            symbol
                        )
                        funding_rate = funding.get("rate", 0) if funding else 0
                except Exception as e:
                    logger.debug(f"Funding rate error: {e}")

                try:
                    # Open Interest
                    if hasattr(self.bot, "get_open_interest"):
                        oi = await self.bot.get_open_interest(symbol)
                        oi_value = oi.get("value", 0) if oi else 0
                    elif hasattr(self.bot.bybit_connector, "get_open_interest"):
                        oi = await self.bot.bybit_connector.get_open_interest(symbol)
                        oi_value = oi.get("value", 0) if oi else 0
                except Exception as e:
                    logger.debug(f"OI error: {e}")

                try:
                    # Long/Short Ratio
                    if hasattr(self.bot, "get_long_short_ratio"):
                        ratio = await self.bot.get_long_short_ratio(symbol)
                        ls_ratio = ratio.get("ratio", 0) if ratio else 0
                    elif hasattr(self.bot.bybit_connector, "get_long_short_ratio"):
                        ratio = await self.bot.bybit_connector.get_long_short_ratio(
                            symbol
                        )
                        ls_ratio = ratio.get("ratio", 0) if ratio else 0
                except Exception as e:
                    logger.debug(f"L/S Ratio error: {e}")

                long_pct = (ls_ratio / (1 + ls_ratio)) * 100 if ls_ratio else 50

                # CVD
                cvd = 0
                try:
                    if hasattr(self.bot, "orderbook_analyzer"):
                        cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                        cvd = cvd_data.get("cvd_pct", 0) if cvd_data else 0
                except Exception as e:
                    logger.debug(f"CVD error: {e}")

                funding_emoji = self.get_funding_emoji(funding_rate)
                cvd_emoji = self.get_cvd_emoji(cvd)

                lines.append(f"‚îú‚îÄ Funding: {funding_rate:+.4f}% {funding_emoji}")
                lines.append(f"‚îú‚îÄ OI: ${oi_value/1e9:.2f}B")
                lines.append(
                    f"‚îú‚îÄ L/S Ratio: {ls_ratio:.2f} ({long_pct:.0f}% LONG) {'üü¢' if ls_ratio > 1 else 'üî¥'}"
                )
                lines.append(f"‚îî‚îÄ CVD: {cvd:+.2f}% {cvd_emoji}")
            except Exception as e:
                logger.error(f"Metrics error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            lines.append("")

            # === 4. MULTI-TIMEFRAME ===
            lines.append("üìà MULTI-TIMEFRAME ALIGNMENT")
            try:
                trends = {}

                if hasattr(self.bot, "multi_tf_filter"):
                    mtf = self.bot.multi_tf_filter

                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MTF
                    if hasattr(mtf, "_cache") and mtf._cache:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
                        cache_key = f"mtf_{symbol}"
                        if cache_key in mtf._cache:
                            cached_data = mtf._cache[cache_key]
                            for tf in ["1h", "4h", "1d"]:
                                if tf in cached_data:
                                    trends[tf] = cached_data[tf]

                    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ connector –Ω–∞–ø—Ä—è–º—É—é
                    if not trends:
                        for tf in ["1h", "4h", "1d"]:
                            try:
                                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cached data –≤ multi_tf_filter
                                if hasattr(mtf, "trends") and symbol in mtf.trends:
                                    symbol_trends = mtf.trends[symbol]
                                    if tf in symbol_trends:
                                        trends[tf] = symbol_trends[tf]
                                else:
                                    # Fallback: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UNKNOWN
                                    trends[tf] = {"trend": "UNKNOWN", "strength": 0}
                            except Exception as e:
                                logger.debug(f"MTF {tf} cache error: {e}")
                                trends[tf] = {"trend": "UNKNOWN", "strength": 0}

                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if trends and any(
                        t.get("trend") != "UNKNOWN" for t in trends.values()
                    ):
                        for tf in ["1h", "4h", "1d"]:
                            trend_data = trends.get(tf, {})
                            trend = trend_data.get("trend", "UNKNOWN")
                            strength = trend_data.get("strength", 0)
                            emoji = self.get_trend_emoji(trend)
                            lines.append(
                                f"‚îú‚îÄ {tf.upper()}: {emoji} {trend} (strength {strength:.2f})"
                            )

                        # Agreement calculation
                        up_count = sum(
                            1 for t in trends.values() if t.get("trend") == "UP"
                        )
                        down_count = sum(
                            1 for t in trends.values() if t.get("trend") == "DOWN"
                        )
                        total = len(trends)

                        if up_count > down_count:
                            agreement = up_count / total
                            agreement_text = "Bullish"
                        elif down_count > up_count:
                            agreement = down_count / total
                            agreement_text = "Bearish"
                        else:
                            agreement = 0.33
                            agreement_text = "Mixed"

                        agreement_emoji = (
                            "üü¢"
                            if agreement >= 0.67
                            else "‚ö†Ô∏è" if agreement >= 0.34 else "üî¥"
                        )
                        lines.append(
                            f"‚îî‚îÄ Agreement: {agreement:.0%} {agreement_emoji} {agreement_text}"
                        )
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"MTF error: {e}", exc_info=True)
                lines.append("‚îî‚îÄ ‚ö†Ô∏è MTF –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 5. VOLUME PROFILE ===
            lines.append("üìä VOLUME PROFILE")
            try:
                vp = await self.bot.get_volume_profile(symbol)
                if vp and vp.get("poc"):
                    poc = vp.get("poc", 0)
                    vah = vp.get("vah", 0)
                    val = vp.get("val", 0)

                    lines.append(f"‚îú‚îÄ POC: ${poc:,.2f} (Point of Control)")
                    lines.append(f"‚îú‚îÄ VAH: ${vah:,.2f} (Value Area High)")
                    lines.append(f"‚îú‚îÄ VAL: ${val:,.2f} (Value Area Low)")

                    # Position
                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    if ticker:
                        price = float(ticker.get("lastPrice", 0))
                        position = self.get_vp_position(price, poc, vah, val)
                        poc_diff = ((price - poc) / poc) * 100
                        lines.append(
                            f"‚îî‚îÄ Position: {position} ({poc_diff:+.2f}% from POC)"
                        )
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è VP –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"VP error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è VP –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 6. ORDERBOOK PRESSURE ===
            lines.append("üêã ORDERBOOK PRESSURE (Real-time)")
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.bot.orderbook_ws (–Ω–µ bybit_orderbook_ws)
                if hasattr(self.bot, "orderbook_ws") and self.bot.orderbook_ws:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ _orderbook –∞—Ç—Ä–∏–±—É—Ç–∞
                    if (
                        hasattr(self.bot.orderbook_ws, "_orderbook")
                        and self.bot.orderbook_ws._orderbook
                    ):
                        snapshot = self.bot.orderbook_ws._orderbook

                        bids = snapshot.get("bids", [])
                        asks = snapshot.get("asks", [])

                        if bids and asks:
                            # –°—á–∏—Ç–∞–µ–º top 50 levels
                            bid_vol = sum(float(b[1]) for b in bids[:50])
                            ask_vol = sum(float(a[1]) for a in asks[:50])
                            total = bid_vol + ask_vol

                            if total > 0:
                                bid_pct = (bid_vol / total) * 100
                                ask_pct = (ask_vol / total) * 100
                                imbalance = bid_pct - ask_pct

                                emoji = self.get_pressure_emoji(imbalance)

                                lines.append(
                                    f"‚îú‚îÄ BID: {bid_pct:.1f}% {'üü¢' if bid_pct > 50 else 'üî¥'}"
                                )
                                lines.append(f"‚îú‚îÄ ASK: {ask_pct:.1f}%")
                                lines.append(f"‚îî‚îÄ Imbalance: {imbalance:+.1f}% {emoji}")
                            else:
                                lines.append("‚îî‚îÄ ‚ö†Ô∏è –ù–µ—Ç –æ–±—ä—ë–º–∞ –≤ orderbook")
                        else:
                            lines.append("‚îî‚îÄ ‚ö†Ô∏è –ü—É—Å—Ç–æ–π orderbook")
                    else:
                        lines.append("‚îî‚îÄ ‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö orderbook...")
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Orderbook WS –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"L2 error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è L2 –æ—à–∏–±–∫–∞")
            lines.append("")

            # === 7. KEY LEVELS ===
            lines.append("üíé KEY LEVELS")
            try:
                vp = await self.bot.get_volume_profile(symbol)
                if vp:
                    # –ë–µ—Ä–µ–º VAH/VAL –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
                    vah = vp.get("vah", 0)
                    val = vp.get("val", 0)

                    lines.append(f"‚îú‚îÄ Resistance: ${vah:,.0f}")
                    lines.append(f"‚îú‚îÄ Support: ${val:,.0f}")

                    ticker = await self.bot.bybit_connector.get_ticker(symbol)
                    if ticker:
                        price = float(ticker.get("lastPrice", 0))
                        if price > 0 and vah > 0:
                            breakout_pct = ((vah - price) / price) * 100
                            lines.append(
                                f"‚îî‚îÄ Breakout Target: ${vah:,.0f} ({breakout_pct:+.1f}%)"
                            )
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                logger.error(f"Levels error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –æ—à–∏–±–∫–∞")
            lines.append("")

            # === FOOTER ===
            now = datetime.now().strftime("%H:%M:%S")
            next_update = (datetime.now() + timedelta(minutes=5)).strftime("%H:%M:%S")

            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append(f"‚è±Ô∏è Updated: {now}")
            lines.append(f"üîÑ Next update: {next_update} (manual)")
            lines.append("")

            # === 8. WHALE ACTIVITY ===
            lines.append("üêã WHALE ACTIVITY (Last 15min)")
            try:
                if hasattr(self.bot, "whale_tracker"):
                    whale_info = self.bot.whale_tracker.format_whale_info(
                        symbol, minutes=15
                    )
                    lines.append(whale_info)
                else:
                    lines.append("‚îî‚îÄ ‚ö†Ô∏è Whale tracker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"Whale activity error: {e}")
                lines.append("‚îî‚îÄ ‚ö†Ô∏è Whale data unavailable")
            lines.append("")

            # === GIO INTERPRETATION ===
            lines.append("üí° GIO Interpretation:")
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            interpretation = await self.generate_interpretation(symbol)
            lines.append(interpretation)

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"‚ùå build_dashboard error: {e}", exc_info=True)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

    async def generate_interpretation(self, symbol: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
        try:
            parts = []

            # –ü–æ–ª—É—á–∞–µ–º CVD
            cvd_data = (
                await self.bot.orderbook_analyzer.get_cvd(symbol)
                if hasattr(self.bot, "orderbook_analyzer")
                else {}
            )
            cvd = cvd_data.get("cvd_pct", 0)

            # –ü–æ–ª—É—á–∞–µ–º L2 pressure
            try:
                snapshot = (
                    self.bot.bybit_orderbook_ws.get_orderbook_snapshot()
                    if hasattr(self.bot, "bybit_orderbook_ws")
                    else None
                )
                if snapshot:
                    bid_vol = sum(float(b[1]) for b in snapshot.get("bids", [])[:50])
                    ask_vol = sum(float(a[1]) for a in snapshot.get("asks", [])[:50])
                    total = bid_vol + ask_vol
                    imbalance = ((bid_vol - ask_vol) / total * 100) if total > 0 else 0
                else:
                    imbalance = 0
            except:
                imbalance = 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            if abs(cvd) > 50:
                side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if cvd > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(f"–°–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {side} (CVD {cvd:+.0f}%).")

            if abs(imbalance) > 30:
                pressure_side = "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if imbalance > 0 else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
                parts.append(
                    f"L2 orderbook –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ {pressure_side} ({imbalance:+.0f}%)."
                )

            if not parts:
                parts.append("–†—ã–Ω–æ–∫ –≤ –±–∞–ª–∞–Ω—Å–µ, –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.")

            return " ".join(parts)

        except Exception as e:
            logger.error(f"generate_interpretation error: {e}")
            return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."

    def get_regime_emoji(self, regime: str) -> str:
        mapping = {"TRENDING": "üìà", "RANGING": "‚ÜîÔ∏è", "VOLATILE": "‚ö°", "BREAKOUT": "üöÄ"}
        return mapping.get(regime.upper(), "‚ö™")

    def get_scenario_emoji(self, scenario: str) -> str:
        mapping = {
            "ACCUMULATION": "üéØ",
            "MARKUP": "üìà",
            "DISTRIBUTION": "üìâ",
            "MARKDOWN": "üî¥",
            "IMPULSE": "üöÄ",
            "MEANREVERSION": "‚ÜîÔ∏è",
            "FLAT": "üìä",
        }
        return mapping.get(scenario.upper(), "‚ö™")

    def get_funding_emoji(self, funding: float) -> str:
        if funding > 0.01:
            return "üî•"
        elif funding < -0.01:
            return "‚ùÑÔ∏è"
        else:
            return "‚ö™"

    def get_cvd_emoji(self, cvd: float) -> str:
        if cvd > 50:
            return "üî•"
        elif cvd > 20:
            return "üü¢"
        elif cvd < -50:
            return "‚ùÑÔ∏è"
        elif cvd < -20:
            return "üî¥"
        else:
            return "‚ö™"

    def get_trend_emoji(self, trend: str) -> str:
        mapping = {"UP": "üü¢", "DOWN": "üî¥", "NEUTRAL": "‚ö™", "UNKNOWN": "‚ö™"}
        return mapping.get(trend.upper(), "‚ö™")

    def get_pressure_emoji(self, imbalance: float) -> str:
        if imbalance > 50:
            return "üî•"
        elif imbalance > 20:
            return "üü¢"
        elif imbalance < -50:
            return "‚ùÑÔ∏è"
        elif imbalance < -20:
            return "üî¥"
        else:
            return "‚ö™"

    def get_vp_position(self, price: float, poc: float, vah: float, val: float) -> str:
        if price > vah:
            return "Above VAH ‚¨ÜÔ∏è"
        elif price < val:
            return "Below VAL ‚¨áÔ∏è"
        elif price > poc:
            return "Above POC üü¢"
        else:
            return "Below POC üî¥"

    async def get_market_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {}

            # Ticker
            ticker = await self.bot.bybit_connector.get_ticker(symbol)
            if ticker:
                data["price"] = float(ticker.get("lastPrice", 0))
                data["change_24h"] = float(ticker.get("price24hPcnt", 0)) * 100
                data["volume_24h"] = float(ticker.get("volume24h", 0))

            # Funding
            if hasattr(self.bot, "get_funding_rate"):
                funding = await self.bot.get_funding_rate(symbol)
                data["funding_rate"] = funding.get("rate", 0) if funding else 0

            # OI
            if hasattr(self.bot, "get_open_interest"):
                oi = await self.bot.get_open_interest(symbol)
                data["open_interest"] = oi.get("value", 0) if oi else 0

            # L/S Ratio
            if hasattr(self.bot, "get_long_short_ratio"):
                ratio = await self.bot.get_long_short_ratio(symbol)
                data["long_short_ratio"] = ratio.get("ratio", 0) if ratio else 0

            # CVD
            if hasattr(self.bot, "orderbook_analyzer"):
                cvd_data = await self.bot.orderbook_analyzer.get_cvd(symbol)
                data["cvd"] = cvd_data.get("cvd_pct", 0) if cvd_data else 0

            return data
        except Exception as e:
            logger.error(f"get_market_data error: {e}")
            return {}

    async def get_volume_profile_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Volume Profile"""
        try:
            if hasattr(self.bot, "get_volume_profile"):
                return await self.bot.get_volume_profile(symbol)
            elif hasattr(self.bot, "volume_profile_calculator"):
                return await self.bot.volume_profile_calculator.get_latest_profile(
                    symbol
                )
            else:
                return {}
        except Exception as e:
            logger.error(f"get_volume_profile_data error: {e}")
            return {}

    async def get_mtf_trends(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Multi-Timeframe —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            trends = {}

            if not hasattr(self.bot, "multitf_filter"):
                return trends

            mtf = self.bot.multitf_filter

            for tf in ["1h", "4h", "1d"]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º klines
                    klines = await mtf.get_klines_from_connector(symbol, tf, 200)
                    if not klines:
                        trends[tf] = {"trend": "UNKNOWN", "strength": 0}
                        continue

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                    if hasattr(mtf, "mtf_analyzer"):
                        result = await mtf.mtf_analyzer.analyze(klines, tf)
                        trends[tf] = {
                            "trend": result.get("trend", "UNKNOWN"),
                            "strength": result.get("strength", 0),
                        }
                    else:
                        trends[tf] = {"trend": "UNKNOWN", "strength": 0}

                except Exception as e:
                    logger.error(f"MTF {tf} error: {e}")
                    trends[tf] = {"trend": "UNKNOWN", "strength": 0}

            return trends

        except Exception as e:
            logger.error(f"get_mtf_trends error: {e}")
            return {}

    async def get_orderbook_pressure(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è orderbook"""
        try:
            if (
                not hasattr(self.bot, "bybit_orderbook_ws")
                or not self.bot.bybit_orderbook_ws
            ):
                return {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ get_orderbook_snapshot
            if hasattr(self.bot.bybit_orderbook_ws, "get_orderbook_snapshot"):
                snapshot = self.bot.bybit_orderbook_ws.get_orderbook_snapshot()
            elif hasattr(self.bot.bybit_orderbook_ws, "orderbook"):
                snapshot = self.bot.bybit_orderbook_ws.orderbook
            else:
                return {}

            if not snapshot:
                return {}

            bids = snapshot.get("bids", [])
            asks = snapshot.get("asks", [])

            if not bids or not asks:
                return {}

            # –°—á–∏—Ç–∞–µ–º top 50 levels
            bid_vol = sum(float(b[1]) for b in bids[:50])
            ask_vol = sum(float(a[1]) for a in asks[:50])
            total = bid_vol + ask_vol

            if total == 0:
                return {}

            bid_pct = (bid_vol / total) * 100
            ask_pct = (ask_vol / total) * 100
            imbalance = bid_pct - ask_pct

            return {
                "bid_pct": bid_pct,
                "ask_pct": ask_pct,
                "imbalance": imbalance,
                "bid_vol": bid_vol,
                "ask_vol": ask_vol,
            }

        except Exception as e:
            logger.error(f"get_orderbook_pressure error: {e}")
            return {}

    async def get_scenario(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è MM"""
        try:
            if not hasattr(self.bot, "unified_scenario_matcher"):
                return None

            # –ü–æ–ª—É—á–∞–µ–º market data
            market_data = await self.get_market_data(symbol)
            vp_data = await self.get_volume_profile_data(symbol)

            if not market_data or not market_data.get("price"):
                return None

            # Match scenario
            scenario = await self.bot.unified_scenario_matcher.match_scenario(
                symbol=symbol,
                price=market_data.get("price", 0),
                volume_profile=vp_data,
                market_data=market_data,
            )

            return scenario if scenario and scenario.get("score", 0) > 40 else None

        except Exception as e:
            logger.error(f"get_scenario error: {e}")
            return None
