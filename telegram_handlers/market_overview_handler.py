#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Market Overview Handler
Multi-Symbol Quick Scan Dashboard with Color Coding
"""

import asyncio
from datetime import datetime
from typing import Dict, List
from telegram import Update
from telegram.ext import ContextTypes
from config.settings import logger


class MarketOverviewHandler:
    """Multi-Symbol Overview Handler with Color Coding"""

    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.default_symbols = [
            "BTCUSDT",
            "ETHUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "BNBUSDT",
            "DOGEUSDT",
            "ADAUSDT",
            "AVAXUSDT",
        ]
        logger.info("‚úÖ MarketOverviewHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_price_emoji(self, price_change: float) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã

        Args:
            price_change: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã

        Returns:
            Emoji —Å—Ç—Ä–æ–∫–∞ (üü¢, üî¥, ‚ö™)
        """
        if price_change > 0.5:
            return "üü¢"
        elif price_change < -0.5:
            return "üî¥"
        else:
            return "‚ö™"

    def get_phase_emoji(self, phase: str, confidence: float) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞

        Args:
            phase: BULLISH_EXPANSION, BEARISH_COMPRESSION, CONSOLIDATION
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-100

        Returns:
            Emoji —Å—Ç—Ä–æ–∫–∞ (üü¢, üî¥, ‚ö™, üü°)
        """
        if confidence < 60:
            return "üü°"  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

        if phase == "BULLISH_EXPANSION":
            return "üü¢"
        elif phase == "BEARISH_COMPRESSION":
            return "üî¥"
        else:  # CONSOLIDATION
            return "‚ö™"

    def format_phase_name(self, phase: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        phase_names = {
            "BULLISH_EXPANSION": "BULLISH EXP",
            "BEARISH_COMPRESSION": "BEARISH CMP",
            "CONSOLIDATION": "CONSOLIDATION",
        }
        return phase_names.get(phase, phase)

    async def cmd_overview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /overview - Multi-Symbol Market Overview with Color Coding
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 8 –∞–∫—Ç–∏–≤–æ–≤ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ —Ñ–∞–∑–∞–º–∏
        """
        try:
            user = update.effective_user.username or "Unknown"
            logger.info(f"üìä /overview –æ—Ç @{user}")

            # Loading —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading = await update.message.reply_text(
                "üîç –ó–∞–≥—Ä—É–∂–∞—é –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è 8 –∞–∫—Ç–∏–≤–æ–≤..."
            )

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            overview = await self.build_overview(self.default_symbols)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º overview
            await loading.delete()
            await update.message.reply_text(overview, parse_mode=None)

        except Exception as e:
            logger.error(f"‚ùå /overview error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    async def build_overview(self, symbols: List[str]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ multi-symbol overview —Å color coding"""
        try:
            lines = []
            lines.append("üìä GIO MARKET OVERVIEW ‚Äî 8 Assets")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append("")

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self.get_symbol_data(symbol) for symbol in symbols]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å emoji
            for symbol, data in zip(symbols, results):
                if isinstance(data, Exception):
                    logger.error(f"Error for {symbol}: {data}")
                    continue

                if not data:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º emoji
                price_emoji = self.get_price_emoji(data["change"])
                phase_emoji = self.get_phase_emoji(data["phase"], data["confidence"])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã
                phase_name = self.format_phase_name(data["phase"])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É (—É–±–∏—Ä–∞–µ–º USDT)
                symbol_short = symbol.replace("USDT", "")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å heat indicator
                line = (
                    f"{price_emoji} {symbol_short}: "
                    f"${data['price']:,.2f} ({data['change']:+.2f}%) | "
                    f"{phase_emoji} {phase_name} ({data['confidence']:.0f}%) | "  # ‚Üê –î–û–ë–ê–í–ò–õ " | " –í –ö–û–ù–¶–ï
                    f"{data['heat_emoji']}"
                )

                lines.append(line)

            lines.append("")
            lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            lines.append(f"‚è±Ô∏è Updated: {datetime.now().strftime('%H:%M:%S')}")
            lines.append("")

            # –õ–µ–≥–µ–Ω–¥–∞
            lines.append("üìñ LEGEND:")
            lines.append("‚îú‚îÄ üü¢ Bullish | üî¥ Bearish | ‚ö™ Neutral")
            lines.append("‚îú‚îÄ üü° Uncertain (low confidence)")
            lines.append("‚îî‚îÄ Use /gio SYMBOL for details")

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"‚ùå build_overview error: {e}", exc_info=True)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {str(e)}"

    async def get_symbol_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤–∫–ª—é—á–∞—è market phase"""
        try:
            data = {}

            # 1. Price & Change
            ticker = await self.bot.bybit_connector.get_ticker(symbol)
            if ticker:
                data["price"] = float(ticker.get("lastPrice", 0))
                data["change"] = float(ticker.get("price24hPcnt", 0)) * 100
            else:
                return None

            # 2. Market Phase Detection
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º get_market_data –≤–º–µ—Å—Ç–æ extract_features
                market_data = await self.bot.get_market_data(symbol)

                if market_data and hasattr(self.bot, "market_phase_detector"):
                    # –ü–æ–ª—É—á–∞–µ–º Volume Profile
                    vp = market_data.get("volume_profile", {})

                    # –ü–æ–ª—É—á–∞–µ–º OI –¥–∞–Ω–Ω—ã–µ
                    oi_data = await self.bot.bybit_connector.get_open_interest(symbol)
                    oi_change = oi_data.get("openInterestDelta", 0) if oi_data else 0

                    # –ü–æ–ª—É—á–∞–µ–º Funding
                    funding_data = self.bot.bybit_connector.get_funding_rate(
                        symbol
                    )
                    funding_rate = (
                        funding_data.get("fundingRate", 0) if funding_data else 0
                    )

                    # –°–æ–±–∏—Ä–∞–µ–º features –¥–ª—è phase detector
                    features = {
                        "price": data["price"],
                        "volume": market_data.get("volume", 0),
                        "volume_ma20": market_data.get("volume_ma20", 1),
                        "atr": market_data.get("atr", 1),
                        "poc": vp.get("poc", data["price"]),
                        "vah": vp.get("vah", data["price"] * 1.01),
                        "val": vp.get("val", data["price"] * 0.99),
                        "open_interest_delta_pct": oi_change,
                        "funding_rate_bp": funding_rate * 10000,
                        "price_change_pct": data["change"],
                    }

                    phase_info = self.bot.market_phase_detector.detect_phase(features)
                    data["phase"] = phase_info["phase"]
                    data["confidence"] = phase_info["confidence"]
                else:
                    # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –ø–æ price change
                    if abs(data["change"]) < 1.0:
                        data["phase"] = "CONSOLIDATION"
                        data["confidence"] = 65.0
                    elif data["change"] > 1.0:
                        data["phase"] = "BULLISH_EXPANSION"
                        data["confidence"] = 70.0
                    else:
                        data["phase"] = "BEARISH_COMPRESSION"
                        data["confidence"] = 70.0

            except Exception as e:
                logger.warning(f"Phase detection failed for {symbol}: {e}")
                # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –ø–æ price change
                if abs(data["change"]) < 1.0:
                    data["phase"] = "CONSOLIDATION"
                    data["confidence"] = 65.0
                elif data["change"] > 1.0:
                    data["phase"] = "BULLISH_EXPANSION"
                    data["confidence"] = 70.0
                else:
                    data["phase"] = "BEARISH_COMPRESSION"
                    data["confidence"] = 70.0

            # 3. Market Heat
            try:
                if hasattr(self.bot, "market_heat_indicator"):
                    features_for_heat = {
                        "price": data["price"],
                        "atr": 1.0,  # Default
                        "volume": 1000000,  # Default
                        "volume_ma20": 1000000,
                        "price_change_pct": data["change"],
                        "open_interest_delta_pct": 0,
                    }

                    heat_data = self.bot.market_heat_indicator.calculate_heat(
                        features_for_heat
                    )
                    data["heat_emoji"] = heat_data["heat_emoji"]
                    data["heat_score"] = heat_data["heat_score"]
                else:
                    data["heat_emoji"] = "‚ö™"
                    data["heat_score"] = 0
            except Exception as e:
                logger.warning(f"Heat calculation failed for {symbol}: {e}")
                data["heat_emoji"] = "‚ö™"
                data["heat_score"] = 0

            return data

        except Exception as e:
            logger.error(f"get_symbol_data error for {symbol}: {e}")
            return None
