#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /analyze_batching ALL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UnifiedAutoScanner
"""

from config.settings import logger, TRACKED_SYMBOLS
from telegram import Update
from telegram.ext import ContextTypes


def apply_analyze_batching_all_patch(bot_instance):
    """
    –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze_batching ALL

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedAutoScanner –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ MTF –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        logger.info("üîß –ü–∞—Ç—á apply_analyze_batching_all_patch...")

        # ===================================================================
        # –ú–ï–¢–û–î –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú UnifiedAutoScanner
        # ===================================================================
        async def scan_market(self):
            """
            –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ UnifiedAutoScanner —Å MTF Alignment
            """
            logger.info(f"üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ ({len(TRACKED_SYMBOLS)} —Å–∏–º–≤–æ–ª–æ–≤)")

            try:
                # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedAutoScanner!
                signal_ids = await self.auto_scanner.scan_multiple_symbols(TRACKED_SYMBOLS)

                if signal_ids:
                    logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(signal_ids)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                    return signal_ids
                else:
                    logger.info(f"‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return []

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                import traceback
                logger.error(traceback.format_exc())
                return []

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ bot_instance
        import types
        bot_instance.scan_market = types.MethodType(scan_market, bot_instance)

        logger.info("‚úÖ –ü–∞—Ç—á OK! scan_market —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedAutoScanner")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}")
        return False
