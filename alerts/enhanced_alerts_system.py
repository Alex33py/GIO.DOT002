#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Alerts System –¥–ª—è GIO Crypto Bot v3.0
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤—Å–µ—Ö –ø–∞—Ä
- –ó–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞ (cooldown + throttling)
- –ì—Ä–∞–¥–∞—Ü–∏–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-—Ä—ã–Ω–∫–∞
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π, –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π, –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä—ë–º–æ–≤

–í–µ—Ä—Å–∏—è: 3.0
–î–∞—Ç–∞: 2025-10-12
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from collections import defaultdict

logger = logging.getLogger(__name__)


class EnhancedAlertsSystem:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º

    Features:
    - L2 Orderbook –¥–∏—Å–±–∞–ª–∞–Ω—Å (—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ 85-90%)
    - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    - –ö—Ä—É–ø–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (>$100K)
    - –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–æ–≤ (>3x —Å—Ä–µ–¥–Ω–µ–≥–æ)
    - –°–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Market Maker
    - –ü—Ä–æ–±–æ–∏ Volume Profile —É—Ä–æ–≤–Ω–µ–π
    """

    def __init__(self, bot_instance, telegram_handler=None, tracked_symbols=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            bot_instance: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            telegram_handler: Telegram handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            tracked_symbols: –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        self.bot = bot_instance
        self.telegram_handler = telegram_handler

        # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
        if tracked_symbols:
            self.tracked_symbols = tracked_symbols
        elif (
            hasattr(bot_instance, "config") and "tracked_symbols" in bot_instance.config
        ):
            self.tracked_symbols = bot_instance.config["tracked_symbols"]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.tracked_symbols = ["BTCUSDT", "ETHUSDT", "XRPUSDT"]

        # ========== –ü–ê–†–ê–ú–ï–¢–†–´ –ê–õ–ï–†–¢–û–í (–ê–î–ê–ü–¢–ò–í–ù–´–ï –î–õ–Ø –ö–†–ò–ü–¢–û) ==========
        self.config = {
            # L2 Orderbook
            "l2_normal_threshold": 85.0,  # –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (85-90%)
            "l2_extreme_threshold": 90.0,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π (>90%)
            # –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏
            "liquidation_min_usd": 100000,  # –ú–∏–Ω–∏–º—É–º $100K
            # –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–æ–≤
            "volume_spike_multiplier": 3.0,  # 3x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            # –ù–æ–≤–æ—Å—Ç–∏
            "news_critical_keywords": [
                "SEC",
                "ETF",
                "lawsuit",
                "hack",
                "regulation",
                "ban",
                "approval",
                "crash",
                "surge",
                "Á†¥Áî¢",
                "investigation",
                "fraud",
                "bankruptcy",
            ],
            # Throttling (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
            "l2_cooldown": 300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É L2 –∞–ª–µ—Ä—Ç–∞–º–∏
            "mm_cooldown": 600,  # 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É MM –∞–ª–µ—Ä—Ç–∞–º–∏
            "vp_cooldown": 900,  # 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É VP –∞–ª–µ—Ä—Ç–∞–º–∏
            "liq_cooldown": 60,  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É liquidation –∞–ª–µ—Ä—Ç–∞–º–∏
            "vol_cooldown": 60,  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É volume spike –∞–ª–µ—Ä—Ç–∞–º–∏
            "news_cooldown": 300,  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É news –∞–ª–µ—Ä—Ç–∞–º–∏
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            "monitoring_interval": 30,  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: 30 —Å–µ–∫—É–Ω–¥
            "news_check_interval": 300,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: 5 –º–∏–Ω—É—Ç
        }

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–¥–ª—è throttling)
        self.last_alert_time = defaultdict(lambda: 0)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_stats = {
            "l2_imbalance": 0,
            "liquidations": 0,
            "volume_spike": 0,
            "news": 0,
            "mm_scenario": 0,
            "vp_break": 0,
            "total_sent": 0,
            "blocked_by_cooldown": 0,
            "blocked_by_threshold": 0,
        }

        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.volume_history = {}  # –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞
        self.last_news_check = 0  # Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π

        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False

        logger.info("‚úÖ EnhancedAlertsSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {len(self.tracked_symbols)}")
        logger.info(f"   ‚Ä¢ L2 –ø–æ—Ä–æ–≥ (–æ–±—ã—á–Ω—ã–π): {self.config['l2_normal_threshold']}%")
        logger.info(
            f"   ‚Ä¢ L2 –ø–æ—Ä–æ–≥ (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π): {self.config['l2_extreme_threshold']}%"
        )
        logger.info(f"   ‚Ä¢ L2 Cooldown: {self.config['l2_cooldown']}s")

    async def start_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–∞—Ä

        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥:
        - L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å orderbook (–≤—Å–µ –ø–∞—Ä—ã)
        - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
        - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∏ –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–æ–≤
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è EnhancedAlertsSystem —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True

        logger.info(
            f"üö® –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Enhanced Alerts –¥–ª—è "
            f"{len(self.tracked_symbols)} –ø–∞—Ä: {', '.join(self.tracked_symbols)}"
        )

        cycle_count = 0

        while self.is_running:
            try:
                cycle_count += 1
                cycle_start = time.time()

                logger.debug(f"üîÑ Enhanced Alerts —Ü–∏–∫–ª #{cycle_count}")

                # ========== 1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê L2 –î–ò–°–ë–ê–õ–ê–ù–°–ê –î–õ–Ø –í–°–ï–• –ü–ê–† ==========
                for symbol in self.tracked_symbols:
                    try:
                        await self.check_l2_imbalance_from_market_data(symbol)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_l2_imbalance –¥–ª—è {symbol}: {e}")

                # ========== 2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–°–¢–ï–ô (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç) ==========
                try:
                    await self.check_news_alerts()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_news_alerts: {e}")

                # ========== 3Ô∏è‚É£ –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –õ–ò–ö–í–ò–î–ê–¶–ò–ò –ò –û–ë–™–Å–ú–´ ==========
                # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å:
                # for symbol in self.tracked_symbols:
                #     try:
                #         await self.check_liquidations(symbol)
                #     except Exception as e:
                #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_liquidations –¥–ª—è {symbol}: {e}")
                #
                #     try:
                #         await self.check_volume_spike(symbol)
                #     except Exception as e:
                #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_volume_spike –¥–ª—è {symbol}: {e}")

                # –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                cycle_duration = time.time() - cycle_start
                logger.debug(
                    f"‚úÖ Enhanced Alerts —Ü–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ "
                    f"{cycle_duration:.2f}s"
                )

                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                sleep_time = max(1, self.config["monitoring_interval"] - cycle_duration)
                logger.debug(f"‚è≥ Enhanced Alerts: –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.0f} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(sleep_time)

            except asyncio.CancelledError:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError)")
                break

            except Exception as e:
                logger.error(
                    f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ "
                    f"Enhanced Alerts: {e}",
                    exc_info=True,
                )
                await asyncio.sleep(60)

    async def check_l2_imbalance_from_market_data(self, symbol: str):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∏–∑ bot.market_data
        (–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket)

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ bot.market_data
            if not hasattr(self.bot, "market_data"):
                logger.debug("‚ö†Ô∏è bot.market_data –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if symbol not in self.bot.market_data:
                logger.debug(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ market_data")
                return

            market_data = self.bot.market_data[symbol]
            imbalance_pct = market_data.get("orderbook_imbalance", 0) * 100

            # –ü–æ–ª—É—á–∞–µ–º bid/ask –¥–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            bid_pct = market_data.get("bid_pressure_pct", 50.0)
            ask_pct = market_data.get("ask_pressure_pct", 50.0)

            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await self.check_l2_imbalance(
                symbol=symbol, imbalance=imbalance_pct, bid_pct=bid_pct, ask_pct=ask_pct
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ check_l2_imbalance_from_market_data –¥–ª—è {symbol}: {e}"
            )

    async def check_l2_imbalance(
        self, symbol: str, imbalance: float, bid_pct: float, ask_pct: float
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ L2 Orderbook –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            imbalance: –î–∏—Å–±–∞–ª–∞–Ω—Å –≤ % (-100 –¥–æ +100)
            bid_pct: –ü—Ä–æ—Ü–µ–Ω—Ç BID –¥–∞–≤–ª–µ–Ω–∏—è
            ask_pct: –ü—Ä–æ—Ü–µ–Ω—Ç ASK –¥–∞–≤–ª–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        try:
            abs_imbalance = abs(imbalance)

            # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞
            if abs_imbalance < self.config["l2_normal_threshold"]:
                # –û–±—ã—á–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (<85%) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                self.alert_stats["blocked_by_threshold"] += 1
                logger.debug(
                    f"L2 {symbol}: {abs_imbalance:.1f}% - –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –ø—Ä–æ–ø—É—â–µ–Ω"
                )
                return False

            # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            now = time.time()
            alert_key = f"l2_{symbol}"

            if alert_key in self.last_alert_time:
                time_since_last = now - self.last_alert_time[alert_key]

                if time_since_last < self.config["l2_cooldown"]:
                    # Cooldown –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
                    self.alert_stats["blocked_by_cooldown"] += 1
                    remaining = int(self.config["l2_cooldown"] - time_since_last)
                    logger.debug(
                        f"L2 {symbol}: {abs_imbalance:.1f}% - cooldown "
                        f"({remaining}s –æ—Å—Ç–∞–ª–æ—Å—å), –ø—Ä–æ–ø—É—â–µ–Ω"
                    )
                    return False

            # 3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            if abs_imbalance >= self.config["l2_extreme_threshold"]:
                emoji = "üö®"
                level = "–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô"
                color = "üî¥"
            else:
                emoji = "‚ö†Ô∏è"
                level = "–°–ò–õ–¨–ù–´–ô"
                color = "üü°"

            # 4Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if imbalance > 0:
                direction = "üìà BUY PRESSURE"
                side_color = "üü¢"
                pressure_text = "–°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫"
            else:
                direction = "üìâ SELL PRESSURE"
                side_color = "üî¥"
                pressure_text = "–°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"

            # 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""{emoji} L2 ORDERBOOK - {level} –î–ò–°–ë–ê–õ–ê–ù–°

{color} –ü–∞—Ä–∞: {symbol}
‚îú‚îÄ –î–∏—Å–±–∞–ª–∞–Ω—Å: {abs_imbalance:.1f}%
‚îú‚îÄ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
‚îî‚îÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
   ‚Ä¢ BID: {bid_pct:.1f}%
   ‚Ä¢ ASK: {ask_pct:.1f}%

{side_color} {pressure_text}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""

            # 6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
            success = await self.send_alert("l2_imbalance", message, priority="high")

            if success:
                self.last_alert_time[alert_key] = now
                logger.info(
                    f"‚úÖ L2 Alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {symbol} {imbalance:+.1f}% ({level})"
                )
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_l2_imbalance: {e}", exc_info=True)
            return False

    async def check_news_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            # Throttling: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —á–∞—â–µ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            current_time = time.time()

            if current_time - self.last_news_check < self.config["news_check_interval"]:
                return

            self.last_news_check = current_time

            logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            if not hasattr(self.bot, "news_cache") or not self.bot.news_cache:
                logger.debug("‚ö†Ô∏è –ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç")
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
            one_hour_ago = datetime.now() - timedelta(hours=1)
            critical_news = []

            for news in self.bot.news_cache:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ—Å—Ç–∏
                news_time = news.get("published_at", "")
                if not news_time:
                    continue

                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ timestamp
                    news_dt = datetime.fromisoformat(news_time.replace("Z", "+00:00"))

                    # –§–∏–ª—å—Ç—Ä: –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    if news_dt < one_hour_ago:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    title = news.get("title", "").lower()
                    body = news.get("body", "").lower()
                    text = f"{title} {body}"

                    for keyword in self.config["news_critical_keywords"]:
                        if keyword.lower() in text:
                            sentiment = news.get("sentiment", 0.0)
                            critical_news.append(
                                {
                                    "title": news.get("title", "N/A"),
                                    "keyword": keyword,
                                    "sentiment": sentiment,
                                    "time": news_dt.strftime("%H:%M"),
                                    "source": news.get("source", "Unknown"),
                                }
                            )
                            break  # –û–¥–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å = –æ–¥–∏–Ω –∞–ª–µ—Ä—Ç

                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                    continue

            if critical_news:
                # Throttling
                alert_key = "news_critical"
                if self._should_throttle(alert_key, self.config["news_cooldown"]):
                    return

                # –ë–µ—Ä—ë–º —Ç–æ–ø-3 –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                top_news = critical_news[:3]

                message = "üö® –ö–†–ò–¢–ò–ß–ù–´–ï –ù–û–í–û–°–¢–ò\n\n"
                for idx, news in enumerate(top_news, 1):
                    sentiment_emoji = (
                        "üü¢"
                        if news["sentiment"] > 0
                        else "üî¥" if news["sentiment"] < 0 else "‚ö™"
                    )
                    message += (
                        f"{idx}. {news['title'][:80]}...\n"
                        f"   –ö–ª—é—á.—Å–ª–æ–≤–æ: {news['keyword']}\n"
                        f"   –¢–æ–Ω: {sentiment_emoji} {news['sentiment']:.2f}\n"
                        f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}\n"
                        f"   –í—Ä–µ–º—è: {news['time']}\n\n"
                    )

                await self.send_alert("news", message, priority="high")
                logger.info(f"üö® News Alert: {len(critical_news)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.debug("‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_news_alerts: {e}", exc_info=True)

    async def check_liquidations(self, symbol: str):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
        """
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –¥–ª—è {symbol}...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ Bybit
            if not hasattr(self.bot, "bybit_connector"):
                logger.debug("‚ö†Ô∏è bybit_connector –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            trades = await self.bot.bybit_connector.get_trades(symbol, limit=100)

            if not trades:
                logger.debug(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            current_time = time.time() * 1000  # ms
            large_trades = []

            for trade in trades:
                price = float(trade.get("price", 0))
                qty = float(trade.get("qty", 0))
                trade_time = int(trade.get("time", 0))
                side = trade.get("side", "")

                # –û–±—ä—ë–º —Å–¥–µ–ª–∫–∏ –≤ USD
                trade_usd = price * qty

                # –§–∏–ª—å—Ç—Ä: —Å–¥–µ–ª–∫–∏ > $100k –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                if (
                    trade_usd > self.config["liquidation_min_usd"]
                    and (current_time - trade_time) < 60000
                ):

                    large_trades.append(
                        {
                            "price": price,
                            "qty": qty,
                            "usd": trade_usd,
                            "side": side,
                            "time": datetime.fromtimestamp(trade_time / 1000).strftime(
                                "%H:%M:%S"
                            ),
                        }
                    )

            if large_trades:
                # Throttling
                alert_key = f"liq_{symbol}"
                if self._should_throttle(alert_key, self.config["liq_cooldown"]):
                    return

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä—ë–º—É
                large_trades.sort(key=lambda x: x["usd"], reverse=True)
                top_trade = large_trades[0]

                emoji = "üí•" if top_trade["usd"] > 500000 else "‚ö†Ô∏è"
                side_emoji = (
                    "üü¢ LONG" if top_trade["side"].upper() == "BUY" else "üî¥ SHORT"
                )

                message = (
                    f"{emoji} –ö–†–£–ü–ù–ê–Ø –õ–ò–ö–í–ò–î–ê–¶–ò–Ø\n"
                    f"–ü–∞—Ä–∞: {symbol}\n"
                    f"–û–±—ä—ë–º: ${top_trade['usd']:,.0f}\n"
                    f"–°—Ç–æ—Ä–æ–Ω–∞: {side_emoji}\n"
                    f"–¶–µ–Ω–∞: ${top_trade['price']:,.2f}\n"
                    f"–í—Ä–µ–º—è: {top_trade['time']}\n"
                    f"–í—Å–µ–≥–æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(large_trades)}"
                )

                await self.send_alert("liquidations", message, priority="high")
                logger.info(
                    f"üí• Liquidation Alert: {symbol} (${top_trade['usd']:,.0f})"
                )
            else:
                logger.debug(f"‚úÖ {symbol}: –ö—Ä—É–ø–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_liquidations: {e}", exc_info=True)

    async def check_volume_spike(self, symbol: str):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä—ë–º–∞ —Ç–æ—Ä–≥–æ–≤

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
        """
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞ –¥–ª—è {symbol}...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
            if not hasattr(self.bot, "bybit_connector"):
                logger.debug("‚ö†Ô∏è bybit_connector –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            candles = await self.bot.bybit_connector.get_klines(
                symbol=symbol, interval="60", limit=24  # 1H  # 24 —á–∞—Å–∞
            )

            if not candles or len(candles) < 10:
                logger.debug(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
            volumes = [float(c["volume"]) for c in candles[:-4]]
            avg_volume = sum(volumes) / len(volumes)

            # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º
            current_volume = float(candles[-1]["volume"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if symbol not in self.volume_history:
                self.volume_history[symbol] = []

            self.volume_history[symbol].append(
                {"volume": current_volume, "time": time.time()}
            )

            # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            if len(self.volume_history[symbol]) > 100:
                self.volume_history[symbol].pop(0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫
            spike_ratio = current_volume / avg_volume if avg_volume > 0 else 0

            if spike_ratio > self.config["volume_spike_multiplier"]:
                # Throttling
                alert_key = f"vol_{symbol}"
                if self._should_throttle(alert_key, self.config["vol_cooldown"]):
                    return

                emoji = "üî•" if spike_ratio > 5.0 else "üìä"

                message = (
                    f"{emoji} –í–°–ü–õ–ï–°–ö –û–ë–™–Å–ú–ê\n"
                    f"–ü–∞—Ä–∞: {symbol}\n"
                    f"–¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {current_volume:,.0f}\n"
                    f"–°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {avg_volume:,.0f}\n"
                    f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: {spike_ratio:.2f}x\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )

                await self.send_alert("volume_spike", message, priority="medium")
                logger.info(f"üìä Volume Spike Alert: {symbol} ({spike_ratio:.2f}x)")
            else:
                logger.debug(f"‚úÖ {symbol}: –í—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞ –Ω–µ—Ç ({spike_ratio:.2f}x)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_volume_spike: {e}", exc_info=True)

    async def check_mm_scenario_change(
        self,
        symbol: str,
        old_scenario: str,
        new_scenario: str,
        confidence: float,
        phase: str,
    ) -> bool:
        """
        –ê–ª–µ—Ä—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è Market Maker

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            old_scenario: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            new_scenario: –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
            phase: –§–∞–∑–∞ —Ä—ã–Ω–∫–∞

        Returns:
            bool: True –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            # Throttling
            alert_key = f"mm_{symbol}"
            if self._should_throttle(alert_key, self.config["mm_cooldown"]):
                return False

            # –í–∞–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            important_scenarios = ["Overheat", "Trap", "Reversal", "Squeeze"]

            emoji = "üö®" if new_scenario in important_scenarios else "üé≤"

            message = f"""{emoji} –°–ú–ï–ù–ê –°–¶–ï–ù–ê–†–ò–Ø –ú–ê–†–ö–ï–¢–ú–ï–ô–ö–ï–†–ê

üíé –ü–∞—Ä–∞: {symbol}

–ë—ã–ª–æ: {old_scenario}
   ‚¨áÔ∏è
–°—Ç–∞–ª–æ: {new_scenario}

üìä –ù–æ–≤–∞—è —Ñ–∞–∑–∞: {phase}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.0f}%

{"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!" if new_scenario in important_scenarios else ""}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""

            success = await self.send_alert("mm_scenario", message, priority="high")

            if success:
                logger.info(
                    f"‚úÖ MM Scenario Alert: {symbol} {old_scenario}‚Üí{new_scenario}"
                )
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_mm_scenario_change: {e}", exc_info=True)
            return False

    async def check_volume_profile_break(
        self, symbol: str, level: str, price: float, direction: str
    ) -> bool:
        """
        –ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø—Ä–æ–±–æ–µ Volume Profile —É—Ä–æ–≤–Ω—è

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            level: –£—Ä–æ–≤–µ–Ω—å (POC, VAH, VAL)
            price: –¶–µ–Ω–∞ –ø—Ä–æ–±–æ—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (UP/DOWN)

        Returns:
            bool: True –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            # Throttling
            alert_key = f"vp_{symbol}_{level}"
            if self._should_throttle(alert_key, self.config["vp_cooldown"]):
                return False

            emoji = "üöÄ" if direction == "UP" else "‚ö†Ô∏è"

            message = f"""{emoji} VOLUME PROFILE BREAKOUT

üíé –ü–∞—Ä–∞: {symbol}
‚îú‚îÄ –£—Ä–æ–≤–µ–Ω—å: {level}
‚îú‚îÄ –¶–µ–Ω–∞: ${price:,.2f}
‚îî‚îÄ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {"üìà –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö" if direction == "UP" else "üìâ –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑"}

{"–í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é" if direction == "UP" else "–í–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""

            success = await self.send_alert("vp_break", message, priority="medium")

            if success:
                logger.info(f"‚úÖ VP Break Alert: {symbol} {level} {direction}")
                return True

            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ check_volume_profile_break: {e}", exc_info=True)
            return False

    async def send_alert(
        self, alert_type: str, message: str, priority: str = "medium"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram

        Args:
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ (l2_imbalance, news, etc.)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low/medium/high)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if alert_type in self.alert_stats:
                self.alert_stats[alert_type] += 1
            self.alert_stats["total_sent"] += 1

            # –õ–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ [{alert_type}]: {message[:50]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if self.telegram_handler:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ send_alert
                    if hasattr(self.telegram_handler, "send_alert"):
                        await self.telegram_handler.send_alert(message)
                    # –ò–ª–∏ send_message
                    elif hasattr(self.telegram_handler, "send_message"):
                        await self.telegram_handler.send_message(message)
                    # –ò–ª–∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API
                    elif hasattr(self.telegram_handler, "application"):
                        await self.telegram_handler.application.bot.send_message(
                            chat_id=self.telegram_handler.chat_id,
                            text=message,
                            parse_mode="HTML",
                        )
                    else:
                        logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ telegram_handler")
                        return False

                    logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {alert_type}")
                    return True

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
                    return False
            else:
                logger.warning("‚ö†Ô∏è telegram_handler –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ send_alert: {e}", exc_info=True)
            return False

    def _should_throttle(self, alert_key: str, cooldown: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ throttling (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)

        Args:
            alert_key: –ö–ª—é—á –∞–ª–µ—Ä—Ç–∞ (l2_BTCUSDT)
            cooldown: Cooldown –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, False –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        """
        current_time = time.time()
        last_time = self.last_alert_time.get(alert_key, 0)

        if current_time - last_time < cooldown:
            remaining = cooldown - (current_time - last_time)
            logger.debug(f"‚è∏Ô∏è Throttle: {alert_key} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f}s)")
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º

        self.last_alert_time[alert_key] = current_time
        return False  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
        return self.alert_stats.copy()

    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.alert_stats = {
            "l2_imbalance": 0,
            "liquidations": 0,
            "volume_spike": 0,
            "news": 0,
            "mm_scenario": 0,
            "vp_break": 0,
            "total_sent": 0,
            "blocked_by_cooldown": 0,
            "blocked_by_threshold": 0,
        }
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ EnhancedAlertsSystem...")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    import asyncio

    async def test_alerts():
        # –°–æ–∑–¥–∞—ë–º mock bot
        class MockBot:
            def __init__(self):
                self.market_data = {}

        bot = MockBot()
        alerts = EnhancedAlertsSystem(bot_instance=bot)

        # –¢–µ—Å—Ç 1: –ù–∏–∑–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (–¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        result = await alerts.check_l2_imbalance(
            symbol="BTCUSDT", imbalance=72.0, bid_pct=72.0, ask_pct=28.0
        )
        print(f"–¢–µ—Å—Ç 1 (72%): {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if result else '–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")

        # –¢–µ—Å—Ç 2: –í—ã—Å–æ–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
        result = await alerts.check_l2_imbalance(
            symbol="BTCUSDT", imbalance=88.0, bid_pct=88.0, ask_pct=12.0
        )
        print(f"–¢–µ—Å—Ç 2 (88%): {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if result else '–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")

        # –¢–µ—Å—Ç 3: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
        result = await alerts.check_l2_imbalance(
            symbol="BTCUSDT", imbalance=93.0, bid_pct=93.0, ask_pct=7.0
        )
        print(f"–¢–µ—Å—Ç 3 (93%): {'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if result else '–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = alerts.get_stats()
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

    asyncio.run(test_alerts())
